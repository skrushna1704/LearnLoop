[
  {
    "id": 1,
    "title": "Is JavaScript a dynamically typed language or statically typed?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "Is JavaScript a dynamically typed language or statically typed?",
    "options": [
      {
        "id": "a",
        "text": "JavaScript is a dynamically typed language.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "It uses static typing like C++.",
        "isCorrect": false
      }
    ],
    "explanation": "JavaScript is a dynamically typed language. It means that variables can hold values of any type.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "is-javascript-a-dynamically-typed-language-or-"
  },
  {
    "id": 2,
    "title": "What are the different datatypes in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What are the different datatypes in JavaScript?",
    "options": [
      { "id": "a", "text": "String", "isCorrect": true },
      { "id": "b", "text": "Function", "isCorrect": false },
      { "id": "c", "text": "null", "isCorrect": false }
    ],
    "explanation": "Primitive datatypes: String, number, boolean, undefined, null, BigInt, Symbol.",
    "interview_tip": "(Most asked)",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "what-are-the-different-datatypes-in-javascript"
  },
  {
    "id": 3,
    "title": "List out some key features of ES6",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "List out some key features of ES6.",
    "options": [
      { "id": "a", "text": "Arrow functions", "isCorrect": true },
      { "id": "b", "text": "with keyword", "isCorrect": false }
    ],
    "explanation": "Arrow functions, Let and Const declarations.",
    "interview_tip": "Here try to explain definitions (provided in below example) of listed features to extend conversation.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "list-out-some-key-features-of-es6"
  },
  {
    "id": 4,
    "title": "What are modules in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What are modules in JavaScript?",
    "options": [
      {
        "id": "a",
        "text": "Modules allow us to break down large pieces of code into smaller, manageable pieces.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Modules are global functions.",
        "isCorrect": false
      },
      { "id": "c", "text": "Modules disable hoisting.", "isCorrect": false }
    ],
    "explanation": "Modules help manage complexity in larger applications.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "what-are-modules-in-javascript"
  },
  {
    "id": 5,
    "title": "What is NaN in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What is NaN in JavaScript?",
    "options": [
      { "id": "a", "text": "NaN stands for Not-a-Number.", "isCorrect": true },
      { "id": "b", "text": "NaN is a type of undefined.", "isCorrect": false },
      {
        "id": "c",
        "text": "NaN means Null Assignment Noted.",
        "isCorrect": false
      }
    ],
    "explanation": "NaN is a special number indicating the result of a failed number conversion.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "what-is-nan-in-javascript"
  },
  {
    "id": 6,
    "title": "Is JavaScript synchronous or asynchronous?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "Is JavaScript synchronous or asynchronous?",
    "options": [
      {
        "id": "a",
        "text": "Single-threaded and synchronous.",
        "isCorrect": true
      },
      { "id": "b", "text": "Multi-threaded and blocking.", "isCorrect": false },
      { "id": "c", "text": "Single-threaded but blocking.", "isCorrect": false }
    ],
    "explanation": "JS is single-threaded but supports async programming with callbacks and promises.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "is-javascript-synchronous-or-asynchronous"
  },
  {
    "id": 7,
    "title": "What is 'typeof null' in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What is 'typeof null' in JavaScript?",
    "options": [
      { "id": "a", "text": "object", "isCorrect": true },
      { "id": "b", "text": "null", "isCorrect": false },
      { "id": "c", "text": "undefined", "isCorrect": false }
    ],
    "explanation": "typeof null is 'object' — this is a known bug in JS but left for legacy reasons.",
    "interview_tip": "One of the most popular JS trivia questions.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "what-is-typeof-null-in-javascript"
  },
  {
    "id": 8,
    "title": "Difference between '==' and '==='",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What is the difference between '==' and '===' in JavaScript?",
    "options": [
      {
        "id": "a",
        "text": "'===' compares both type and value",
        "isCorrect": true
      },
      { "id": "b", "text": "'==' compares only type", "isCorrect": false },
      {
        "id": "c",
        "text": "'===' is used only in TypeScript",
        "isCorrect": false
      }
    ],
    "explanation": "Strict equality (===) checks both value and type.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "difference-between-and-in-javascript"
  },
  {
    "id": 9,
    "title": "What is 'undefined' in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What is 'undefined' in JavaScript?",
    "options": [
      {
        "id": "a",
        "text": "A variable that has been declared but not assigned",
        "isCorrect": true
      },
      { "id": "b", "text": "A syntax error", "isCorrect": false },
      { "id": "c", "text": "A variable with value null", "isCorrect": false }
    ],
    "explanation": "Undefined means a variable exists but hasn't been assigned a value yet.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "what-is-undefined-in-javascript"
  },
  {
    "id": 10,
    "title": "Difference between null and undefined",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What is the difference between null and undefined?",
    "options": [
      {
        "id": "a",
        "text": "undefined means not assigned; null is explicitly assigned",
        "isCorrect": true
      },
      { "id": "b", "text": "They are the same", "isCorrect": false }
    ],
    "explanation": "null is intentional absence of value; undefined is uninitialized.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "difference-between-null-and-undefined"
  },
  {
    "id": 11,
    "title": "What is Hoisting in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is Hoisting in JavaScript?",
    "options": [
      {
        "id": "a",
        "text": "The JavaScript compiler moves all the declarations of variables and functions on top, so there will not be any error.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "In JavaScript, variables and functions can be used before declaring it.",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "This is called hoisting.",
        "isCorrect": false
      },
      {
        "id": "d",
        "text": "In other scripting/server side languages, variables or functions must be declared before using it.",
        "isCorrect": false
      }
    ],
    "explanation": "In other scripting/server side languages, variables or functions must be declared before using it. In JavaScript, variables and functions can be used before declaring it.",
    "interview_tip": "Mention buzz word temporal dead zone in above answer so that interviewer will ask What is temporal dead zone.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "what-is-hoisting-in-javascript"
  },
  {
    "id": 12,
    "title": "What are the various things hoisted in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What are the various things hoisted in JavaScript?",
    "options": [
      {
        "id": "a",
        "text": "var - Hoisted",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "class declarations - Hoisted but not initialized.",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Anonymous Function expressions: Not hoisted",
        "isCorrect": false
      }
    ],
    "explanation": "Function declarations: Fully hoisted. var - Hoisted",
    "interview_tip": null,
    "references": ["https://stackabuse.com/hoisting-in-javascript/"],
    "timeLimit": 45,
    "points": 2,
    "slug": "what-are-the-various-things-hoisted-in-javascript"
  },
  {
    "id": 13,
    "title": "JavaScript Closure Basics",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is a closure in JavaScript?",
    "options": [
      {
        "id": "a",
        "text": "A function having access to its outer function scope even after the outer function has returned",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "A block that prevents access to variables",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "An immediately invoked function expression",
        "isCorrect": false
      }
    ],
    "explanation": "Closures allow functions to retain access to their lexical scope even when executed outside their original context.",
    "interview_tip": "Explain with a simple counter or factory function example.",
    "references": ["MDN: Closures"],
    "timeLimit": 45,
    "points": 2,
    "slug": "javascript-closure-basics"
  },
  {
    "id": 14,
    "title": "Event Delegation in JavaScript",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is event delegation in JavaScript?",
    "options": [
      {
        "id": "a",
        "text": "Attaching a single event listener to a parent element to handle events from its children",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Using setTimeout to delay event handlers",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Using async functions inside event handlers",
        "isCorrect": false
      }
    ],
    "explanation": "Event delegation uses event bubbling to efficiently manage events by attaching one listener to a parent.",
    "interview_tip": "Mention dynamic DOM scenarios where it's useful.",
    "references": ["https://javascript.info/event-delegation"],
    "timeLimit": 45,
    "points": 2,
    "slug": "event-delegation-javascript"
  },
  {
    "id": 15,
    "title": "Truthy and Falsy Values",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "Which of the following is a falsy value in JavaScript?",
    "options": [
      { "id": "a", "text": "0", "isCorrect": true },
      { "id": "b", "text": "'false'", "isCorrect": false },
      { "id": "c", "text": "[]", "isCorrect": false },
      { "id": "d", "text": "{}", "isCorrect": false }
    ],
    "explanation": "Falsy values include 0, '', null, undefined, NaN, false. Others are truthy even if empty.",
    "interview_tip": "Asked often to test conditional logic understanding.",
    "references": ["MDN: Falsy"],
    "timeLimit": 30,
    "points": 1,
    "slug": "truthy-falsy-values"
  },
  {
    "id": 16,
    "title": "JavaScript Debouncing",
    "category": "JavaScript",
    "difficulty": "Advanced",
    "question": "What is debouncing in JavaScript?",
    "options": [
      {
        "id": "a",
        "text": "A technique to delay execution until after a specified time has passed since the last call",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "A method to queue multiple functions in parallel",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "A promise that retries failed API calls",
        "isCorrect": false
      }
    ],
    "explanation": "Debouncing improves performance by limiting how often a function is invoked — useful in resize, scroll, input events.",
    "interview_tip": "Common in frontend apps for input or resize listeners.",
    "references": [],
    "timeLimit": 60,
    "points": 3,
    "slug": "javascript-debouncing"
  },
  {
    "id": 17,
    "title": "Difference Between call() and apply()",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the difference between call() and apply() in JavaScript?",
    "options": [
      {
        "id": "a",
        "text": "apply() takes arguments as an array, call() takes them separately",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "call() is async, apply() is sync",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "call() changes scope; apply() does not",
        "isCorrect": false
      }
    ],
    "explanation": "Both invoke functions with explicit `this`, but apply takes arguments as an array, call does not.",
    "interview_tip": "Add bind() comparison to enrich answer.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "call-apply-difference"
  },
  {
    "id": 18,
    "title": "JavaScript Temporal Dead Zone",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "Which behavior is associated with the temporal dead zone?",
    "options": [
      {
        "id": "a",
        "text": "Accessing a let/const variable before declaration causes a ReferenceError",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "It makes variables globally accessible",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Only affects variables declared with var",
        "isCorrect": false
      }
    ],
    "explanation": "let and const are hoisted but not initialized; accessing them before assignment throws an error.",
    "interview_tip": "Combine this with hoisting and scope examples.",
    "references": ["MDN: Temporal Dead Zone"],
    "timeLimit": 45,
    "points": 2,
    "slug": "temporal-dead-zone-error"
  },
  {
    "id": 19,
    "title": "JavaScript Symbol Type",
    "category": "JavaScript",
    "difficulty": "Advanced",
    "question": "What is a Symbol in JavaScript?",
    "options": [
      {
        "id": "a",
        "text": "A primitive type for creating unique identifiers",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "A data type for large integers",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "A wrapper for regular expressions",
        "isCorrect": false
      }
    ],
    "explanation": "Symbols are unique and immutable identifiers, useful for property keys to avoid collisions.",
    "interview_tip": "Used in advanced API design and meta programming.",
    "references": ["MDN: Symbol"],
    "timeLimit": 60,
    "points": 3,
    "slug": "javascript-symbol-type"
  },
  {
    "id": 20,
    "title": "JavaScript Event Loop",
    "category": "JavaScript",
    "difficulty": "Advanced",
    "question": "What is the role of the event loop in JavaScript?",
    "options": [
      {
        "id": "a",
        "text": "It handles async callbacks by queuing them after synchronous code",
        "isCorrect": true
      },
      { "id": "b", "text": "It makes JS multi-threaded", "isCorrect": false },
      { "id": "c", "text": "It prevents memory leaks", "isCorrect": false }
    ],
    "explanation": "The event loop processes callback queues and ensures non-blocking execution.",
    "interview_tip": "Mention microtask and macrotask queues (e.g. promises vs setTimeout).",
    "references": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop"
    ],
    "timeLimit": 60,
    "points": 3,
    "slug": "javascript-event-loop"
  },
  {
    "id": 21,
    "title": "Object.freeze vs Object.seal",
    "category": "JavaScript",
    "difficulty": "Advanced",
    "question": "What is the difference between Object.freeze() and Object.seal()?",
    "options": [
      {
        "id": "a",
        "text": "freeze prevents any changes; seal allows changing existing properties",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "seal prevents extension; freeze allows adding properties",
        "isCorrect": false
      },
      { "id": "c", "text": "freeze only works on arrays", "isCorrect": false }
    ],
    "explanation": "Object.freeze() locks the object completely. Object.seal() prevents new properties but allows edits.",
    "interview_tip": "Often used in immutability-related discussions.",
    "references": ["MDN: Object.freeze"],
    "timeLimit": 60,
    "points": 3,
    "slug": "object-freeze-vs-seal"
  },
  {
    "id": 22,
    "title": "JavaScript typeof quirks",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What does typeof null return in JavaScript?",
    "options": [
      { "id": "a", "text": "'object'", "isCorrect": true },
      { "id": "b", "text": "'null'", "isCorrect": false },
      { "id": "c", "text": "'undefined'", "isCorrect": false }
    ],
    "explanation": "typeof null is 'object' due to a historical bug in the language.",
    "interview_tip": "Useful trick question — don't forget it's a bug, not a feature.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "typeof-null-quirk"
  },
  {
    "id": 23,
    "title": "What is IIFE in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What does IIFE stand for and what does it do?",
    "options": [
      {
        "id": "a",
        "text": "Immediately Invoked Function Expression",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Internal Inline Function Execution",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Independent Internal Function Evaluation",
        "isCorrect": false
      }
    ],
    "explanation": "IIFE is a function that runs as soon as it is defined. It creates a private scope.",
    "interview_tip": "Used in modular patterns or to avoid global scope pollution.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "what-is-iife-in-javascript"
  },
  {
    "id": 24,
    "title": "What is 'this' in arrow functions?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "How does the 'this' keyword behave in arrow functions?",
    "options": [
      {
        "id": "a",
        "text": "It retains the value of 'this' from the enclosing lexical context",
        "isCorrect": true
      },
      { "id": "b", "text": "It creates its own context", "isCorrect": false },
      {
        "id": "c",
        "text": "It behaves differently each time",
        "isCorrect": false
      }
    ],
    "explanation": "Arrow functions don't have their own 'this'; they capture it from the surrounding scope.",
    "interview_tip": "Often asked with event handlers or object methods.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "arrow-function-this"
  },
  {
    "id": 25,
    "title": "Shallow vs Deep Copy",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "Which of the following creates a deep copy of an object?",
    "options": [
      {
        "id": "a",
        "text": "JSON.parse(JSON.stringify(obj))",
        "isCorrect": true
      },
      { "id": "b", "text": "Object.assign({}, obj)", "isCorrect": false },
      { "id": "c", "text": "Spread operator {...obj}", "isCorrect": false }
    ],
    "explanation": "Only JSON.stringify/parse creates a deep copy, though with limitations.",
    "interview_tip": "Mention limitations like undefined, functions, circular refs.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "deep-copy-vs-shallow-copy"
  },
  {
    "id": 26,
    "title": "What is Memoization?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the purpose of memoization?",
    "options": [
      {
        "id": "a",
        "text": "To cache results of expensive function calls",
        "isCorrect": true
      },
      { "id": "b", "text": "To prevent memory leaks", "isCorrect": false },
      {
        "id": "c",
        "text": "To run async functions in sequence",
        "isCorrect": false
      }
    ],
    "explanation": "Memoization helps optimize performance by storing the result of function calls.",
    "interview_tip": "Show example with recursive Fibonacci.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "memoization-javascript"
  },
  {
    "id": 27,
    "title": "Falsy but Truthy Looking Value",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "Which of these is falsy in JavaScript?",
    "options": [
      { "id": "a", "text": "0", "isCorrect": true },
      { "id": "b", "text": "'false'", "isCorrect": false },
      { "id": "c", "text": "[]", "isCorrect": false },
      { "id": "d", "text": "{}", "isCorrect": false }
    ],
    "explanation": "Only 0 is falsy; others are truthy despite their name or appearance.",
    "interview_tip": "Important for conditional logic.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "falsy-looking-value"
  },
  {
    "id": 28,
    "title": "Optional Chaining Operator",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What does the optional chaining operator (?.) do?",
    "options": [
      {
        "id": "a",
        "text": "Safely access deeply nested properties without throwing an error",
        "isCorrect": true
      },
      { "id": "b", "text": "Creates a chain of promises", "isCorrect": false },
      { "id": "c", "text": "Declares optional variables", "isCorrect": false }
    ],
    "explanation": "?. prevents runtime errors when accessing undefined/null deeply nested properties.",
    "interview_tip": "Combine with nullish coalescing in answers.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "optional-chaining-operator"
  },
  {
    "id": 29,
    "title": "What is event bubbling?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "Which direction does event bubbling propagate in the DOM?",
    "options": [
      {
        "id": "a",
        "text": "From target element up to ancestors",
        "isCorrect": true
      },
      { "id": "b", "text": "From root to target element", "isCorrect": false },
      { "id": "c", "text": "Only on leaf nodes", "isCorrect": false }
    ],
    "explanation": "Bubbling means event propagates from the target element to its parents.",
    "interview_tip": "Also learn event capturing for contrast.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "event-bubbling-direction"
  },
  {
    "id": 30,
    "title": "What is a WeakMap?",
    "category": "JavaScript",
    "difficulty": "Advanced",
    "question": "Which key characteristic defines a WeakMap?",
    "options": [
      {
        "id": "a",
        "text": "It allows only object keys and is not iterable",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "It allows primitive keys and is iterable",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "It supports deep cloning of keys",
        "isCorrect": false
      }
    ],
    "explanation": "WeakMaps are used for memory-managed key-value pairs using object keys.",
    "interview_tip": "Mention use case like private data in classes.",
    "references": [],
    "timeLimit": 60,
    "points": 3,
    "slug": "weakmap-characteristics"
  },
  {
    "id": 31,
    "title": "Difference: Array.map vs forEach",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "Which of the following is true about map() vs forEach()?",
    "options": [
      {
        "id": "a",
        "text": "map returns a new array, forEach does not",
        "isCorrect": true
      },
      { "id": "b", "text": "forEach returns a new array", "isCorrect": false },
      {
        "id": "c",
        "text": "map modifies the original array",
        "isCorrect": false
      }
    ],
    "explanation": "map() transforms and returns a new array. forEach() executes side-effects only.",
    "interview_tip": "Often asked in functional array manipulation rounds.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "map-vs-foreach"
  },
  {
    "id": 32,
    "title": "Infinity in JavaScript",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What is the result of dividing a positive number by 0 in JavaScript?",
    "options": [
      { "id": "a", "text": "Infinity", "isCorrect": true },
      { "id": "b", "text": "NaN", "isCorrect": false },
      { "id": "c", "text": "0", "isCorrect": false }
    ],
    "explanation": "In JavaScript, dividing a positive number by 0 results in Infinity.",
    "interview_tip": "Also test what happens with negative or 0/0.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "division-by-zero-infinity"
  },
  {
    "id": 33,
    "title": "What is generator function in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is generator function in JavaScript?",
    "options": [
      {
        "id": "a",
        "text": "They are defined using function* syntax and contain one or more yield expressions.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "The main method of a generator is next(), which returns an object with properties done and value.",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "A generator function is a function which can be paused and resumed at any point during execution.",
        "isCorrect": false
      }
    ],
    "explanation": "A generator function is a function which can be paused and resumed at any point during execution. They are defined using function* syntax and contain one or more yield expressions.",
    "interview_tip": null,
    "references": ["https://javascript.info/generators"],
    "timeLimit": 45,
    "points": 2,
    "slug": "what-is-generator-function-in-javascript"
  },
  {
    "id": 34,
    "title": "What is JWT?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is JWT?",
    "options": [
      {
        "id": "a",
        "text": "JWT stands for JSON Web Token.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "It is a compact, URL-safe way of representing claims between two parties.",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "JWTs are commonly used for authentication and authorization.",
        "isCorrect": false
      }
    ],
    "explanation": "JWT stands for JSON Web Token. It is a compact, URL-safe way of representing claims between two parties.",
    "interview_tip": "Mention that JWTs can be stored in localStorage or cookies, and the pros/cons of each.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "what-is-jwt"
  },
  {
    "id": 35,
    "title": "What is event capturing?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is event capturing?",
    "options": [
      {
        "id": "a",
        "text": "It's less commonly used than bubbling.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Event capturing is the opposite of bubbling.",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Events are first captured from the outermost ancestor down to the target element.",
        "isCorrect": false
      }
    ],
    "explanation": "Event capturing is the opposite of bubbling. Events are first captured from the outermost ancestor down to the target element.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "what-is-event-capturing"
  },
  {
    "id": 36,
    "title": "What's the difference between Object.keys, Object.values and Object.entries?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What's the difference between Object.keys, Object.values and Object.entries?",
    "options": [
      {
        "id": "a",
        "text": "Object.values(): returns an array of values.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Object.entries(): returns an array of [key, value] pairs.",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Object.keys(): returns an array of keys.",
        "isCorrect": false
      }
    ],
    "explanation": "Object.keys(): returns an array of keys. Object.values(): returns an array of values.",
    "interview_tip": "Practice examples for this—it might be asked.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "what-s-the-difference-between-object-keys-object-values-and-object-entries"
  },
  {
    "id": 37,
    "title": "What does strict mode do in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What does strict mode do in JavaScript?",
    "options": [
      {
        "id": "a",
        "text": "It changes the value of this in functions to undefined instead of window in non-method calls.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "It prevents the use of undeclared variables.",
        "isCorrect": false
      }
    ],
    "explanation": "Strict mode makes JavaScript more secure and reduces silent errors. It prevents the use of undeclared variables.",
    "interview_tip": null,
    "references": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode"
    ],
    "timeLimit": 45,
    "points": 2,
    "slug": "what-does-strict-mode-do-in-javascript"
  },
  {
    "id": 38,
    "title": "What is event bubbling?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is event bubbling?",
    "options": [
      {
        "id": "a",
        "text": "Event bubbling is when an event triggered on a child element propagates up through its ancestors in the DOM tree.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "It allows event listeners on parent elements to respond to events fired on children.",
        "isCorrect": false
      }
    ],
    "explanation": "Event bubbling is when an event triggered on a child element propagates up through its ancestors in the DOM tree. It allows event listeners on parent elements to respond to events fired on children.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "what-is-event-bubbling"
  },
  {
    "id": 39,
    "title": "What is Set in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is Set in JavaScript?",
    "options": [
      {
        "id": "a",
        "text": "It does not allow duplicate elements.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "A Set is a collection of unique values.",
        "isCorrect": false
      }
    ],
    "explanation": "A Set is a collection of unique values. It does not allow duplicate elements.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "what-is-set-in-javascript"
  },
  {
    "id": 40,
    "title": "What is helmet in Express.js?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is helmet in Express.js?",
    "options": [
      {
        "id": "a",
        "text": "helmet is a middleware for Express.js that helps secure your apps by setting various HTTP headers.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "It prevents common vulnerabilities like XSS, clickjacking, and more.",
        "isCorrect": false
      }
    ],
    "explanation": "helmet is a middleware for Express.js that helps secure your apps by setting various HTTP headers. It prevents common vulnerabilities like XSS, clickjacking, and more.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "what-is-helmet-in-express-js"
  },
  {
    "id": 41,
    "title": "What is morgan in Express.js?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is morgan in Express.js?",
    "options": [
      {
        "id": "a",
        "text": "morgan is a middleware used for HTTP request logging in Express.js applications.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "It helps in debugging and logging requests in different formats.",
        "isCorrect": false
      }
    ],
    "explanation": "morgan is a middleware used for HTTP request logging in Express.js applications. It helps in debugging and logging requests in different formats.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "what-is-morgan-in-express-js"
  },
  {
    "id": 42,
    "title": "What is the difference between stopPropagation() and stopImmediatePropagation()?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the difference between stopPropagation() and stopImmediatePropagation()?",
    "options": [
      {
        "id": "a",
        "text": "stopPropagation() prevents further propagation of the event in the bubbling or capturing phase.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "stopImmediatePropagation() not only prevents further propagation but also prevents other handlers of the same event on the same element from being executed.",
        "isCorrect": false
      }
    ],
    "explanation": "stopPropagation() prevents further propagation of the event in the bubbling or capturing phase. stopImmediatePropagation() not only prevents further propagation but also prevents other handlers of the same event on the same element from being executed.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "what-is-the-difference-between-stoppropagation-and-stopimmediatepropagation"
  },
  {
    "id": 43,
    "title": "How can you check if a variable is an array?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "How can you check if a variable is an array?",
    "options": [
      {
        "id": "a",
        "text": "variable instanceof Array",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Array.isArray(variable)",
        "isCorrect": false
      }
    ],
    "explanation": "Array.isArray(variable) variable instanceof Array",
    "interview_tip": null,
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "how-can-you-check-if-a-variable-is-an-array"
  },
  {
    "id": 44,
    "title": "What is the difference between map and filter?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the difference between map and filter?",
    "options": [
      {
        "id": "a",
        "text": "map transforms each element of an array and creates a new array containing the transformed elements.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "filter creates a new array with only those elements which satisfy the specified condition.",
        "isCorrect": false
      }
    ],
    "explanation": "map transforms each element of an array and creates a new array containing the transformed elements. filter creates a new array with only those elements which satisfy the specified condition.",
    "interview_tip": "(Frequently asked)",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "what-is-the-difference-between-map-and-filter"
  },
  {
    "id": 45,
    "title": "What is the use of addEventListener?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What is the use of addEventListener?",
    "options": [
      {
        "id": "a",
        "text": "addEventListener allows us to attach multiple event handlers to the same element for the same event.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "It provides control over event bubbling and capturing phases.",
        "isCorrect": false
      }
    ],
    "explanation": "addEventListener allows us to attach multiple event handlers to the same element for the same event. It provides control over event bubbling and capturing phases.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "what-is-the-use-of-addeventlistener"
  },
  {
    "id": 46,
    "title": "What is NaN === NaN?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is NaN === NaN?",
    "options": [
      {
        "id": "a",
        "text": "NaN === NaN returns false.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "NaN is the only value in JavaScript that is not equal to itself.",
        "isCorrect": false
      }
    ],
    "explanation": "NaN === NaN returns false. NaN is the only value in JavaScript that is not equal to itself.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "what-is-nan-nan"
  },
  {
    "id": 47,
    "title": "What is bcrypt?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is bcrypt?",
    "options": [
      {
        "id": "a",
        "text": "It incorporates salting to make hashes unique and computationally expensive to crack.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "bcrypt is a hashing algorithm used to secure passwords.",
        "isCorrect": false
      }
    ],
    "explanation": "bcrypt is a hashing algorithm used to secure passwords. It incorporates salting to make hashes unique and computationally expensive to crack.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "what-is-bcrypt"
  },
  {
    "id": 48,
    "title": "What is middleware in Express.js?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is middleware in Express.js?",
    "options": [
      {
        "id": "a",
        "text": "It can modify the request/response, end the request-response cycle, or call the next middleware in the stack.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Middleware in Express.js is a function that has access to the request, response, and next objects.",
        "isCorrect": false
      }
    ],
    "explanation": "Middleware in Express.js is a function that has access to the request, response, and next objects. It can modify the request/response, end the request-response cycle, or call the next middleware in the stack.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "what-is-middleware-in-express-js"
  },
  {
    "id": 49,
    "title": "What is the purpose of the this keyword?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the purpose of the this keyword?",
    "options": [
      {
        "id": "a",
        "text": "Its value depends on how the function was called.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "this refers to the object that is executing the current function.",
        "isCorrect": false
      }
    ],
    "explanation": "this refers to the object that is executing the current function. Its value depends on how the function was called.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "what-is-the-purpose-of-the-this-keyword"
  },
  {
    "id": 50,
    "title": "How do you prevent event bubbling?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "How do you prevent event bubbling?",
    "options": [
      {
        "id": "a",
        "text": "This prevents the event from bubbling up the DOM tree.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "By using event.stopPropagation() method.",
        "isCorrect": false
      }
    ],
    "explanation": "By using event.stopPropagation() method. This prevents the event from bubbling up the DOM tree.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "how-do-you-prevent-event-bubbling"
  },
  {
    "id": 51,
    "title": "What is error-first callback?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is error-first callback?",
    "options": [
      {
        "id": "a",
        "text": "If there's no error, the first argument is null.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "An error-first callback is a pattern where the first argument of the callback is reserved for an error object, and the second argument contains the result data.",
        "isCorrect": false
      }
    ],
    "explanation": "An error-first callback is a pattern where the first argument of the callback is reserved for an error object, and the second argument contains the result data. If there's no error, the first argument is null.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "what-is-error-first-callback"
  },
  {
    "id": 52,
    "title": "What is event delegation?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is event delegation?",
    "options": [
      {
        "id": "a",
        "text": "It works by leveraging event bubbling.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Event delegation is a technique where a single event listener is added to a parent element to manage events on multiple child elements.",
        "isCorrect": false
      }
    ],
    "explanation": "Event delegation is a technique where a single event listener is added to a parent element to manage events on multiple child elements. It works by leveraging event bubbling.",
    "interview_tip": "They might ask you to write an event delegation example.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "what-is-event-delegation"
  },
  {
    "id": 53,
    "title": "What is process.env in Node.js?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is process.env in Node.js?",
    "options": [
      {
        "id": "a",
        "text": "process.env is an object in Node.js that stores environment variables.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "It allows access to configuration values defined in the system or in .env files.",
        "isCorrect": false
      }
    ],
    "explanation": "process.env is an object in Node.js that stores environment variables. It allows access to configuration values defined in the system or in .env files.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "what-is-process-env-in-node-js"
  },
  {
    "id": 54,
    "title": "What is package.json?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What is package.json?",
    "options": [
      {
        "id": "a",
        "text": "It includes details such as project name, version, dependencies, scripts, and other configuration.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "package.json is a file used to manage a Node.js project's metadata.",
        "isCorrect": false
      }
    ],
    "explanation": "package.json is a file used to manage a Node.js project's metadata. It includes details such as project name, version, dependencies, scripts, and other configuration.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "what-is-package-json"
  },
  {
    "id": 55,
    "title": "What is Buffer in Node.js?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is Buffer in Node.js?",
    "options": [
      {
        "id": "a",
        "text": "Buffer is a global object in Node.js used to handle binary data.",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "It allows reading and writing of binary streams such as files and network protocols.",
        "isCorrect": false
      }
    ],
    "explanation": "Buffer is a global object in Node.js used to handle binary data. It allows reading and writing of binary streams such as files and network protocols.",
    "interview_tip": null,
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "what-is-buffer-in-node-js"
  },
  {
    "id": 56,
    "title": "How can you copy an object in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "How can you copy an object in JavaScript?",
    "options": [
      {
        "id": "a",
        "text": "Using Object.assign({}, obj)",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Using the spread operator {...obj}",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Using JSON.parse(JSON.stringify(obj)) for deep cloning",
        "isCorrect": false
      }
    ],
    "explanation": "Using Object.assign({}, obj) Using the spread operator {...obj}",
    "interview_tip": "Be aware of shallow vs deep copy differences.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "how-can-you-copy-an-object-in-javascript"
  },
  {
    "id": 57,
    "title": "How do you handle asynchronous code in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "How do you handle asynchronous code in JavaScript?",
    "options": [
      {
        "id": "a",
        "text": "Using Promises",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Using callbacks",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Using async/await syntax",
        "isCorrect": false
      }
    ],
    "explanation": "Using callbacks Using Promises",
    "interview_tip": "Practice writing code snippets with each of these approaches and explain them with examples during interviews.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "how-do-you-handle-asynchronous-code-in-javascript"
  },
  {
    "id": 58,
    "title": "JavaScript NaN Check",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "Which method can be used to check if a value is NaN?",
    "options": [
      { "id": "a", "text": "Number.isNaN()", "isCorrect": true },
      { "id": "b", "text": "isInteger()", "isCorrect": false },
      { "id": "c", "text": "typeof()", "isCorrect": false }
    ],
    "explanation": "Number.isNaN() accurately checks if a value is NaN without coercion.",
    "interview_tip": "Don't confuse with global isNaN(), which coerces values.",
    "references": ["MDN: Number.isNaN"],
    "timeLimit": 30,
    "points": 1,
    "slug": "check-if-value-is-nan"
  },
  {
    "id": 59,
    "title": "Undefined vs Not Defined",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What is the difference between 'undefined' and 'not defined'?",
    "options": [
      {
        "id": "a",
        "text": "Undefined is declared but not assigned; not defined is not declared",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Both mean variable not declared",
        "isCorrect": false
      }
    ],
    "explanation": "'undefined' means a variable exists but has no value. 'not defined' means it doesn't exist.",
    "interview_tip": "This is commonly used in trick questions during interviews.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "undefined-vs-not-defined"
  },
  {
    "id": 60,
    "title": "JavaScript typeof Behavior",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What is the output of typeof NaN in JavaScript?",
    "options": [
      { "id": "a", "text": "'number'", "isCorrect": true },
      { "id": "b", "text": "'NaN'", "isCorrect": false },
      { "id": "c", "text": "'undefined'", "isCorrect": false }
    ],
    "explanation": "NaN is considered a number in JavaScript, which can be confusing.",
    "interview_tip": "Mention it during type coercion discussions.",
    "references": ["MDN: typeof"],
    "timeLimit": 30,
    "points": 1,
    "slug": "typeof-nan"
  },
  {
    "id": 61,
    "title": "String to Number Conversion",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "Which of the following correctly converts a string '123' to a number?",
    "options": [
      { "id": "a", "text": "Number('123')", "isCorrect": true },
      { "id": "b", "text": "'123' + 0", "isCorrect": false },
      { "id": "c", "text": "parseString('123')", "isCorrect": false }
    ],
    "explanation": "Number('123') or parseInt can be used for conversion.",
    "interview_tip": "Show difference between Number(), parseInt(), and unary +.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "string-to-number-conversion"
  },
  {
    "id": 62,
    "title": "Variable Scope",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "Which keyword is block-scoped?",
    "options": [
      { "id": "a", "text": "let", "isCorrect": true },
      { "id": "b", "text": "var", "isCorrect": false },
      { "id": "c", "text": "function", "isCorrect": false }
    ],
    "explanation": "Only 'let' and 'const' are block-scoped.",
    "interview_tip": "This often connects to hoisting and TDZ topics.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "block-scope-variable"
  },
  {
    "id": 63,
    "title": "JavaScript Promises",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the initial state of a Promise?",
    "options": [
      { "id": "a", "text": "pending", "isCorrect": true },
      { "id": "b", "text": "fulfilled", "isCorrect": false },
      { "id": "c", "text": "rejected", "isCorrect": false }
    ],
    "explanation": "A promise starts in a pending state until it is either fulfilled or rejected.",
    "interview_tip": "Understand promise lifecycle and chaining.",
    "references": ["MDN: Promises"],
    "timeLimit": 45,
    "points": 2,
    "slug": "promise-initial-state"
  },
  {
    "id": 64,
    "title": "JavaScript Async/Await",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What does 'await' do in an async function?",
    "options": [
      {
        "id": "a",
        "text": "Pauses execution until promise settles",
        "isCorrect": true
      },
      { "id": "b", "text": "Runs code concurrently", "isCorrect": false },
      { "id": "c", "text": "Creates a blocking loop", "isCorrect": false }
    ],
    "explanation": "'await' pauses execution until the promise resolves or rejects.",
    "interview_tip": "Mention that only works inside async functions.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "await-behavior"
  },
  {
    "id": 65,
    "title": "Destructuring Arrays",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "How can you extract the first two items from an array using destructuring?",
    "options": [
      { "id": "a", "text": "const [a, b] = array", "isCorrect": true },
      {
        "id": "b",
        "text": "const a = array[0]; const b = array[2]",
        "isCorrect": false
      },
      { "id": "c", "text": "const a, b = array", "isCorrect": false }
    ],
    "explanation": "Destructuring syntax allows direct variable assignment from arrays.",
    "interview_tip": "Show nested and object destructuring for depth.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "array-destructuring"
  },
  {
    "id": 66,
    "title": "typeof Symbol",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What does typeof Symbol() return?",
    "options": [
      { "id": "a", "text": "'symbol'", "isCorrect": true },
      { "id": "b", "text": "'object'", "isCorrect": false },
      { "id": "c", "text": "'function'", "isCorrect": false }
    ],
    "explanation": "Symbols are a primitive type introduced in ES6.",
    "interview_tip": "Great for unique keys in objects.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "typeof-symbol"
  },
  {
    "id": 67,
    "title": "Nullish Coalescing Operator",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What does the nullish coalescing operator (??) do?",
    "options": [
      {
        "id": "a",
        "text": "Returns right-hand side if left is null or undefined",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Returns right-hand side if left is falsy",
        "isCorrect": false
      },
      { "id": "c", "text": "Throws error if left is null", "isCorrect": false }
    ],
    "explanation": "?? is used to assign fallback values only for null/undefined, not other falsy values.",
    "interview_tip": "Use with optional chaining for robustness.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "nullish-coalescing-operator"
  },
  {
    "id": 68,
    "title": "Array.isArray Usage",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "How can you check if a variable is an array?",
    "options": [
      { "id": "a", "text": "Array.isArray(value)", "isCorrect": true },
      { "id": "b", "text": "typeof value === 'array'", "isCorrect": false },
      { "id": "c", "text": "value instanceof Object", "isCorrect": false }
    ],
    "explanation": "`Array.isArray()` is the reliable method to check for arrays.",
    "interview_tip": "typeof arrays returns 'object', which is misleading.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "check-if-array"
  },
  {
    "id": 69,
    "title": "JavaScript Pass-by Behavior",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "Are JavaScript function arguments passed by value or reference?",
    "options": [
      {
        "id": "a",
        "text": "Primitives by value, objects by reference",
        "isCorrect": true
      },
      { "id": "b", "text": "Everything by value", "isCorrect": false },
      { "id": "c", "text": "Everything by reference", "isCorrect": false }
    ],
    "explanation": "Primitive types (like numbers) are passed by value. Objects/arrays are passed by reference.",
    "interview_tip": "Demonstrate mutation in object example.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "pass-by-value-or-reference"
  },
  {
    "id": 70,
    "title": "setTimeout Execution Order",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What happens when setTimeout is called with a delay of 0ms?",
    "options": [
      {
        "id": "a",
        "text": "Callback is queued after current execution completes",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Callback executes immediately",
        "isCorrect": false
      },
      { "id": "c", "text": "Callback is ignored", "isCorrect": false }
    ],
    "explanation": "Even with 0ms, setTimeout is queued after the call stack clears.",
    "interview_tip": "This tests your understanding of the event loop.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "settimeout-zero-delay"
  },
  {
    "id": 71,
    "title": "Object.keys() Output",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What does Object.keys({a: 1, b: 2}) return?",
    "options": [
      { "id": "a", "text": "['a', 'b']", "isCorrect": true },
      { "id": "b", "text": "[1, 2]", "isCorrect": false },
      { "id": "c", "text": "[['a', 1], ['b', 2]]", "isCorrect": false }
    ],
    "explanation": "Object.keys() returns an array of property names.",
    "interview_tip": "Also learn Object.values and Object.entries.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "object-keys-output"
  },
  {
    "id": 72,
    "title": "JSON.stringify Limitation",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "Which value is excluded from JSON.stringify output?",
    "options": [
      { "id": "a", "text": "undefined", "isCorrect": true },
      { "id": "b", "text": "string", "isCorrect": false },
      { "id": "c", "text": "null", "isCorrect": false }
    ],
    "explanation": "undefined and functions are skipped in JSON.stringify.",
    "interview_tip": "Test this with nested properties too.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "json-stringify-limitation"
  },
  {
    "id": 73,
    "title": "Function Declaration vs Expression",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "Which of the following is NOT hoisted?",
    "options": [
      { "id": "a", "text": "Function expression", "isCorrect": true },
      { "id": "b", "text": "Function declaration", "isCorrect": false },
      { "id": "c", "text": "var functionName()", "isCorrect": false }
    ],
    "explanation": "Only function declarations are hoisted fully. Expressions are hoisted as undefined.",
    "interview_tip": "Use practical code snippets for clarity.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "function-expression-hoisting"
  },
  {
    "id": 74,
    "title": "for...in vs for...of",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the difference between for...in and for...of?",
    "options": [
      {
        "id": "a",
        "text": "for...in iterates keys; for...of iterates values",
        "isCorrect": true
      },
      { "id": "b", "text": "They both iterate values", "isCorrect": false },
      { "id": "c", "text": "for...in only works on arrays", "isCorrect": false }
    ],
    "explanation": "for...in gets object keys, for...of gets iterable values (like arrays).",
    "interview_tip": "Mix this with object/array examples.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "for-in-vs-for-of"
  },
  {
    "id": 75,
    "title": "Optional Parameters in Functions",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "How do you define optional parameters in JavaScript functions?",
    "options": [
      { "id": "a", "text": "Using default values", "isCorrect": true },
      { "id": "b", "text": "Using const inside function", "isCorrect": false },
      { "id": "c", "text": "Prefix with a question mark", "isCorrect": false }
    ],
    "explanation": "Using default values (e.g., function(x = 1)) creates optional parameters.",
    "interview_tip": "Show how it differs from TypeScript optional syntax.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "optional-function-params"
  },
  {
    "id": 76,
    "title": "Set vs Array",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is a key benefit of using Set over Array?",
    "options": [
      { "id": "a", "text": "Stores only unique values", "isCorrect": true },
      { "id": "b", "text": "Supports index-based access", "isCorrect": false },
      { "id": "c", "text": "Stores key-value pairs", "isCorrect": false }
    ],
    "explanation": "Set objects store unique values and are iterable.",
    "interview_tip": "Use it when duplicates should be avoided.",
    "references": [],
    "timeLimit": 45,
    "points": 2,
    "slug": "set-vs-array"
  },
  {
    "id": 77,
    "title": "Infinity Check",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What is the result of 1 / 0 in JavaScript?",
    "options": [
      { "id": "a", "text": "Infinity", "isCorrect": true },
      { "id": "b", "text": "NaN", "isCorrect": false },
      { "id": "c", "text": "Error", "isCorrect": false }
    ],
    "explanation": "JavaScript returns Infinity for positive division by 0.",
    "interview_tip": "Try with -1 / 0 too.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "infinity-in-js"
  },
  {
    "id": 3000,
    "title": "HTML Boilerplate",
    "category": "HTML",
    "difficulty": "Beginner",
    "question": "Which tag is required at the very beginning of every HTML document?",
    "options": [
      { "id": "a", "text": "<!DOCTYPE html>", "isCorrect": true },
      { "id": "b", "text": "<html>", "isCorrect": false },
      { "id": "c", "text": "<head>", "isCorrect": false }
    ],
    "explanation": "<!DOCTYPE html> declares the document type and HTML version.",
    "interview_tip": "Always use the latest doctype for HTML5 documents.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "html-boilerplate"
  },
  {
    "id": 3001,
    "title": "Main Heading",
    "category": "HTML",
    "difficulty": "Beginner",
    "question": "Which tag is used for the most important heading in HTML?",
    "options": [
      { "id": "a", "text": "<h1>", "isCorrect": true },
      { "id": "b", "text": "<h6>", "isCorrect": false },
      { "id": "c", "text": "<header>", "isCorrect": false }
    ],
    "explanation": "<h1> defines the main heading, <h6> the lowest heading.",
    "interview_tip": "Use only one <h1> per page for SEO.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "main-heading"
  },
  {
    "id": 3002,
    "title": "HTML Paragraph",
    "category": "HTML",
    "difficulty": "Beginner",
    "question": "What is the correct HTML tag for inserting a paragraph?",
    "options": [
      { "id": "a", "text": "<p>", "isCorrect": true },
      { "id": "b", "text": "<span>", "isCorrect": false },
      { "id": "c", "text": "<div>", "isCorrect": false }
    ],
    "explanation": "<p> is used for paragraphs in HTML.",
    "interview_tip": "Use paragraphs for semantic text grouping.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "html-paragraph"
  },
  {
    "id": 3003,
    "title": "HTML Lists",
    "category": "HTML",
    "difficulty": "Beginner",
    "question": "Which HTML tag is used to create an ordered list?",
    "options": [
      { "id": "a", "text": "<ol>", "isCorrect": true },
      { "id": "b", "text": "<ul>", "isCorrect": false },
      { "id": "c", "text": "<li>", "isCorrect": false }
    ],
    "explanation": "<ol> creates a numbered list, <ul> creates a bullet list.",
    "interview_tip": "Use <li> elements inside both <ul> and <ol>.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "html-ordered-list"
  },
  {
    "id": 3004,
    "title": "HTML Link",
    "category": "HTML",
    "difficulty": "Beginner",
    "question": "Which tag is used to create a hyperlink?",
    "options": [
      { "id": "a", "text": "<a>", "isCorrect": true },
      { "id": "b", "text": "<link>", "isCorrect": false },
      { "id": "c", "text": "<href>", "isCorrect": false }
    ],
    "explanation": "The <a> tag is used for hyperlinks and requires an href attribute.",
    "interview_tip": "Use target=\"_blank\" to open links in a new tab.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "html-link"
  },
  {
    "id": 3005,
    "title": "Image Embedding",
    "category": "HTML",
    "difficulty": "Beginner",
    "question": "What is the correct HTML element for inserting an image?",
    "options": [
      { "id": "a", "text": "<img>", "isCorrect": true },
      { "id": "b", "text": "<picture>", "isCorrect": false },
      { "id": "c", "text": "<src>", "isCorrect": false }
    ],
    "explanation": "<img> embeds an image. Use the src attribute to specify the image path.",
    "interview_tip": "Always provide an alt attribute for accessibility.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "image-embedding"
  },
  {
    "id": 3006,
    "title": "Line Break",
    "category": "HTML",
    "difficulty": "Beginner",
    "question": "Which HTML element is used for a line break?",
    "options": [
      { "id": "a", "text": "<br>", "isCorrect": true },
      { "id": "b", "text": "<hr>", "isCorrect": false },
      { "id": "c", "text": "<lb>", "isCorrect": false }
    ],
    "explanation": "<br> inserts a single line break.",
    "interview_tip": "Don't overuse <br>; use semantic elements for layout.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "line-break"
  },
  {
    "id": 3007,
    "title": "HTML Comment",
    "category": "HTML",
    "difficulty": "Beginner",
    "question": "How do you write a comment in HTML?",
    "options": [
      { "id": "a", "text": "<!-- Comment -->", "isCorrect": true },
      { "id": "b", "text": "// Comment", "isCorrect": false },
      { "id": "c", "text": "# Comment", "isCorrect": false }
    ],
    "explanation": "HTML comments use <!-- and --> around the text.",
    "interview_tip": "Comments are not displayed in the browser.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "html-comment"
  },
  {
    "id": 3008,
    "title": "Bold Text",
    "category": "HTML",
    "difficulty": "Beginner",
    "question": "Which tag is used to make text bold in HTML?",
    "options": [
      { "id": "a", "text": "<b>", "isCorrect": true },
      { "id": "b", "text": "<strong>", "isCorrect": false },
      { "id": "c", "text": "<em>", "isCorrect": false }
    ],
    "explanation": "<b> makes text bold without semantic importance, <strong> adds importance.",
    "interview_tip": "Use <strong> when the bold text is important.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "bold-text"
  },
  {
    "id": 3009,
    "title": "HTML Table",
    "category": "HTML",
    "difficulty": "Beginner",
    "question": "Which of the following tags is used to create a table row?",
    "options": [
      { "id": "a", "text": "<tr>", "isCorrect": true },
      { "id": "b", "text": "<td>", "isCorrect": false },
      { "id": "c", "text": "<table>", "isCorrect": false }
    ],
    "explanation": "<tr> creates a table row, and <td> is for table data cells.",
    "interview_tip": "Always organize <tr> elements within <table>.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "html-table-row"
  },
  {
    "id": 3010,
    "title": "HTML Table Cell",
    "category": "HTML",
    "difficulty": "Beginner",
    "question": "Which tag is used for a cell in a table row?",
    "options": [
      { "id": "a", "text": "<td>", "isCorrect": true },
      { "id": "b", "text": "<th>", "isCorrect": false },
      { "id": "c", "text": "<tr>", "isCorrect": false }
    ],
    "explanation": "<td> defines a table data cell.",
    "interview_tip": "<th> is for header cells.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "html-table-cell"
  },
  {
    "id": 3011,
    "title": "HTML Title",
    "category": "HTML",
    "difficulty": "Beginner",
    "question": "Where does the <title> tag belong in HTML?",
    "options": [
      { "id": "a", "text": "Inside <head>", "isCorrect": true },
      { "id": "b", "text": "Inside <body>", "isCorrect": false },
      { "id": "c", "text": "Anywhere", "isCorrect": false }
    ],
    "explanation": "<title> sets the page title in the browser tab.",
    "interview_tip": "Always specify a unique title for each page.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "html-title-location"
  },
  {
    "id": 3012,
    "title": "CSS Syntax",
    "category": "CSS",
    "difficulty": "Beginner",
    "question": "How do you select an element with id \"main\" in CSS?",
    "options": [
      { "id": "a", "text": "#main", "isCorrect": true },
      { "id": "b", "text": ".main", "isCorrect": false },
      { "id": "c", "text": "main", "isCorrect": false }
    ],
    "explanation": "# selects by id; . selects by class.",
    "interview_tip": "Use unique ids for page elements to keep CSS clear.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "css-id-selector"
  },
  {
    "id": 3013,
    "title": "CSS Class Selector",
    "category": "CSS",
    "difficulty": "Beginner",
    "question": "How do you select all elements with class 'item' in CSS?",
    "options": [
      { "id": "a", "text": ".item", "isCorrect": true },
      { "id": "b", "text": "#item", "isCorrect": false },
      { "id": "c", "text": "item", "isCorrect": false }
    ],
    "explanation": ". selects by class.",
    "interview_tip": "Classes can be reused across elements.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "css-class-selector"
  },
  {
    "id": 3014,
    "title": "CSS Color Property",
    "category": "CSS",
    "difficulty": "Beginner",
    "question": "Which property sets the text color in CSS?",
    "options": [
      { "id": "a", "text": "color", "isCorrect": true },
      { "id": "b", "text": "background-color", "isCorrect": false },
      { "id": "c", "text": "font-color", "isCorrect": false }
    ],
    "explanation": "Use color for text color.",
    "interview_tip": "Colors can be named, hex, or rgb values.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "css-color-property"
  },
  {
    "id": 3015,
    "title": "CSS Background Property",
    "category": "CSS",
    "difficulty": "Beginner",
    "question": "Which property sets the background color?",
    "options": [
      { "id": "a", "text": "background-color", "isCorrect": true },
      { "id": "b", "text": "color", "isCorrect": false },
      { "id": "c", "text": "bgcolor", "isCorrect": false }
    ],
    "explanation": "background-color sets the element's background color.",
    "interview_tip": "Don't confuse color with background-color.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "css-background-property"
  },
  {
    "id": 3016,
    "title": "CSS Font Size",
    "category": "CSS",
    "difficulty": "Beginner",
    "question": "How do you set the font size to 16 pixels in CSS?",
    "options": [
      { "id": "a", "text": "font-size: 16px;", "isCorrect": true },
      { "id": "b", "text": "text-size: 16px;", "isCorrect": false },
      { "id": "c", "text": "size: 16px;", "isCorrect": false }
    ],
    "explanation": "font-size property sets the size of text.",
    "interview_tip": "Use relative units for responsive font sizes.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "css-font-size"
  },
  {
    "id": 3017,
    "title": "CSS Add External Stylesheet",
    "category": "CSS",
    "difficulty": "Beginner",
    "question": "Which HTML tag is used to add an external CSS file?",
    "options": [
      { "id": "a", "text": "<link>", "isCorrect": true },
      { "id": "b", "text": "<style>", "isCorrect": false },
      { "id": "c", "text": "<script>", "isCorrect": false }
    ],
    "explanation": "<link> in <head> includes external CSS.",
    "interview_tip": "Remember the rel and href attributes.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "add-external-css"
  },
  {
    "id": 3018,
    "title": "CSS Inline Style",
    "category": "CSS",
    "difficulty": "Beginner",
    "question": "How do you apply a style to a single HTML element?",
    "options": [
      { "id": "a", "text": "Using the style attribute", "isCorrect": true },
      { "id": "b", "text": "Using the id attribute", "isCorrect": false },
      { "id": "c", "text": "Using the class attribute", "isCorrect": false }
    ],
    "explanation": "The style attribute sets inline CSS.",
    "interview_tip": "Use sparingly; prefer classes and ids.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "css-inline-style"
  },
  {
    "id": 3019,
    "title": "CSS Comments",
    "category": "CSS",
    "difficulty": "Beginner",
    "question": "How do you write a comment in CSS?",
    "options": [
      { "id": "a", "text": "/* comment */", "isCorrect": true },
      { "id": "b", "text": "// comment", "isCorrect": false },
      { "id": "c", "text": "# comment", "isCorrect": false }
    ],
    "explanation": "CSS comments use /* and */.",
    "interview_tip": "Comments help make CSS readable.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "css-comments"
  },
  {
    "id": 3020,
    "title": "CSS Center Text",
    "category": "CSS",
    "difficulty": "Beginner",
    "question": "Which property centers text horizontally?",
    "options": [
      { "id": "a", "text": "text-align: center;", "isCorrect": true },
      { "id": "b", "text": "vertical-align: center;", "isCorrect": false },
      { "id": "c", "text": "align: center;", "isCorrect": false }
    ],
    "explanation": "text-align horizontally aligns inline content.",
    "interview_tip": "Only works on inline or inline-block elements.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "css-center-text"
  },
  {
    "id": 3021,
    "title": "CSS Box Model",
    "category": "CSS",
    "difficulty": "Beginner",
    "question": "Which of these is NOT part of the standard box model?",
    "options": [
      { "id": "a", "text": "border-radius", "isCorrect": true },
      { "id": "b", "text": "padding", "isCorrect": false },
      { "id": "c", "text": "margin", "isCorrect": false }
    ],
    "explanation": "Standard box model: content, padding, border, margin. border-radius is a property.",
    "interview_tip": "Know how padding and border affect element size.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "css-box-model"
  },
  {
    "id": 3022,
    "title": "CSS Padding",
    "category": "CSS",
    "difficulty": "Beginner",
    "question": "What does the CSS property 'padding' control?",
    "options": [
      { "id": "a", "text": "Space inside the border", "isCorrect": true },
      { "id": "b", "text": "Space outside the border", "isCorrect": false },
      { "id": "c", "text": "Element's border width", "isCorrect": false }
    ],
    "explanation": "Padding is space inside the border, between the content and border.",
    "interview_tip": "Combine with margin for layout.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "css-padding"
  },
  {
    "id": 3023,
    "title": "CSS Margin",
    "category": "CSS",
    "difficulty": "Beginner",
    "question": "What does the CSS property 'margin' control?",
    "options": [
      { "id": "a", "text": "Space outside the border", "isCorrect": true },
      { "id": "b", "text": "Space inside the border", "isCorrect": false },
      { "id": "c", "text": "Element's content width", "isCorrect": false }
    ],
    "explanation": "Margin creates space outside the element's border.",
    "interview_tip": "Avoid margin collapse.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "css-margin"
  },
  {
    "id": 3024,
    "title": "CSS Display Block",
    "category": "CSS",
    "difficulty": "Beginner",
    "question": "What does 'display: block;' do to an element?",
    "options": [
      {
        "id": "a",
        "text": "Element takes up the full width",
        "isCorrect": true
      },
      { "id": "b", "text": "Element flows inline", "isCorrect": false },
      { "id": "c", "text": "Element hides from view", "isCorrect": false }
    ],
    "explanation": "Block elements take a new line and full width available.",
    "interview_tip": "Default for <div>, <p>, <h*>.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "css-display-block"
  },
  {
    "id": 3025,
    "title": "CSS Display Inline",
    "category": "CSS",
    "difficulty": "Beginner",
    "question": "What does 'display: inline;' do to an element?",
    "options": [
      {
        "id": "a",
        "text": "Element flows inline with other elements",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Element takes up the full width",
        "isCorrect": false
      },
      { "id": "c", "text": "Element acts as a block", "isCorrect": false }
    ],
    "explanation": "Inline elements do not start on a new line and only take necessary width.",
    "interview_tip": "Examples: <span>, <a>.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "css-display-inline"
  },
  {
    "id": 3026,
    "title": "CSS Hide Element",
    "category": "CSS",
    "difficulty": "Beginner",
    "question": "Which property hides an element from view?",
    "options": [
      { "id": "a", "text": "display: none;", "isCorrect": true },
      { "id": "b", "text": "visibility: none;", "isCorrect": false },
      { "id": "c", "text": "hide: true;", "isCorrect": false }
    ],
    "explanation": "display: none completely removes the element from layout.",
    "interview_tip": "visibility: hidden hides the element but reserves space.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "css-hide-element"
  },
  {
    "id": 3027,
    "title": "CSS Border",
    "category": "CSS",
    "difficulty": "Beginner",
    "question": "Which property creates a border around an element?",
    "options": [
      { "id": "a", "text": "border", "isCorrect": true },
      { "id": "b", "text": "outline", "isCorrect": false },
      { "id": "c", "text": "line", "isCorrect": false }
    ],
    "explanation": "border adds an outline around all sides of an element.",
    "interview_tip": "Specify border-width, style, and color.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "css-border"
  },
  {
    "id": 3028,
    "title": "CSS Font Family",
    "category": "CSS",
    "difficulty": "Beginner",
    "question": "Which property changes the font in CSS?",
    "options": [
      { "id": "a", "text": "font-family", "isCorrect": true },
      { "id": "b", "text": "font-face", "isCorrect": false },
      { "id": "c", "text": "font-style", "isCorrect": false }
    ],
    "explanation": "font-family specifies the typeface of the text.",
    "interview_tip": "Use fallbacks to ensure consistent look.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "css-font-family"
  },
  {
    "id": 3029,
    "title": "CSS Text Decoration",
    "category": "CSS",
    "difficulty": "Beginner",
    "question": "Which property is used to underline text?",
    "options": [
      { "id": "a", "text": "text-decoration: underline;", "isCorrect": true },
      { "id": "b", "text": "font-style: underline;", "isCorrect": false },
      { "id": "c", "text": "text-style: underline;", "isCorrect": false }
    ],
    "explanation": "text-decoration is used for underlines, overlines, line-through.",
    "interview_tip": "Commonly used for links.",
    "references": [],
    "timeLimit": 30,
    "points": 1,
    "slug": "css-text-decoration"
  },

  {
    "id": 3030,
    "title": "HTML Input Type File",
    "category": "HTML",
    "difficulty": "Intermediate",
    "question": "Which input type allows users to upload files?",
    "options": [
      { "id": "a", "text": "file", "isCorrect": true },
      { "id": "b", "text": "upload", "isCorrect": false },
      { "id": "c", "text": "text", "isCorrect": false }
    ],
    "explanation": "type=\"file\" lets users browse and select files for upload.",
    "interview_tip": "Always validate uploaded files server-side.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "html-input-file"
  },
  {
    "id": 3031,
    "title": "HTML Form Submission",
    "category": "HTML",
    "difficulty": "Intermediate",
    "question": "Which attribute specifies the destination URL for a form submission?",
    "options": [
      { "id": "a", "text": "action", "isCorrect": true },
      { "id": "b", "text": "method", "isCorrect": false },
      { "id": "c", "text": "target", "isCorrect": false }
    ],
    "explanation": "The action attribute sets the form submission endpoint.",
    "interview_tip": "Always define method and action for forms.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "html-form-action"
  },
  {
    "id": 3032,
    "title": "HTML Description List",
    "category": "HTML",
    "difficulty": "Intermediate",
    "question": "Which tags make up a description list in HTML?",
    "options": [
      { "id": "a", "text": "<dl>, <dt>, <dd>", "isCorrect": true },
      { "id": "b", "text": "<ul>, <li>, <ol>", "isCorrect": false },
      { "id": "c", "text": "<table>, <tr>, <td>", "isCorrect": false }
    ],
    "explanation": "<dl> is a description list, with <dt> for terms, <dd> for definitions.",
    "interview_tip": "Useful for glossaries or pairs of info.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "html-description-list"
  },
  {
    "id": 3033,
    "title": "HTML Placeholder Attribute",
    "category": "HTML",
    "difficulty": "Intermediate",
    "question": "What does the placeholder attribute do in an <input> element?",
    "options": [
      {
        "id": "a",
        "text": "Displays sample text inside the field",
        "isCorrect": true
      },
      { "id": "b", "text": "Validates user input", "isCorrect": false },
      { "id": "c", "text": "Adds a tooltip", "isCorrect": false }
    ],
    "explanation": "placeholder shows hint text until user enters data.",
    "interview_tip": "Don't use only placeholders for important labels.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "html-placeholder"
  },
  {
    "id": 3034,
    "title": "HTML Required Attribute",
    "category": "HTML",
    "difficulty": "Intermediate",
    "question": "Which attribute forces a form field to be filled before submission?",
    "options": [
      { "id": "a", "text": "required", "isCorrect": true },
      { "id": "b", "text": "mandatory", "isCorrect": false },
      { "id": "c", "text": "validate", "isCorrect": false }
    ],
    "explanation": "required attribute prevents empty submission.",
    "interview_tip": "Use for basic frontend validation.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "html-required-attribute"
  },
  {
    "id": 3035,
    "title": "HTML Radio Button",
    "category": "HTML",
    "difficulty": "Intermediate",
    "question": "How do you group radio buttons so only one can be selected at a time?",
    "options": [
      { "id": "a", "text": "Same name attribute", "isCorrect": true },
      { "id": "b", "text": "Same value attribute", "isCorrect": false },
      { "id": "c", "text": "Same id attribute", "isCorrect": false }
    ],
    "explanation": "Radio inputs with the same name work as a group.",
    "interview_tip": "Always pair labels for accessibility.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "html-radio-grouping"
  },
  {
    "id": 3036,
    "title": "HTML Data Attribute",
    "category": "HTML",
    "difficulty": "Intermediate",
    "question": "What is the purpose of data-* attributes in HTML?",
    "options": [
      {
        "id": "a",
        "text": "Store custom data private to the page",
        "isCorrect": true
      },
      { "id": "b", "text": "Add accessibility labels", "isCorrect": false },
      { "id": "c", "text": "Style elements", "isCorrect": false }
    ],
    "explanation": "data-* allows embedding custom attribute data on elements.",
    "interview_tip": "Commonly used for dynamic frontend scripting.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "html-data-attribute"
  },
  {
    "id": 3037,
    "title": "HTML Audio Element",
    "category": "HTML",
    "difficulty": "Intermediate",
    "question": "Which element is used to embed sound content in HTML5?",
    "options": [
      { "id": "a", "text": "<audio>", "isCorrect": true },
      { "id": "b", "text": "<sound>", "isCorrect": false },
      { "id": "c", "text": "<media>", "isCorrect": false }
    ],
    "explanation": "<audio> supports multiple formats and playback controls.",
    "interview_tip": "Always provide fallback content.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "html-audio-embed"
  },
  {
    "id": 3038,
    "title": "HTML Video Element",
    "category": "HTML",
    "difficulty": "Intermediate",
    "question": "What tag is used to embed video in HTML5?",
    "options": [
      { "id": "a", "text": "<video>", "isCorrect": true },
      { "id": "b", "text": "<movie>", "isCorrect": false },
      { "id": "c", "text": "<media>", "isCorrect": false }
    ],
    "explanation": "<video> tag embeds video content.",
    "interview_tip": "Offer multiple sources for browser support.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "html-video-embed"
  },
  {
    "id": 3039,
    "title": "HTML rowspan Attribute",
    "category": "HTML",
    "difficulty": "Intermediate",
    "question": "What does the rowspan attribute do in an HTML table?",
    "options": [
      { "id": "a", "text": "Merges cells vertically", "isCorrect": true },
      { "id": "b", "text": "Merges cells horizontally", "isCorrect": false },
      { "id": "c", "text": "Creates a row", "isCorrect": false }
    ],
    "explanation": "rowspan tells a cell to span multiple rows.",
    "interview_tip": "colspan merges cells horizontally.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "html-rowspan"
  },
  {
    "id": 3040,
    "title": "HTML colspan Attribute",
    "category": "HTML",
    "difficulty": "Intermediate",
    "question": "What does the colspan attribute do in an HTML table?",
    "options": [
      { "id": "a", "text": "Merges cells horizontally", "isCorrect": true },
      { "id": "b", "text": "Merges cells vertically", "isCorrect": false },
      { "id": "c", "text": "Creates a column", "isCorrect": false }
    ],
    "explanation": "colspan allows one cell to span multiple columns.",
    "interview_tip": "Use for table headers covering several columns.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "html-colspan"
  },
  {
    "id": 3041,
    "title": "HTML Meta Charset",
    "category": "HTML",
    "difficulty": "Intermediate",
    "question": "Which meta tag specifies character encoding in HTML5?",
    "options": [
      { "id": "a", "text": "<meta charset=\"UTF-8\">", "isCorrect": true },
      { "id": "b", "text": "<meta encoding=\"UTF-8\">", "isCorrect": false },
      { "id": "c", "text": "<charset=UTF-8>", "isCorrect": false }
    ],
    "explanation": "<meta charset=\"UTF-8\"> sets Unicode encoding for the page.",
    "interview_tip": "Place this tag early in <head>.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "html-meta-charset"
  },
  {
    "id": 3042,
    "title": "HTML <label> Usage",
    "category": "HTML",
    "difficulty": "Intermediate",
    "question": "Why should you use the <label> tag with form inputs?",
    "options": [
      { "id": "a", "text": "Improves accessibility", "isCorrect": true },
      { "id": "b", "text": "Provides tooltips", "isCorrect": false },
      { "id": "c", "text": "All the above", "isCorrect": false }
    ],
    "explanation": "<label> is essential for accessibility and screen readers.",
    "interview_tip": "Link labels to inputs using the 'for' attribute.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "html-label"
  },
  {
    "id": 3043,
    "title": "CSS Combinator Descendant",
    "category": "CSS",
    "difficulty": "Intermediate",
    "question": "Which selector targets all <em> elements inside a <div>?",
    "options": [
      { "id": "a", "text": "div em", "isCorrect": true },
      { "id": "b", "text": "div > em", "isCorrect": false },
      { "id": "c", "text": ".div em", "isCorrect": false }
    ],
    "explanation": "div em selects any <em> descendant of <div>.",
    "interview_tip": "Whitespace is the descendant combinator.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "css-descendant-selector"
  },
  {
    "id": 3044,
    "title": "CSS Grouping Selector",
    "category": "CSS",
    "difficulty": "Intermediate",
    "question": "How do you apply the same style to multiple selectors?",
    "options": [
      { "id": "a", "text": "Separate with commas", "isCorrect": true },
      { "id": "b", "text": "Separate with spaces", "isCorrect": false },
      { "id": "c", "text": "Separate with hyphens", "isCorrect": false }
    ],
    "explanation": "Comma-separated selectors group styles.",
    "interview_tip": "Reduces repetition in your stylesheet.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "css-grouping-selector"
  },
  {
    "id": 3045,
    "title": "CSS Attribute Selector",
    "category": "CSS",
    "difficulty": "Intermediate",
    "question": "Which selector targets <input> elements with a type of 'text'?",
    "options": [
      { "id": "a", "text": "input[type=\"text\"]", "isCorrect": true },
      { "id": "b", "text": ".input[text]", "isCorrect": false },
      { "id": "c", "text": "input.text", "isCorrect": false }
    ],
    "explanation": "Attribute selectors target specific attribute/value pairs.",
    "interview_tip": "Useful for styling form elements by type.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "css-attribute-selector"
  },
  {
    "id": 3046,
    "title": "CSS Child Selector",
    "category": "CSS",
    "difficulty": "Intermediate",
    "question": "Which selector matches all <li> elements that are direct children of <ul>?",
    "options": [
      { "id": "a", "text": "ul > li", "isCorrect": true },
      { "id": "b", "text": "ul li", "isCorrect": false },
      { "id": "c", "text": ".ul > li", "isCorrect": false }
    ],
    "explanation": "ul > li uses the child combinator for direct children.",
    "interview_tip": "Reduces selector specificity issues.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "css-child-selector"
  },
  {
    "id": 3047,
    "title": "CSS Pseudo-class Hover",
    "category": "CSS",
    "difficulty": "Intermediate",
    "question": "How do you style an element when the mouse is over it?",
    "options": [
      { "id": "a", "text": ":hover", "isCorrect": true },
      { "id": "b", "text": "::hover", "isCorrect": false },
      { "id": "c", "text": "onHover", "isCorrect": false }
    ],
    "explanation": ":hover applies styles on mouse over.",
    "interview_tip": "Works on most elements, commonly used for links and buttons.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "css-hover-pseudo"
  },
  {
    "id": 3048,
    "title": "CSS Pseudo-class First-child",
    "category": "CSS",
    "difficulty": "Intermediate",
    "question": "Which selector targets the first child of its parent?",
    "options": [
      { "id": "a", "text": ":first-child", "isCorrect": true },
      { "id": "b", "text": "::first-child", "isCorrect": false },
      { "id": "c", "text": ".first-child", "isCorrect": false }
    ],
    "explanation": ":first-child selects an element if it is first among its siblings.",
    "interview_tip": "Useful for styling lists or menus differently.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "css-first-child"
  },
  {
    "id": 3049,
    "title": "CSS Box Sizing",
    "category": "CSS",
    "difficulty": "Intermediate",
    "question": "Which value for box-sizing includes border and padding in width?",
    "options": [
      { "id": "a", "text": "border-box", "isCorrect": true },
      { "id": "b", "text": "content-box", "isCorrect": false },
      { "id": "c", "text": "padding-box", "isCorrect": false }
    ],
    "explanation": "border-box makes sizing more predictable.",
    "interview_tip": "Common to apply box-sizing: border-box to all elements.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "css-box-sizing"
  },
  {
    "id": 3050,
    "title": "CSS Inheritance",
    "category": "CSS",
    "difficulty": "Intermediate",
    "question": "Which CSS properties are typically inherited?",
    "options": [
      { "id": "a", "text": "color and font-family", "isCorrect": true },
      { "id": "b", "text": "margin and padding", "isCorrect": false },
      { "id": "c", "text": "border and width", "isCorrect": false }
    ],
    "explanation": "Text and font properties are usually inherited.",
    "interview_tip": "Structural properties typically are NOT inherited.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "css-inheritance"
  },
  {
    "id": 3051,
    "title": "CSS Priority",
    "category": "CSS",
    "difficulty": "Intermediate",
    "question": "What increases a CSS declaration's priority the most?",
    "options": [
      { "id": "a", "text": "!important", "isCorrect": true },
      { "id": "b", "text": "Specificity", "isCorrect": false },
      { "id": "c", "text": "Order in stylesheet", "isCorrect": false }
    ],
    "explanation": "!important overrides other declarations (use sparingly).",
    "interview_tip": "Overusing !important can make CSS unmaintainable.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "css-important"
  },
  {
    "id": 3052,
    "title": "CSS Float Property",
    "category": "CSS",
    "difficulty": "Intermediate",
    "question": "What does the CSS float property do?",
    "options": [
      { "id": "a", "text": "Moves elements left or right", "isCorrect": true },
      { "id": "b", "text": "Increases font size", "isCorrect": false },
      { "id": "c", "text": "Adds padding", "isCorrect": false }
    ],
    "explanation": "float positions elements to the left or right, wrapping non-floated content.",
    "interview_tip": "Use clearfix to avoid layout issues.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "css-float"
  },
  {
    "id": 3053,
    "title": "CSS Clear Property",
    "category": "CSS",
    "difficulty": "Intermediate",
    "question": "Which property stops an element from flowing next to floated elements?",
    "options": [
      { "id": "a", "text": "clear", "isCorrect": true },
      { "id": "b", "text": "float: none", "isCorrect": false },
      { "id": "c", "text": "overflow", "isCorrect": false }
    ],
    "explanation": "clear prevents elements from sitting beside floated elements.",
    "interview_tip": "Clearfix hack uses overflow or pseudo-elements.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "css-clear"
  },
  {
    "id": 3054,
    "title": "CSS z-index",
    "category": "CSS",
    "difficulty": "Intermediate",
    "question": "What does the z-index property control?",
    "options": [
      {
        "id": "a",
        "text": "Stacking order of positioned elements",
        "isCorrect": true
      },
      { "id": "b", "text": "Element opacity", "isCorrect": false },
      { "id": "c", "text": "Element width", "isCorrect": false }
    ],
    "explanation": "z-index controls which positioned elements appear in front of others.",
    "interview_tip": "Applies only to positioned elements (not static).",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "css-z-index"
  },
  {
    "id": 3055,
    "title": "CSS Overflow",
    "category": "CSS",
    "difficulty": "Intermediate",
    "question": "Which CSS property handles content that exceeds an element's box?",
    "options": [
      { "id": "a", "text": "overflow", "isCorrect": true },
      { "id": "b", "text": "scroll", "isCorrect": false },
      { "id": "c", "text": "max-content", "isCorrect": false }
    ],
    "explanation": "overflow can hide, scroll, or display extra content.",
    "interview_tip": "Common values: visible, hidden, scroll, auto.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "css-overflow"
  },
  {
    "id": 3056,
    "title": "CSS Flexbox",
    "category": "CSS",
    "difficulty": "Intermediate",
    "question": "Which property declares a flexible container?",
    "options": [
      { "id": "a", "text": "display: flex;", "isCorrect": true },
      { "id": "b", "text": "display: block;", "isCorrect": false },
      { "id": "c", "text": "display: grid;", "isCorrect": false }
    ],
    "explanation": "display: flex; creates a flex container for advanced layouts.",
    "interview_tip": "Combine with justify-content and align-items.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "css-flexbox"
  },
  {
    "id": 3057,
    "title": "CSS Media Queries",
    "category": "CSS",
    "difficulty": "Intermediate",
    "question": "What are CSS media queries used for?",
    "options": [
      {
        "id": "a",
        "text": "Responsive design for different devices",
        "isCorrect": true
      },
      { "id": "b", "text": "Styling media files", "isCorrect": false },
      { "id": "c", "text": "Creating hyperlinks", "isCorrect": false }
    ],
    "explanation": "Media queries allow styles to adapt to screen size and device features.",
    "interview_tip": "Start with mobile-first approach.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "css-media-queries"
  },
  {
    "id": 3058,
    "title": "CSS Transition",
    "category": "CSS",
    "difficulty": "Intermediate",
    "question": "What does the transition property control in CSS?",
    "options": [
      {
        "id": "a",
        "text": "Animation speed and property changes",
        "isCorrect": true
      },
      { "id": "b", "text": "Color contrast", "isCorrect": false },
      { "id": "c", "text": "Media queries", "isCorrect": false }
    ],
    "explanation": "transition enables smooth changes for properties over time.",
    "interview_tip": "Common for hover effects.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "css-transition"
  },
  {
    "id": 3059,
    "title": "CSS Vendor Prefixes",
    "category": "CSS",
    "difficulty": "Intermediate",
    "question": "Which is a vendor prefix for Mozilla browsers?",
    "options": [
      { "id": "a", "text": "-moz-", "isCorrect": true },
      { "id": "b", "text": "-webkit-", "isCorrect": false },
      { "id": "c", "text": "-ms-", "isCorrect": false }
    ],
    "explanation": "-moz- is for Mozilla (Firefox) properties.",
    "interview_tip": "Test your CSS on multiple browsers for compatibility.",
    "references": [],
    "timeLimit": 30,
    "points": 2,
    "slug": "css-vendor-prefix-moz"
  },
  {
    "id": 3060,
    "title": "Semantic Main Tag",
    "category": "HTML",
    "difficulty": "Advanced",
    "question": "Which tag defines the main content of a document, unique on a web page?",
    "options": [
      { "id": "a", "text": "<main>", "isCorrect": true },
      { "id": "b", "text": "<section>", "isCorrect": false },
      { "id": "c", "text": "<div>", "isCorrect": false }
    ],
    "explanation": "<main> marks the document's unique primary content.",
    "interview_tip": "There should only be one <main> per page.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "html-main-advanced"
  },
  {
    "id": 3061,
    "title": "Semantic Accessibility",
    "category": "HTML",
    "difficulty": "Advanced",
    "question": "Which HTML element is most appropriate for navigation menus?",
    "options": [
      { "id": "a", "text": "<nav>", "isCorrect": true },
      { "id": "b", "text": "<aside>", "isCorrect": false },
      { "id": "c", "text": "<footer>", "isCorrect": false }
    ],
    "explanation": "<nav> is for navigation blocks like menus or links.",
    "interview_tip": "Use with ARIA roles for complex navigation.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "html-nav-element"
  },
  {
    "id": 3062,
    "title": "HTML Picture Element",
    "category": "HTML",
    "difficulty": "Advanced",
    "question": "Which element is used for responsive images in HTML?",
    "options": [
      { "id": "a", "text": "<picture>", "isCorrect": true },
      { "id": "b", "text": "<img>", "isCorrect": false },
      { "id": "c", "text": "<canvas>", "isCorrect": false }
    ],
    "explanation": "<picture> allows serving different images for devices/screen sizes.",
    "interview_tip": "Use <source> inside <picture> for flexibility.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "html-picture-responsive"
  },
  {
    "id": 3063,
    "title": "HTML ARIA Labels",
    "category": "HTML",
    "difficulty": "Advanced",
    "question": "What is the purpose of ARIA roles in HTML?",
    "options": [
      {
        "id": "a",
        "text": "Improve accessibility for assistive technologies",
        "isCorrect": true
      },
      { "id": "b", "text": "Add animation", "isCorrect": false },
      { "id": "c", "text": "Style elements", "isCorrect": false }
    ],
    "explanation": "ARIA roles describe elements to screen readers.",
    "interview_tip": "Not all elements need ARIA; use semantically first.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "html-aria-roles"
  },
  {
    "id": 3064,
    "title": "Canvas Drawing",
    "category": "HTML",
    "difficulty": "Advanced",
    "question": "Which tag provides a bitmap drawing area in HTML5?",
    "options": [
      { "id": "a", "text": "<canvas>", "isCorrect": true },
      { "id": "b", "text": "<svg>", "isCorrect": false },
      { "id": "c", "text": "<picture>", "isCorrect": false }
    ],
    "explanation": "<canvas> renders graphics via JavaScript.",
    "interview_tip": "SVG is vector, canvas is pixel-based.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "html-canvas"
  },
  {
    "id": 3065,
    "title": "HTML Custom Elements",
    "category": "HTML",
    "difficulty": "Advanced",
    "question": "Which HTML5 API is used to define new custom elements?",
    "options": [
      { "id": "a", "text": "Custom Elements API", "isCorrect": true },
      { "id": "b", "text": "Web Storage API", "isCorrect": false },
      { "id": "c", "text": "Service Workers API", "isCorrect": false }
    ],
    "explanation": "Custom Elements API extends HTML with user-defined tags.",
    "interview_tip": "Part of Web Components technology.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "html-custom-elements"
  },
  {
    "id": 3066,
    "title": "HTML Local Storage",
    "category": "HTML",
    "difficulty": "Advanced",
    "question": "Which object is used to store data on the client side that persists after page reloads?",
    "options": [
      { "id": "a", "text": "localStorage", "isCorrect": true },
      { "id": "b", "text": "sessionStorage", "isCorrect": false },
      { "id": "c", "text": "cookies", "isCorrect": false }
    ],
    "explanation": "localStorage keeps key-value pairs until explicitly cleared.",
    "interview_tip": "sessionStorage only lives for the session.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "html-localstorage"
  },
  {
    "id": 3067,
    "title": "HTML Drag and Drop",
    "category": "HTML",
    "difficulty": "Advanced",
    "question": "Which HTML5 API enables drag-and-drop functionality?",
    "options": [
      { "id": "a", "text": "Drag and Drop API", "isCorrect": true },
      { "id": "b", "text": "Clipboard API", "isCorrect": false },
      { "id": "c", "text": "Push API", "isCorrect": false }
    ],
    "explanation": "Drag and Drop API provides methods to handle drag-and-drop actions.",
    "interview_tip": "Requires event handling in JavaScript.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "html-drag-drop"
  },
  {
    "id": 3068,
    "title": "HTML Microdata",
    "category": "HTML",
    "difficulty": "Advanced",
    "question": "What is the purpose of microdata attributes like itemscope and itemprop?",
    "options": [
      {
        "id": "a",
        "text": "Annotate content for search engines",
        "isCorrect": true
      },
      { "id": "b", "text": "Style content", "isCorrect": false },
      { "id": "c", "text": "Validate forms", "isCorrect": false }
    ],
    "explanation": "Microdata enhances SEO and semantic meaning for machines.",
    "interview_tip": "Used for rich search results.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "html-microdata"
  },
  {
    "id": 3069,
    "title": "HTML <template> Element",
    "category": "HTML",
    "difficulty": "Advanced",
    "question": "What is the purpose of the <template> element in HTML?",
    "options": [
      {
        "id": "a",
        "text": "Holds content not rendered at page load",
        "isCorrect": true
      },
      { "id": "b", "text": "Defines a CSS grid", "isCorrect": false },
      { "id": "c", "text": "Creates responsive images", "isCorrect": false }
    ],
    "explanation": "<template> stores fragments for later JavaScript rendering.",
    "interview_tip": "Useful for dynamic client-side rendering.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "html-template"
  },
  {
    "id": 3070,
    "title": "CSS Grid Layout",
    "category": "CSS",
    "difficulty": "Advanced",
    "question": "Which property enables CSS Grid Layout on a container?",
    "options": [
      { "id": "a", "text": "display: grid;", "isCorrect": true },
      { "id": "b", "text": "display: flex;", "isCorrect": false },
      { "id": "c", "text": "grid-template:", "isCorrect": false }
    ],
    "explanation": "display: grid gives a container grid layout features.",
    "interview_tip": "Combine with grid-template-rows and columns.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "css-grid-layout"
  },
  {
    "id": 3071,
    "title": "CSS Grid Placement",
    "category": "CSS",
    "difficulty": "Advanced",
    "question": "How do you explicitly place items in a CSS grid?",
    "options": [
      { "id": "a", "text": "grid-row and grid-column", "isCorrect": true },
      {
        "id": "b",
        "text": "flex-direction and justify-content",
        "isCorrect": false
      },
      { "id": "c", "text": "box-align and box-pack", "isCorrect": false }
    ],
    "explanation": "grid-row and grid-column assign cells for grid children.",
    "interview_tip": "Use line numbers or named areas for placement.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "css-grid-placement"
  },
  {
    "id": 3072,
    "title": "CSS Variables",
    "category": "CSS",
    "difficulty": "Advanced",
    "question": "How are CSS custom properties defined and used?",
    "options": [
      {
        "id": "a",
        "text": "With --var-name and var(--var-name)",
        "isCorrect": true
      },
      { "id": "b", "text": "$var-name and use($var-name)", "isCorrect": false },
      { "id": "c", "text": "Using @var-name", "isCorrect": false }
    ],
    "explanation": "CSS variables start with '--' and are accessed with var().",
    "interview_tip": "Good for consistent themes and reusability.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "css-variables"
  },
  {
    "id": 3073,
    "title": "CSS calc() Function",
    "category": "CSS",
    "difficulty": "Advanced",
    "question": "What is the purpose of calc() in CSS?",
    "options": [
      {
        "id": "a",
        "text": "Performs calculations for CSS values",
        "isCorrect": true
      },
      { "id": "b", "text": "Sets variable names", "isCorrect": false },
      { "id": "c", "text": "Creates gradients", "isCorrect": false }
    ],
    "explanation": "calc() lets you mix units and do CSS math.",
    "interview_tip": "Spaces are required around +, -, * and /.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "css-calc-function"
  },
  {
    "id": 3074,
    "title": "CSS ::before Pseudo-element",
    "category": "CSS",
    "difficulty": "Advanced",
    "question": "What does the ::before pseudo-element do?",
    "options": [
      {
        "id": "a",
        "text": "Inserts content before element's content",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Selects the first child element",
        "isCorrect": false
      },
      { "id": "c", "text": "Makes the element bold", "isCorrect": false }
    ],
    "explanation": "::before adds generated content before an element.",
    "interview_tip": "Use with content property; great for icons or design.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "css-before"
  },
  {
    "id": 3075,
    "title": "CSS Specificity",
    "category": "CSS",
    "difficulty": "Advanced",
    "question": "Which selector has the highest specificity?",
    "options": [
      { "id": "a", "text": "#header", "isCorrect": true },
      { "id": "b", "text": ".header", "isCorrect": false },
      { "id": "c", "text": "header", "isCorrect": false }
    ],
    "explanation": "ID selectors outrank class and element selectors in specificity.",
    "interview_tip": "Avoid excessive use of ID selectors for maintainability.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "css-specificity"
  },
  {
    "id": 3076,
    "title": "CSS Animation Keyframes",
    "category": "CSS",
    "difficulty": "Advanced",
    "question": "How are keyframes defined in CSS for animations?",
    "options": [
      { "id": "a", "text": "@keyframes", "isCorrect": true },
      { "id": "b", "text": "animation-frames", "isCorrect": false },
      { "id": "c", "text": "keyframe()", "isCorrect": false }
    ],
    "explanation": "@keyframes block maps out style changes over time.",
    "interview_tip": "Combine with animation-name and animation-duration.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "css-animation-keyframes"
  },
  {
    "id": 3077,
    "title": "CSS Transform",
    "category": "CSS",
    "difficulty": "Advanced",
    "question": "Which property is used to rotate or scale elements?",
    "options": [
      { "id": "a", "text": "transform", "isCorrect": true },
      { "id": "b", "text": "transition", "isCorrect": false },
      { "id": "c", "text": "position", "isCorrect": false }
    ],
    "explanation": "transform allows rotation, scaling, skewing, and translating elements.",
    "interview_tip": "Great for hover effects and animations.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "css-transform"
  },
  {
    "id": 3078,
    "title": "CSS Filter",
    "category": "CSS",
    "difficulty": "Advanced",
    "question": "What does the CSS filter property do?",
    "options": [
      {
        "id": "a",
        "text": "Applies visual effects like blur or grayscale",
        "isCorrect": true
      },
      { "id": "b", "text": "Creates image sprites", "isCorrect": false },
      { "id": "c", "text": "Renders SVG graphics", "isCorrect": false }
    ],
    "explanation": "filter enables effects, e.g., filter: blur(4px) or grayscale(100%).",
    "interview_tip": "Use filters for subtle design touches.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "css-filter"
  },
  {
    "id": 3079,
    "title": "CSS Clip-path",
    "category": "CSS",
    "difficulty": "Advanced",
    "question": "Which CSS property creates non-rectangular shapes by clipping an element?",
    "options": [
      { "id": "a", "text": "clip-path", "isCorrect": true },
      { "id": "b", "text": "border-radius", "isCorrect": false },
      { "id": "c", "text": "mask", "isCorrect": false }
    ],
    "explanation": "clip-path restricts the visible portion of an element to a shape.",
    "interview_tip": "Common shapes: circle, polygon, ellipse.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "css-clip-path"
  },
  {
    "id": 3080,
    "title": "CSS Responsive Units",
    "category": "CSS",
    "difficulty": "Advanced",
    "question": "What is the 'vw' unit in CSS based on?",
    "options": [
      { "id": "a", "text": "Viewport width", "isCorrect": true },
      { "id": "b", "text": "Vertical width", "isCorrect": false },
      { "id": "c", "text": "View width of parent", "isCorrect": false }
    ],
    "explanation": "1vw = 1% of the viewport width.",
    "interview_tip": "Great for responsive typography and layouts.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "css-vw"
  },
  {
    "id": 3081,
    "title": "CSS Aspect Ratio",
    "category": "CSS",
    "difficulty": "Advanced",
    "question": "Which CSS property maintains an element's width-to-height relationship?",
    "options": [
      { "id": "a", "text": "aspect-ratio", "isCorrect": true },
      { "id": "b", "text": "ratio", "isCorrect": false },
      { "id": "c", "text": "scale", "isCorrect": false }
    ],
    "explanation": "aspect-ratio locks width:height for responsive boxes.",
    "interview_tip": "No JS necessary for aspect-ratio since CSS 2021.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "css-aspect-ratio"
  },
  {
    "id": 3082,
    "title": "CSS Scroll Snap",
    "category": "CSS",
    "difficulty": "Advanced",
    "question": "Which feature makes scrolling stop at set positions?",
    "options": [
      { "id": "a", "text": "scroll-snap-type", "isCorrect": true },
      { "id": "b", "text": "snap-align", "isCorrect": false },
      { "id": "c", "text": "scroll-to-fit", "isCorrect": false }
    ],
    "explanation": "scroll-snap-type provides smooth, predictable scrolling.",
    "interview_tip": "Use with scroll-snap-align for children.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "css-scroll-snap"
  },
  {
    "id": 3083,
    "title": "CSS Container Queries",
    "category": "CSS",
    "difficulty": "Advanced",
    "question": "What do container queries allow that media queries do not?",
    "options": [
      {
        "id": "a",
        "text": "Style based on parent element size",
        "isCorrect": true
      },
      { "id": "b", "text": "Target print output", "isCorrect": false },
      {
        "id": "c",
        "text": "Style based on device orientation",
        "isCorrect": false
      }
    ],
    "explanation": "Container queries let you adapt components to their parent's size.",
    "interview_tip": "Supported in latest browsers; perfect for component-based design.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "css-container-queries"
  },
  {
    "id": 3084,
    "title": "CSS Logical Properties",
    "category": "CSS",
    "difficulty": "Advanced",
    "question": "Which is an example of a logical property in CSS?",
    "options": [
      { "id": "a", "text": "margin-inline-start", "isCorrect": true },
      { "id": "b", "text": "margin-left", "isCorrect": false },
      { "id": "c", "text": "padding-bottom", "isCorrect": false }
    ],
    "explanation": "margin-inline-start respects language direction for global layouts.",
    "interview_tip": "Good for multilingual websites.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "css-logical-properties"
  },
  {
    "id": 3085,
    "title": "CSS custom @media Features",
    "category": "CSS",
    "difficulty": "Advanced",
    "question": "Which media feature detects dark or light UI themes?",
    "options": [
      { "id": "a", "text": "prefers-color-scheme", "isCorrect": true },
      { "id": "b", "text": "color-gamut", "isCorrect": false },
      { "id": "c", "text": "device-aspect-ratio", "isCorrect": false }
    ],
    "explanation": "prefers-color-scheme adapts UI to user's OS theme preference.",
    "interview_tip": "Use to provide dark mode out of the box.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "css-prefers-color-scheme"
  },
  {
    "id": 3086,
    "title": "CSS :not() Pseudo-class",
    "category": "CSS",
    "difficulty": "Advanced",
    "question": "What does :not(.disabled) select?",
    "options": [
      {
        "id": "a",
        "text": "Elements without class 'disabled'",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Elements with class 'disabled'",
        "isCorrect": false
      },
      { "id": "c", "text": "Children of .disabled", "isCorrect": false }
    ],
    "explanation": ":not() excludes the specified selector.",
    "interview_tip": "Combine with other selectors for complex logic.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "css-not-pseudo"
  },
  {
    "id": 3087,
    "title": "CSS Isolation",
    "category": "CSS",
    "difficulty": "Advanced",
    "question": "What does the 'isolation: isolate;' property do?",
    "options": [
      {
        "id": "a",
        "text": "Creates a new stacking context",
        "isCorrect": true
      },
      { "id": "b", "text": "Clears floated elements", "isCorrect": false },
      { "id": "c", "text": "Prevents inheritance of color", "isCorrect": false }
    ],
    "explanation": "isolation isolates child stacking context, useful for layers.",
    "interview_tip": "Good for complex UI components.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "css-isolation"
  },
  {
    "id": 3088,
    "title": "CSS Backdrop-filter",
    "category": "CSS",
    "difficulty": "Advanced",
    "question": "Which CSS property applies a blur effect behind an element?",
    "options": [
      { "id": "a", "text": "backdrop-filter", "isCorrect": true },
      { "id": "b", "text": "behind-filter", "isCorrect": false },
      { "id": "c", "text": "background-blur", "isCorrect": false }
    ],
    "explanation": "backdrop-filter modifies background content behind semi-transparent elements.",
    "interview_tip": "Requires transparency for visible effect.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "css-backdrop-filter"
  },
  {
    "id": 3089,
    "title": "CSS Scrollbar Styling",
    "category": "CSS",
    "difficulty": "Advanced",
    "question": "Which pseudo-element customizes the appearance of scrollbars in webkit browsers?",
    "options": [
      { "id": "a", "text": "::-webkit-scrollbar", "isCorrect": true },
      { "id": "b", "text": "::scrollbar", "isCorrect": false },
      { "id": "c", "text": "::-scrollbar-track", "isCorrect": false }
    ],
    "explanation": "::-webkit-scrollbar targets and styles the browser's scrollbar.",
    "interview_tip": "Supported mainly in Chrome, Safari, Edge.",
    "references": [],
    "timeLimit": 30,
    "points": 3,
    "slug": "css-webkit-scrollbar"
  },
  {
    "id": 4000,
    "title": "JSX Syntax Basics",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "Which of the following is valid JSX syntax?",
    "options": [
      { "id": "a", "text": "<div>Hello World</div>", "isCorrect": true },
      { "id": "b", "text": "<div>Hello World>", "isCorrect": false },
      { "id": "c", "text": "div{Hello World}", "isCorrect": false }
    ],
    "explanation": "JSX requires correct opening and closing tags, similar to HTML.",
    "interview_tip": "Always wrap multiple JSX elements in a parent container or React.Fragment.",
    "references": ["https://reactjs.org/docs/introducing-jsx.html"],
    "timeLimit": 30,
    "points": 1,
    "slug": "jsx-syntax-basics"
  },
  {
    "id": 4001,
    "title": "React Component Declaration",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "Which of the following is the correct way to define a functional React component?",
    "options": [
      {
        "id": "a",
        "text": "function Welcome() { return <h1>Hello</h1>; }",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "class Welcome = () => <h1>Hello</h1>;",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "component Welcome() { return 'Hello'; }",
        "isCorrect": false
      }
    ],
    "explanation": "Functional components are simple functions returning JSX.",
    "interview_tip": "Since React 16.8, functional components are preferred with hooks.",
    "references": ["https://reactjs.org/docs/components-and-props.html"],
    "timeLimit": 30,
    "points": 1,
    "slug": "functional-component-declaration"
  },
  {
    "id": 4002,
    "title": "React Props Usage",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "How do you pass data from a parent to a child component in React?",
    "options": [
      { "id": "a", "text": "Using props", "isCorrect": true },
      { "id": "b", "text": "Using state", "isCorrect": false },
      { "id": "c", "text": "Using localStorage", "isCorrect": false }
    ],
    "explanation": "Props are used to pass immutable data from parent to child.",
    "interview_tip": "Props enable component reusability and data flow top-down.",
    "references": ["https://reactjs.org/docs/components-and-props.html"],
    "timeLimit": 30,
    "points": 1,
    "slug": "react-props-usage"
  },
  {
    "id": 4003,
    "title": "React State Basics",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "Where should you store data that changes over time in a React component?",
    "options": [
      { "id": "a", "text": "In state", "isCorrect": true },
      { "id": "b", "text": "In props", "isCorrect": false },
      { "id": "c", "text": "In external files", "isCorrect": false }
    ],
    "explanation": "State holds data that can change and affect the UI.",
    "interview_tip": "Use the useState hook in functional components for state management.",
    "references": ["https://reactjs.org/docs/state-and-lifecycle.html"],
    "timeLimit": 30,
    "points": 1,
    "slug": "react-state-basics"
  },
  {
    "id": 4004,
    "title": "React Rendering Lists",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "What special prop should you provide when rendering a list of elements in React?",
    "options": [
      { "id": "a", "text": "key", "isCorrect": true },
      { "id": "b", "text": "id", "isCorrect": false },
      { "id": "c", "text": "ref", "isCorrect": false }
    ],
    "explanation": "Keys help React identify items uniquely for efficient re-rendering.",
    "interview_tip": "Keys should be unique and stable, ideally not using array indexes.",
    "references": ["https://reactjs.org/docs/lists-and-keys.html"],
    "timeLimit": 30,
    "points": 1,
    "slug": "react-rendering-lists"
  },
  {
    "id": 4005,
    "title": "React Synthetic Events",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "How does React handle events such as clicks?",
    "options": [
      { "id": "a", "text": "Using Synthetic Events", "isCorrect": true },
      {
        "id": "b",
        "text": "Using native browser events directly",
        "isCorrect": false
      },
      { "id": "c", "text": "Using XMLHttpRequest", "isCorrect": false }
    ],
    "explanation": "React wraps native events into Synthetic Events for cross-browser compatibility.",
    "interview_tip": "Synthetic Events pool for performance — event properties become nullified asynchronously.",
    "references": ["https://reactjs.org/docs/events.html"],
    "timeLimit": 30,
    "points": 1,
    "slug": "react-synthetic-events"
  },
  {
    "id": 4006,
    "title": "React Component Lifecycle",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "Which lifecycle method is called when a component is first added to the DOM (in class components)?",
    "options": [
      { "id": "a", "text": "componentDidMount", "isCorrect": true },
      { "id": "b", "text": "componentWillUnmount", "isCorrect": false },
      { "id": "c", "text": "getSnapshotBeforeUpdate", "isCorrect": false }
    ],
    "explanation": "componentDidMount runs after the component is mounted.",
    "interview_tip": "Use it for initializing network requests or timers.",
    "references": [
      "https://reactjs.org/docs/react-component.html#componentdidmount"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "react-lifecycle-componentdidmount"
  },
  {
    "id": 4007,
    "title": "Redux Store Purpose",
    "category": "Redux",
    "difficulty": "Beginner",
    "question": "What is the main purpose of the Redux store?",
    "options": [
      { "id": "a", "text": "Holds the entire app state", "isCorrect": true },
      { "id": "b", "text": "Generates reducers", "isCorrect": false },
      { "id": "c", "text": "Manages API calls", "isCorrect": false }
    ],
    "explanation": "The store holds the global state and enables access and dispatching actions.",
    "interview_tip": "The store should be a single source of truth.",
    "references": ["https://redux.js.org/api/store"],
    "timeLimit": 30,
    "points": 1,
    "slug": "redux-store-purpose"
  },
  {
    "id": 4008,
    "title": "Redux Actions",
    "category": "Redux",
    "difficulty": "Beginner",
    "question": "What is a Redux action?",
    "options": [
      {
        "id": "a",
        "text": "A plain object describing a state change",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "A function that modifies the state",
        "isCorrect": false
      },
      { "id": "c", "text": "A database query", "isCorrect": false }
    ],
    "explanation": "Actions are objects with a type property that describe what happened.",
    "interview_tip": "Actions do not directly modify the state.",
    "references": ["https://redux.js.org/basics/actions"],
    "timeLimit": 30,
    "points": 1,
    "slug": "redux-actions"
  },
  {
    "id": 4009,
    "title": "Redux Reducers",
    "category": "Redux",
    "difficulty": "Beginner",
    "question": "What is the role of a reducer in a Redux application?",
    "options": [
      {
        "id": "a",
        "text": "To compute the new state based on action and previous state",
        "isCorrect": true
      },
      { "id": "b", "text": "To dispatch actions", "isCorrect": false },
      { "id": "c", "text": "To hold the middleware logic", "isCorrect": false }
    ],
    "explanation": "Reducers are pure functions that take current state and action, return new state.",
    "interview_tip": "Reducers must be pure and not mutate the state.",
    "references": ["https://redux.js.org/basics/reducers"],
    "timeLimit": 30,
    "points": 1,
    "slug": "redux-reducers"
  },
  {
    "id": 4010,
    "title": "Redux Dispatch Function",
    "category": "Redux",
    "difficulty": "Beginner",
    "question": "What does the dispatch function do in Redux?",
    "options": [
      {
        "id": "a",
        "text": "Sends an action to the store to update the state",
        "isCorrect": true
      },
      { "id": "b", "text": "Stores the state", "isCorrect": false },
      { "id": "c", "text": "Creates reducers", "isCorrect": false }
    ],
    "explanation": "Dispatch triggers state transitions by sending actions to reducers.",
    "interview_tip": "Use dispatch to indicate user or system events.",
    "references": ["https://redux.js.org/api/store#dispatchaction"],
    "timeLimit": 30,
    "points": 1,
    "slug": "redux-dispatch"
  },
  {
    "id": 4011,
    "title": "Connecting React and Redux",
    "category": "Redux",
    "difficulty": "Beginner",
    "question": "Which function connects a React component to the Redux store?",
    "options": [
      { "id": "a", "text": "connect()", "isCorrect": true },
      { "id": "b", "text": "store()", "isCorrect": false },
      { "id": "c", "text": "mapStateToProps()", "isCorrect": false }
    ],
    "explanation": "connect() allows React components to access state and dispatch via props.",
    "interview_tip": "It comes from 'react-redux' package.",
    "references": ["https://react-redux.js.org/api/connect"],
    "timeLimit": 30,
    "points": 1,
    "slug": "react-redux-connect"
  },
  {
    "id": 4012,
    "title": "React useState Hook",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "What does the useState hook return?",
    "options": [
      {
        "id": "a",
        "text": "An array with current state and function to update it",
        "isCorrect": true
      },
      { "id": "b", "text": "A Promise", "isCorrect": false },
      { "id": "c", "text": "A class instance", "isCorrect": false }
    ],
    "explanation": "useState provides the current state value and a setter function.",
    "interview_tip": "Destructure both returned values using array destructuring syntax.",
    "references": ["https://reactjs.org/docs/hooks-state.html"],
    "timeLimit": 30,
    "points": 1,
    "slug": "react-usestate"
  },
  {
    "id": 4013,
    "title": "React Props Are Immutable",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "Which statement about React props is correct?",
    "options": [
      {
        "id": "a",
        "text": "Props are read-only and should not be modified inside a component",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Props can be changed in the child component",
        "isCorrect": false
      },
      { "id": "c", "text": "Props and state are the same", "isCorrect": false }
    ],
    "explanation": "Props are immutable data passed from parent to children.",
    "interview_tip": "Use state to hold mutable data instead.",
    "references": [
      "https://reactjs.org/docs/components-and-props.html#props-are-read-only"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "react-props-immutable"
  },
  {
    "id": 4014,
    "title": "React Fragments",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "What is the purpose of React Fragments?",
    "options": [
      {
        "id": "a",
        "text": "To group multiple elements without adding extra nodes to the DOM",
        "isCorrect": true
      },
      { "id": "b", "text": "To style components directly", "isCorrect": false },
      { "id": "c", "text": "To handle errors", "isCorrect": false }
    ],
    "explanation": "Fragments let you return multiple children without markup wrapper elements.",
    "interview_tip": "Use <>...</> shorthand or <React.Fragment>.",
    "references": ["https://reactjs.org/docs/fragments.html"],
    "timeLimit": 30,
    "points": 1,
    "slug": "react-fragments"
  },
  {
    "id": 4015,
    "title": "React Keys in Lists",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "Why should keys be unique among siblings when rendering lists in React?",
    "options": [
      {
        "id": "a",
        "text": "To help React identify which items have changed for efficient updates",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "To use them as HTML element ids",
        "isCorrect": false
      },
      { "id": "c", "text": "To format the list order", "isCorrect": false }
    ],
    "explanation": "Unique keys enable reconciliation and prevent unnecessary re-renders.",
    "interview_tip": "Avoid using array indexes as keys if list order may change.",
    "references": ["https://reactjs.org/docs/lists-and-keys.html#keys"],
    "timeLimit": 30,
    "points": 1,
    "slug": "react-keys-uniqueness"
  },
  {
    "id": 4016,
    "title": "React useEffect Hook Basic",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "When does a useEffect hook run by default?",
    "options": [
      { "id": "a", "text": "After every render", "isCorrect": true },
      { "id": "b", "text": "Only once at mount", "isCorrect": false },
      { "id": "c", "text": "Before render", "isCorrect": false }
    ],
    "explanation": "Without dependencies, useEffect runs after each completed render.",
    "interview_tip": "Specify dependency array to control execution frequency.",
    "references": ["https://reactjs.org/docs/hooks-effect.html"],
    "timeLimit": 30,
    "points": 1,
    "slug": "react-useeffect-basic"
  },
  {
    "id": 4017,
    "title": "Redux combineReducers",
    "category": "Redux",
    "difficulty": "Beginner",
    "question": "What is the purpose of combineReducers in Redux?",
    "options": [
      {
        "id": "a",
        "text": "To combine multiple reducers into one root reducer",
        "isCorrect": true
      },
      { "id": "b", "text": "To dispatch multiple actions", "isCorrect": false },
      { "id": "c", "text": "To merge multiple stores", "isCorrect": false }
    ],
    "explanation": "combineReducers helps split state management into modular reducers.",
    "interview_tip": "Each reducer manages its slice of state.",
    "references": ["https://redux.js.org/api/combinereducers"],
    "timeLimit": 30,
    "points": 1,
    "slug": "redux-combineReducers"
  },
  {
    "id": 4018,
    "title": "Redux Provider Component",
    "category": "Redux",
    "difficulty": "Beginner",
    "question": "What is the role of the <Provider> component in a React-Redux app?",
    "options": [
      {
        "id": "a",
        "text": "Makes the Redux store available to all nested components",
        "isCorrect": true
      },
      { "id": "b", "text": "Creates the Redux store", "isCorrect": false },
      {
        "id": "c",
        "text": "Dispatches actions to the store",
        "isCorrect": false
      }
    ],
    "explanation": "<Provider> wraps the app and passes store via context.",
    "interview_tip": "Must wrap your app’s root component to use react-redux hooks or connect.",
    "references": ["https://react-redux.js.org/api/provider"],
    "timeLimit": 30,
    "points": 1,
    "slug": "redux-provider"
  },
  {
    "id": 4020,
    "title": "React useEffect Dependencies",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "How do you make useEffect run only once after the initial render?",
    "options": [
      {
        "id": "a",
        "text": "Provide an empty dependency array []",
        "isCorrect": true
      },
      { "id": "b", "text": "Omit all dependencies", "isCorrect": false },
      { "id": "c", "text": "Set a boolean flag", "isCorrect": false }
    ],
    "explanation": "An empty array as the second argument ensures useEffect runs once.",
    "interview_tip": "Dependencies control when effects re-run.",
    "references": [
      "https://reactjs.org/docs/hooks-effect.html#tip-optimizing-performance-by-skipping-effects"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "react-useeffect-once"
  },
  {
    "id": 4021,
    "title": "React useRef Purpose",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is the primary use of the useRef hook in React?",
    "options": [
      {
        "id": "a",
        "text": "Access DOM nodes or persist values across renders",
        "isCorrect": true
      },
      { "id": "b", "text": "Store stateful values", "isCorrect": false },
      { "id": "c", "text": "Trigger re-renders", "isCorrect": false }
    ],
    "explanation": "useRef returns a mutable ref object whose .current persists between renders.",
    "interview_tip": "Changing ref doesn’t cause re-render.",
    "references": ["https://reactjs.org/docs/hooks-reference.html#useref"],
    "timeLimit": 30,
    "points": 2,
    "slug": "react-useref"
  },
  {
    "id": 4022,
    "title": "React Context API Use",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What problem does the Context API solve in React?",
    "options": [
      {
        "id": "a",
        "text": "Prop drilling between deeply nested components",
        "isCorrect": true
      },
      { "id": "b", "text": "Avoiding useState", "isCorrect": false },
      { "id": "c", "text": "Managing global variables", "isCorrect": false }
    ],
    "explanation": "Context API provides a way to share values across the component tree without explicit props.",
    "interview_tip": "Use for global data like themes, auth, language.",
    "references": ["https://reactjs.org/docs/context.html"],
    "timeLimit": 30,
    "points": 2,
    "slug": "react-context-problem"
  },
  {
    "id": 4023,
    "title": "React Controlled Components",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "In a controlled component, where is the form data stored?",
    "options": [
      { "id": "a", "text": "In React component state", "isCorrect": true },
      { "id": "b", "text": "In the DOM elements", "isCorrect": false },
      { "id": "c", "text": "In localStorage", "isCorrect": false }
    ],
    "explanation": "Controlled components use state to manage input values.",
    "interview_tip": "Value and onChange are required for controlled inputs.",
    "references": ["https://reactjs.org/docs/forms.html"],
    "timeLimit": 30,
    "points": 2,
    "slug": "react-controlled-component"
  },
  {
    "id": 4024,
    "title": "React PropTypes Purpose",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What does PropTypes provide for React components?",
    "options": [
      { "id": "a", "text": "Runtime validation of props", "isCorrect": true },
      { "id": "b", "text": "Compilation-time validation", "isCorrect": false },
      { "id": "c", "text": "Styling utility", "isCorrect": false }
    ],
    "explanation": "PropTypes help catch bugs by checking types of props at runtime.",
    "interview_tip": "Does not affect production bundle by default.",
    "references": ["https://reactjs.org/docs/typechecking-with-proptypes.html"],
    "timeLimit": 30,
    "points": 2,
    "slug": "react-proptypes"
  },
  {
    "id": 4025,
    "title": "React Memoization",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is the purpose of React.memo?",
    "options": [
      {
        "id": "a",
        "text": "To prevent unnecessary re-rendering of components",
        "isCorrect": true
      },
      { "id": "b", "text": "To memoize local variables", "isCorrect": false },
      { "id": "c", "text": "To memoize hooks", "isCorrect": false }
    ],
    "explanation": "React.memo shallowly compares props and skips re-render if unchanged.",
    "interview_tip": "Best for 'pure' functional components.",
    "references": ["https://reactjs.org/docs/react-api.html#reactmemo"],
    "timeLimit": 30,
    "points": 2,
    "slug": "react-memo"
  },
  {
    "id": 4026,
    "title": "React useCallback Hook",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Why would you use the useCallback hook in React?",
    "options": [
      {
        "id": "a",
        "text": "To memoize callback functions for dependencies",
        "isCorrect": true
      },
      { "id": "b", "text": "To manage component state", "isCorrect": false },
      { "id": "c", "text": "To memoize computed values", "isCorrect": false }
    ],
    "explanation": "useCallback returns a memoized callback unless dependencies change.",
    "interview_tip": "Useful when passing callbacks to memoized children.",
    "references": ["https://reactjs.org/docs/hooks-reference.html#usecallback"],
    "timeLimit": 30,
    "points": 2,
    "slug": "react-usecallback"
  },
  {
    "id": 4027,
    "title": "Redux Action Creators",
    "category": "Redux",
    "difficulty": "Intermediate",
    "question": "What is an action creator in Redux?",
    "options": [
      {
        "id": "a",
        "text": "A function that returns an action object",
        "isCorrect": true
      },
      { "id": "b", "text": "A reducer function", "isCorrect": false },
      { "id": "c", "text": "A middleware", "isCorrect": false }
    ],
    "explanation": "Actions creators are functions that encapsulate action creation logic.",
    "interview_tip": "Promotes reuse and testing of dispatched actions.",
    "references": ["https://redux.js.org/basics/actions#action-creators"],
    "timeLimit": 30,
    "points": 2,
    "slug": "redux-action-creator"
  },
  {
    "id": 4028,
    "title": "Redux Middleware",
    "category": "Redux",
    "difficulty": "Intermediate",
    "question": "What is the main purpose of middleware in Redux?",
    "options": [
      {
        "id": "a",
        "text": "Intercept and act on actions before reaching reducers",
        "isCorrect": true
      },
      { "id": "b", "text": "Combine reducers", "isCorrect": false },
      { "id": "c", "text": "Initialize the Redux store", "isCorrect": false }
    ],
    "explanation": "Middleware add custom logic to the dispatching of actions.",
    "interview_tip": "Thunk and Logger are common middlewares.",
    "references": [
      "https://redux.js.org/understanding/history-and-design/middleware"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "redux-middleware"
  },
  {
    "id": 4029,
    "title": "Redux State Shape",
    "category": "Redux",
    "difficulty": "Intermediate",
    "question": "How should Redux global state be structured?",
    "options": [
      {
        "id": "a",
        "text": "As a single plain JavaScript object",
        "isCorrect": true
      },
      { "id": "b", "text": "As an array", "isCorrect": false },
      { "id": "c", "text": "As multiple stores", "isCorrect": false }
    ],
    "explanation": "State is always a single JS object tree, never multiple stores.",
    "interview_tip": "Each key in the root object may be managed by a different reducer.",
    "references": [
      "https://redux.js.org/usage/structuring-reducers/normalizing-state-shape"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "redux-state-shape"
  },
  {
    "id": 4030,
    "title": "React Children Prop",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What does the special prop 'children' in React represent?",
    "options": [
      {
        "id": "a",
        "text": "The child elements/nodes enclosed between component tags",
        "isCorrect": true
      },
      { "id": "b", "text": "Child component state", "isCorrect": false },
      { "id": "c", "text": "Global app state", "isCorrect": false }
    ],
    "explanation": "children lets you nest elements between component's opening and closing tag.",
    "interview_tip": "children is implicit, no need to declare in parent.",
    "references": ["https://reactjs.org/docs/composition-vs-inheritance.html"],
    "timeLimit": 30,
    "points": 2,
    "slug": "react-children-prop"
  },
  {
    "id": 4031,
    "title": "React Conditional Rendering",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "How do you conditionally render elements in React?",
    "options": [
      {
        "id": "a",
        "text": "Using JavaScript logical or ternary operators",
        "isCorrect": true
      },
      { "id": "b", "text": "Using CSS", "isCorrect": false },
      { "id": "c", "text": "Using HTML attributes", "isCorrect": false }
    ],
    "explanation": "React allows conditionals within JSX via JS logical expressions.",
    "interview_tip": "Use && or ternary ? : for inline decisions.",
    "references": ["https://reactjs.org/docs/conditional-rendering.html"],
    "timeLimit": 30,
    "points": 2,
    "slug": "react-conditional-rendering"
  },
  {
    "id": 4032,
    "title": "Redux mapStateToProps",
    "category": "Redux",
    "difficulty": "Intermediate",
    "question": "What is the primary use of the mapStateToProps function in Redux?",
    "options": [
      {
        "id": "a",
        "text": "Select pieces of state to pass as props to a component",
        "isCorrect": true
      },
      { "id": "b", "text": "Map action creators", "isCorrect": false },
      { "id": "c", "text": "Create new stores", "isCorrect": false }
    ],
    "explanation": "It selects needed state and passes it to the component as props.",
    "interview_tip": "Use selectors to keep it efficient and reusable.",
    "references": [
      "https://react-redux.js.org/using-react-redux/connect-mapstate"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "redux-mapstatetoprops"
  },
  {
    "id": 4033,
    "title": "Redux mapDispatchToProps",
    "category": "Redux",
    "difficulty": "Intermediate",
    "question": "Which function in React-Redux is used for binding action creators to props?",
    "options": [
      { "id": "a", "text": "mapDispatchToProps", "isCorrect": true },
      { "id": "b", "text": "connect()", "isCorrect": false },
      { "id": "c", "text": "useSelector", "isCorrect": false }
    ],
    "explanation": "mapDispatchToProps binds dispatch to props for triggering actions.",
    "interview_tip": "You can pass mapDispatchToProps as the second argument to connect.",
    "references": [
      "https://react-redux.js.org/using-react-redux/connect-mapdispatch"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "redux-mapdispatchtoprops"
  },
  {
    "id": 4034,
    "title": "React useContext Hook",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What does the useContext hook allow in React?",
    "options": [
      {
        "id": "a",
        "text": "Consuming a context's value in functional components",
        "isCorrect": true
      },
      { "id": "b", "text": "Subscribe to Redux store", "isCorrect": false },
      { "id": "c", "text": "Navigate between pages", "isCorrect": false }
    ],
    "explanation": "useContext reads and subscribes to context changes.",
    "interview_tip": "Only works with React Contexts, not Redux directly.",
    "references": ["https://reactjs.org/docs/hooks-reference.html#usecontext"],
    "timeLimit": 30,
    "points": 2,
    "slug": "react-usecontext"
  },
  {
    "id": 4035,
    "title": "React PureComponent",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is the main benefit of extending React.PureComponent?",
    "options": [
      {
        "id": "a",
        "text": "Automatic shallow prop and state comparison for shouldComponentUpdate",
        "isCorrect": true
      },
      { "id": "b", "text": "Provides state immutability", "isCorrect": false },
      { "id": "c", "text": "Memoizes all functions", "isCorrect": false }
    ],
    "explanation": "Prevents unnecessary re-renders via shallow comparison.",
    "interview_tip": "Use when props/state are simple/immutable.",
    "references": [
      "https://reactjs.org/docs/react-api.html#reactpurecomponent"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "react-pure-component"
  },
  {
    "id": 4036,
    "title": "Redux Selectors",
    "category": "Redux",
    "difficulty": "Intermediate",
    "question": "Why use selectors in Redux?",
    "options": [
      {
        "id": "a",
        "text": "To encapsulate state selection logic and enable memoization",
        "isCorrect": true
      },
      { "id": "b", "text": "To bind actions to props", "isCorrect": false },
      {
        "id": "c",
        "text": "To register reducers dynamically",
        "isCorrect": false
      }
    ],
    "explanation": "Selectors improve performance and code maintainability.",
    "interview_tip": "Consider using Reselect for derived data.",
    "references": ["https://redux.js.org/usage/deriving-data-selectors"],
    "timeLimit": 30,
    "points": 2,
    "slug": "redux-selectors"
  },
  {
    "id": 4037,
    "title": "Redux Thunk Middleware",
    "category": "Redux",
    "difficulty": "Intermediate",
    "question": "What does Redux Thunk middleware let you do?",
    "options": [
      {
        "id": "a",
        "text": "Dispatch functions for async logic",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Synchronously dispatch actions",
        "isCorrect": false
      },
      { "id": "c", "text": "Combine reducers", "isCorrect": false }
    ],
    "explanation": "Thunk middleware handles async operations in Redux via action creators.",
    "interview_tip": "Without thunks, actions must be plain objects.",
    "references": ["https://github.com/reduxjs/redux-thunk"],
    "timeLimit": 30,
    "points": 2,
    "slug": "redux-thunk"
  },
  {
    "id": 4038,
    "title": "React Default Props",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "How do you set default prop values for a React function component?",
    "options": [
      {
        "id": "a",
        "text": "By using default parameter values in function arguments",
        "isCorrect": true
      },
      { "id": "b", "text": "Using state", "isCorrect": false },
      {
        "id": "c",
        "text": "By assigning to this.defaultProps",
        "isCorrect": false
      }
    ],
    "explanation": "Default parameters in destructuring provide defaults for missing props.",
    "interview_tip": "Class components may use static defaultProps.",
    "references": [
      "https://reactjs.org/docs/components-and-props.html#default-props"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "react-default-props"
  },
  {
    "id": 4039,
    "title": "React Strict Mode",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What does React.StrictMode do?",
    "options": [
      {
        "id": "a",
        "text": "Highlights potential problems in application during development",
        "isCorrect": true
      },
      { "id": "b", "text": "Enforces stricter bundling", "isCorrect": false },
      { "id": "c", "text": "Disables old browser support", "isCorrect": false }
    ],
    "explanation": "StrictMode checks for unsafe life cycles and side effects.",
    "interview_tip": "Has no effect in production builds.",
    "references": ["https://reactjs.org/docs/strict-mode.html"],
    "timeLimit": 30,
    "points": 2,
    "slug": "react-strictmode"
  },
  {
    "id": 4040,
    "title": "React useMemo Hook",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is the main use of the useMemo hook in React?",
    "options": [
      {
        "id": "a",
        "text": "Memoize the result of expensive computations",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Memoize callbacks between renders",
        "isCorrect": false
      },
      { "id": "c", "text": "Trigger side-effects", "isCorrect": false }
    ],
    "explanation": "useMemo caches computed return values unless dependencies change, improving performance for costly calculations.",
    "interview_tip": "useMemo should not be overused; only use for performance bottlenecks.",
    "references": ["https://reactjs.org/docs/hooks-reference.html#usememo"],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-usememo"
  },
  {
    "id": 4041,
    "title": "React Lazy Loading",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Which React API supports code-splitting by loading components lazily?",
    "options": [
      { "id": "a", "text": "React.lazy", "isCorrect": true },
      { "id": "b", "text": "React.memo", "isCorrect": false },
      { "id": "c", "text": "React.Fragment", "isCorrect": false }
    ],
    "explanation": "React.lazy allows dynamic import() of components for code-splitting and on-demand loading.",
    "interview_tip": "Wrap lazy-loaded components with <Suspense>.",
    "references": ["https://reactjs.org/docs/code-splitting.html#reactlazy"],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-lazy-suspense"
  },
  {
    "id": 4042,
    "title": "React Error Boundaries",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is a React error boundary?",
    "options": [
      {
        "id": "a",
        "text": "A component that catches JavaScript errors in its child components",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "A component that prevents side-effects",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "A component that delays rendering",
        "isCorrect": false
      }
    ],
    "explanation": "Error boundaries catch errors during rendering, in lifecycle methods and constructors of their tree.",
    "interview_tip": "Error boundaries must be class components.",
    "references": ["https://reactjs.org/docs/error-boundaries.html"],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-error-boundary"
  },
  {
    "id": 4043,
    "title": "React useReducer Hook",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is the useReducer hook best suited for?",
    "options": [
      {
        "id": "a",
        "text": "Complex state logic with multiple sub-values",
        "isCorrect": true
      },
      { "id": "b", "text": "Simple counter state", "isCorrect": false },
      { "id": "c", "text": "Static configuration", "isCorrect": false }
    ],
    "explanation": "useReducer works well for complex or interdependent state updates.",
    "interview_tip": "Pattern is similar to Redux reducers at component scope.",
    "references": ["https://reactjs.org/docs/hooks-reference.html#usereducer"],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-usereducer"
  },
  {
    "id": 4044,
    "title": "React Forwarding Refs",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is the main benefit of using React.forwardRef?",
    "options": [
      {
        "id": "a",
        "text": "Pass refs through a component to a DOM node",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Create higher-order components",
        "isCorrect": false
      },
      { "id": "c", "text": "Memoize variables", "isCorrect": false }
    ],
    "explanation": "forwardRef lets a component expose a ref to its child for direct manipulation.",
    "interview_tip": "Common for reusable UI libraries and input wrappers.",
    "references": ["https://reactjs.org/docs/forwarding-refs.html"],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-forwardref"
  },
  {
    "id": 4045,
    "title": "React Portals",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is the primary use of React portals?",
    "options": [
      {
        "id": "a",
        "text": "Render children into a DOM node outside the component's hierarchy",
        "isCorrect": true
      },
      { "id": "b", "text": "Create scoped styles", "isCorrect": false },
      { "id": "c", "text": "Add global state", "isCorrect": false }
    ],
    "explanation": "Portals let you render children into a different part of the DOM.",
    "interview_tip": "Portals are useful for modals, tooltips, overlays.",
    "references": ["https://reactjs.org/docs/portals.html"],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-portal"
  },
  {
    "id": 4046,
    "title": "Higher-Order Components (HOC)",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is a Higher-Order Component (HOC) in React?",
    "options": [
      {
        "id": "a",
        "text": "A function that takes a component and returns an enhanced component",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "A class-based wrapper around hooks",
        "isCorrect": false
      },
      { "id": "c", "text": "A React Context", "isCorrect": false }
    ],
    "explanation": "HOCs add cross-cutting behavior by wrapping components.",
    "interview_tip": "Be careful of prop collisions and refs with HOCs.",
    "references": ["https://reactjs.org/docs/higher-order-components.html"],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-hoc"
  },
  {
    "id": 4047,
    "title": "React Context Performance",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is a potential pitfall of using Context API for frequently changing values?",
    "options": [
      {
        "id": "a",
        "text": "All consumers re-render on value change",
        "isCorrect": true
      },
      { "id": "b", "text": "Provider cannot update value", "isCorrect": false },
      { "id": "c", "text": "React prevents any re-render", "isCorrect": false }
    ],
    "explanation": "Any change to context value forces all consumers to re-render.",
    "interview_tip": "Split contexts or memoize values to avoid excessive renders.",
    "references": [
      "https://reactjs.org/docs/context.html#optimizing-performance"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-context-performance"
  },
  {
    "id": 4048,
    "title": "Redux Middleware Signature",
    "category": "Redux",
    "difficulty": "Advanced",
    "question": "A Redux middleware has access to which of the following?",
    "options": [
      {
        "id": "a",
        "text": "dispatch, getState, next, and action objects",
        "isCorrect": true
      },
      { "id": "b", "text": "Reducer functions only", "isCorrect": false },
      { "id": "c", "text": "Only the store state", "isCorrect": false }
    ],
    "explanation": "Middleware is a function with ({dispatch, getState}) => next => action signature.",
    "interview_tip": "Can intercept actions and dispatch additional ones.",
    "references": [
      "https://redux.js.org/understanding/history-and-design/middleware"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "redux-middleware-signature"
  },
  {
    "id": 4049,
    "title": "Redux Store Enhancers",
    "category": "Redux",
    "difficulty": "Advanced",
    "question": "What is a store enhancer in Redux?",
    "options": [
      {
        "id": "a",
        "text": "A higher-order function that adds capabilities to the store",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "A function for combining reducers",
        "isCorrect": false
      },
      { "id": "c", "text": "A middleware function", "isCorrect": false }
    ],
    "explanation": "Enhancers wrap createStore and can enhance store methods or add new ones.",
    "interview_tip": "applyMiddleware is itself a store enhancer.",
    "references": ["https://redux.js.org/api/store#store-enhancers"],
    "timeLimit": 30,
    "points": 3,
    "slug": "redux-store-enhancer"
  },
  {
    "id": 4050,
    "title": "Redux DevTools",
    "category": "Redux",
    "difficulty": "Advanced",
    "question": "How do you enable Redux DevTools in your app for state debugging?",
    "options": [
      {
        "id": "a",
        "text": "Compose store enhancers with window.__REDUX_DEVTOOLS_EXTENSION__",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Add devtools as Redux middleware",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Dispatch an action to activate devtools",
        "isCorrect": false
      }
    ],
    "explanation": "Redux DevTools are enabled by composing with the special browser extension enhancer.",
    "interview_tip": "Keep DevTools out of production bundles.",
    "references": ["https://github.com/zalmoxisus/redux-devtools-extension"],
    "timeLimit": 30,
    "points": 3,
    "slug": "redux-devtools"
  },
  {
    "id": 4051,
    "title": "React Custom Hooks",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is a custom React hook?",
    "options": [
      {
        "id": "a",
        "text": "A function using built-in hooks to share logic",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "A hook with different built-in behavior",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "A way to create new lifecycle methods",
        "isCorrect": false
      }
    ],
    "explanation": "Custom hooks let you extract and reuse component logic as functions.",
    "interview_tip": "Name must start with 'use'.",
    "references": ["https://reactjs.org/docs/hooks-custom.html"],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-custom-hook"
  },
  {
    "id": 4052,
    "title": "React Concurrent Mode",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is the purpose of React's Concurrent Mode?",
    "options": [
      {
        "id": "a",
        "text": "To allow React to interrupt and prioritize rendering for better user experience",
        "isCorrect": true
      },
      { "id": "b", "text": "To use multiple CPU cores", "isCorrect": false },
      {
        "id": "c",
        "text": "To handle server-side rendering",
        "isCorrect": false
      }
    ],
    "explanation": "Concurrent Mode helps React keep the UI responsive by interrupting low-priority updates.",
    "interview_tip": "Still experimental; use with caution.",
    "references": ["https://react.dev/reference/react/ConcurrentMode"],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-concurrent-mode"
  },
  {
    "id": 4053,
    "title": "React Code Splitting Benefit",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is the benefit of using code splitting in React?",
    "options": [
      {
        "id": "a",
        "text": "Reduce initial bundle size for faster load times",
        "isCorrect": true
      },
      { "id": "b", "text": "Improve code readability", "isCorrect": false },
      { "id": "c", "text": "Reduce memory usage", "isCorrect": false }
    ],
    "explanation": "Code splitting ensures only necessary code is loaded, speeding up the app.",
    "interview_tip": "Use React.lazy and Suspense for route-based or component-based splitting.",
    "references": ["https://reactjs.org/docs/code-splitting.html"],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-code-splitting"
  },
  {
    "id": 4054,
    "title": "Redux Reselect Library",
    "category": "Redux",
    "difficulty": "Advanced",
    "question": "Why use the reselect library with Redux selectors?",
    "options": [
      {
        "id": "a",
        "text": "To memoize derived data and avoid unnecessary recalculations",
        "isCorrect": true
      },
      { "id": "b", "text": "To dispatch actions", "isCorrect": false },
      { "id": "c", "text": "To combine reducers", "isCorrect": false }
    ],
    "explanation": "Reselect memoizes selector outputs to optimize performance.",
    "interview_tip": "Helps avoid expensive computations on each state change.",
    "references": ["https://github.com/reduxjs/reselect"],
    "timeLimit": 30,
    "points": 3,
    "slug": "redux-reselect"
  },
  {
    "id": 4055,
    "title": "React Suspense Fallback",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "In React, what is a Suspense fallback used for?",
    "options": [
      {
        "id": "a",
        "text": "A component or message to display while waiting for lazy-loaded resources",
        "isCorrect": true
      },
      { "id": "b", "text": "Error boundary fallback", "isCorrect": false },
      { "id": "c", "text": "Placeholder for missing props", "isCorrect": false }
    ],
    "explanation": "The fallback prop in Suspense provides a UI while loading lazy imports.",
    "interview_tip": "Can be a spinner, skeleton, or any React element.",
    "references": ["https://reactjs.org/docs/code-splitting.html#suspense"],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-suspense-fallback"
  },
  {
    "id": 4056,
    "title": "React SSR",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What does SSR stand for in the React ecosystem?",
    "options": [
      { "id": "a", "text": "Server-Side Rendering", "isCorrect": true },
      { "id": "b", "text": "Single State Reducer", "isCorrect": false },
      { "id": "c", "text": "Super Suspense Renderer", "isCorrect": false }
    ],
    "explanation": "SSR renders React components to HTML on the server before sending to client.",
    "interview_tip": "Common with frameworks like Next.js.",
    "references": ["https://react.dev/reference/react-dom/hydrate"],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-ssr"
  },
  {
    "id": 4057,
    "title": "Redux Immutable State",
    "category": "Redux",
    "difficulty": "Advanced",
    "question": "Why must Redux state be treated as immutable?",
    "options": [
      {
        "id": "a",
        "text": "To enable predictable state updates and time travel debugging",
        "isCorrect": true
      },
      { "id": "b", "text": "Performance optimizations", "isCorrect": false },
      {
        "id": "c",
        "text": "Because reducers require side effects",
        "isCorrect": false
      }
    ],
    "explanation": "Immutability is key for undo/redo, change detection, and debugging.",
    "interview_tip": "Never mutate objects or arrays directly in reducers.",
    "references": [
      "https://redux.js.org/tutorials/fundamentals/part-3-state-actions-reducers"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "redux-immutable-state"
  },
  {
    "id": 4058,
    "title": "React Profiler",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What does the React Profiler tool allow you to do?",
    "options": [
      {
        "id": "a",
        "text": "Measure performance and rendering times of React components",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Check for security vulnerabilities",
        "isCorrect": false
      },
      { "id": "c", "text": "Auto-memoize all components", "isCorrect": false }
    ],
    "explanation": "Profiler helps detect unnecessary re-renders and bottlenecks in component trees.",
    "interview_tip": "Profiling is available in React DevTools browser extension.",
    "references": ["https://reactjs.org/docs/profiler.html"],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-profiler"
  },
  {
    "id": 4059,
    "title": "React Concurrent Features Scheduling",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Which React feature allows updates to be paused, interrupted, or abandoned before completion?",
    "options": [
      {
        "id": "a",
        "text": "Concurrent rendering/scheduling",
        "isCorrect": true
      },
      { "id": "b", "text": "React.lazy", "isCorrect": false },
      { "id": "c", "text": "React.Fragment", "isCorrect": false }
    ],
    "explanation": "Concurrent rendering enables React to make rendering interruptible for pending user interactions.",
    "interview_tip": "Lands in newer React versions for improved UX.",
    "references": [
      "https://react.dev/learn/synchronizing-with-effects#making-effects-respond-to-interactions"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-concurrent-render"
  },
  {
    "id": 4060,
    "title": "React Suspense Data Fetching",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is an experimental use case of React Suspense in modern applications?",
    "options": [
      {
        "id": "a",
        "text": "Integrating data fetching with component rendering",
        "isCorrect": true
      },
      { "id": "b", "text": "Improving bundle size", "isCorrect": false },
      { "id": "c", "text": "CSS-in-JS", "isCorrect": false }
    ],
    "explanation": "React Suspense can coordinate rendering with async data fetching in modern data frameworks.",
    "interview_tip": "React Suspense for data is still considered unstable/APIs are experimental.",
    "references": ["https://react.dev/reference/react/Suspense"],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-suspense-data"
  },
  {
    "id": 4061,
    "title": "React StrictMode Duplicate Effects",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "In development, how does React.StrictMode help identify side-effect issues?",
    "options": [
      {
        "id": "a",
        "text": "By intentionally double-invoking some lifecycle methods and effects",
        "isCorrect": true
      },
      { "id": "b", "text": "By skipping effect cleanup", "isCorrect": false },
      { "id": "c", "text": "By blocking state updates", "isCorrect": false }
    ],
    "explanation": "StrictMode mounts components twice to reveal side effects and cleanup issues in dev.",
    "interview_tip": "This does NOT happen in production.",
    "references": ["https://react.dev/reference/react/StrictMode"],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-strictmode-double"
  },
  {
    "id": 4062,
    "title": "React useLayoutEffect",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is the key difference between useEffect and useLayoutEffect?",
    "options": [
      {
        "id": "a",
        "text": "useLayoutEffect fires synchronously after DOM mutation, before paint",
        "isCorrect": true
      },
      { "id": "b", "text": "useEffect blocks rendering", "isCorrect": false },
      {
        "id": "c",
        "text": "Only useEffect can access the DOM",
        "isCorrect": false
      }
    ],
    "explanation": "useLayoutEffect runs after all DOM updates, but before the browser repaints.",
    "interview_tip": "useLayoutEffect is useful for measurements and animations.",
    "references": ["https://react.dev/reference/react/useLayoutEffect"],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-uselayouteffect"
  },
  {
    "id": 4063,
    "title": "React Controlled vs Uncontrolled Components",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "How do controlled and uncontrolled components differ in React?",
    "options": [
      {
        "id": "a",
        "text": "Controlled components sync form values with React state",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Uncontrolled components always use Redux",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Controlled components can't use useRef",
        "isCorrect": false
      }
    ],
    "explanation": "In controlled components, the value is bound to React state.",
    "interview_tip": "Uncontrolled components manage their value via DOM references.",
    "references": [
      "https://react.dev/learn/sharing-state-between-components#controlled-and-uncontrolled-components"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-controlled-vs-uncontrolled"
  },
  {
    "id": 4064,
    "title": "React Context Value Memoization",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "How can you prevent unnecessary re-renders for consumers of a React Context?",
    "options": [
      {
        "id": "a",
        "text": "Memoize the context value passed to the provider",
        "isCorrect": true
      },
      { "id": "b", "text": "Avoid using Context", "isCorrect": false },
      { "id": "c", "text": "Never use hooks", "isCorrect": false }
    ],
    "explanation": "Memoizing values ensures context only updates when its value truly changes.",
    "interview_tip": "Wrap context value objects in useMemo.",
    "references": [
      "https://react.dev/reference/react/useContext#optimizing-re-renders-when-passing-objects-and-arrays-as-context-values"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-context-memo"
  },
  {
    "id": 4065,
    "title": "React useImperativeHandle",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is useImperativeHandle used for in React?",
    "options": [
      {
        "id": "a",
        "text": "Customizing instance values exposed to parent refs",
        "isCorrect": true
      },
      { "id": "b", "text": "Managing state", "isCorrect": false },
      { "id": "c", "text": "Memoizing values", "isCorrect": false }
    ],
    "explanation": "useImperativeHandle lets you expose custom functions to parent refs.",
    "interview_tip": "Use only with forwardRef.",
    "references": ["https://react.dev/reference/react/useImperativeHandle"],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-useimperativehandle"
  },
  {
    "id": 4066,
    "title": "Redux Middleware Chaining",
    "category": "Redux",
    "difficulty": "Advanced",
    "question": "How are multiple middlewares combined in Redux?",
    "options": [
      {
        "id": "a",
        "text": "Using applyMiddleware(), which chains them in order",
        "isCorrect": true
      },
      { "id": "b", "text": "By putting them in reducers", "isCorrect": false },
      { "id": "c", "text": "With combineReducers", "isCorrect": false }
    ],
    "explanation": "applyMiddleware applies middlewares, each given access to dispatch, getState, next, and action.",
    "interview_tip": "Order matters for chained middleware.",
    "references": ["https://redux.js.org/api/applymiddleware"],
    "timeLimit": 30,
    "points": 3,
    "slug": "redux-applymiddleware"
  },
  {
    "id": 4067,
    "title": "Redux Store Subscription",
    "category": "Redux",
    "difficulty": "Advanced",
    "question": "How does a React component know about Redux store state changes?",
    "options": [
      {
        "id": "a",
        "text": "It subscribes via react-redux hooks or connect()",
        "isCorrect": true
      },
      { "id": "b", "text": "It polls using setInterval", "isCorrect": false },
      {
        "id": "c",
        "text": "It manually queries localStorage",
        "isCorrect": false
      }
    ],
    "explanation": "react-redux hooks like useSelector keep components updated with store signals.",
    "interview_tip": "Directly subscribing in large apps can be tricky—use library abstractions.",
    "references": ["https://react-redux.js.org/api/hooks"],
    "timeLimit": 30,
    "points": 3,
    "slug": "redux-store-subs"
  },
  {
    "id": 4068,
    "title": "Redux Middleware Async Logic",
    "category": "Redux",
    "difficulty": "Advanced",
    "question": "Which problem does middleware like redux-saga or redux-thunk solve?",
    "options": [
      {
        "id": "a",
        "text": "Handling asynchronous side-effects",
        "isCorrect": true
      },
      { "id": "b", "text": "Combining reducers", "isCorrect": false },
      { "id": "c", "text": "Serializing state", "isCorrect": false }
    ],
    "explanation": "Middlewares like thunk and saga allow dispatching functions or running side-effects in action flow.",
    "interview_tip": "Choose saga for complex workflows, thunk for simple async.",
    "references": ["https://redux.js.org/usage/writing-logic-thunks"],
    "timeLimit": 30,
    "points": 3,
    "slug": "redux-thunk-vs-saga"
  },
  {
    "id": 4069,
    "title": "Redux Normalized State",
    "category": "Redux",
    "difficulty": "Advanced",
    "question": "Why normalize Redux state?",
    "options": [
      {
        "id": "a",
        "text": "To avoid data duplication and make updates efficient",
        "isCorrect": true
      },
      { "id": "b", "text": "To save on reducer code", "isCorrect": false },
      { "id": "c", "text": "It's required by Redux", "isCorrect": false }
    ],
    "explanation": "Normalized state enables fast updates by storing entities by ID.",
    "interview_tip": "Use libraries like normalizr for large datasets.",
    "references": [
      "https://redux.js.org/usage/structuring-reducers/normalizing-state-shape"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "redux-normalized"
  },
  {
    "id": 4070,
    "title": "React Hook Rules",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Which is a rule for using React Hooks?",
    "options": [
      {
        "id": "a",
        "text": "Always call hooks at the top level of React functions",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Call hooks in nested callbacks",
        "isCorrect": false
      },
      { "id": "c", "text": "Use hooks in class components", "isCorrect": false }
    ],
    "explanation": "Hooks must be called consistently, never conditionally or in loops.",
    "interview_tip": "Use react-hooks ESLint plugin for enforcement.",
    "references": ["https://react.dev/reference/rules/rules-of-hooks"],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-hooks-rules"
  },
  {
    "id": 4071,
    "title": "Redux State Hydration",
    "category": "Redux",
    "difficulty": "Advanced",
    "question": "What is hydration in Redux (and SSR)?",
    "options": [
      {
        "id": "a",
        "text": "Merging server-rendered state into client store at startup",
        "isCorrect": true
      },
      { "id": "b", "text": "Combining reducers", "isCorrect": false },
      { "id": "c", "text": "Adding store enhancers", "isCorrect": false }
    ],
    "explanation": "Hydration ensures initial app UI and store state matches after SSR.",
    "interview_tip": "Essential for seamless server-to-client transition.",
    "references": ["https://redux.js.org/usage/server-rendering"],
    "timeLimit": 30,
    "points": 3,
    "slug": "redux-hydration"
  },
  {
    "id": 4072,
    "title": "Redux Selectors with Reselect",
    "category": "Redux",
    "difficulty": "Advanced",
    "question": "What’s an advantage of using Reselect selectors over plain ones?",
    "options": [
      {
        "id": "a",
        "text": "Selectors are memoized, avoiding redundant recalculation",
        "isCorrect": true
      },
      { "id": "b", "text": "Selectors mutate state", "isCorrect": false },
      { "id": "c", "text": "They allow dispatch", "isCorrect": false }
    ],
    "explanation": "Memoized selectors avoid expensive recomputation of derived values.",
    "interview_tip": "Reselect selectors are composable.",
    "references": [
      "https://github.com/reduxjs/reselect#motivation-for-memoized-selectors"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "redux-reselect-advantages"
  },
  {
    "id": 4073,
    "title": "React Suspense List",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What does React's experimental SuspenseList component do?",
    "options": [
      {
        "id": "a",
        "text": "Coordinates the order in which multiple Suspense components reveal their content",
        "isCorrect": true
      },
      { "id": "b", "text": "Lists all pending fetches", "isCorrect": false },
      {
        "id": "c",
        "text": "Displays fallbacks only for lists",
        "isCorrect": false
      }
    ],
    "explanation": "SuspenseList lets you control reveal order UX when loading several resources.",
    "interview_tip": "SuspenseList is not yet stable as of mid-2024.",
    "references": ["https://react.dev/reference/react/SuspenseList"],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-suspense-list"
  },
  {
    "id": 4074,
    "title": "React Server Components",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What are React Server Components?",
    "options": [
      {
        "id": "a",
        "text": "Components rendered and streamed from the server, not shipped to browser JavaScript",
        "isCorrect": true
      },
      { "id": "b", "text": "SSR hydration shell", "isCorrect": false },
      { "id": "c", "text": "Webpack chunked components", "isCorrect": false }
    ],
    "explanation": "Server Components render on the server and never increase client JS bundle size.",
    "interview_tip": "Available in Next.js 13+ as /app/ route feature.",
    "references": ["https://react.dev/reference/react-server-components"],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-server-components"
  },
  {
    "id": 4075,
    "title": "Redux Toolkit Purpose",
    "category": "Redux",
    "difficulty": "Advanced",
    "question": "What is the primary aim of Redux Toolkit?",
    "options": [
      {
        "id": "a",
        "text": "Simplify Redux code and promote best practices",
        "isCorrect": true
      },
      { "id": "b", "text": "Replace react-redux", "isCorrect": false },
      { "id": "c", "text": "Remove all boilerplate", "isCorrect": false }
    ],
    "explanation": "Redux Toolkit offers opinionated APIs for reducers, immutability, async, and more.",
    "interview_tip": "@reduxjs/toolkit is now the recommended standard way to write Redux apps.",
    "references": ["https://redux-toolkit.js.org/introduction/getting-started"],
    "timeLimit": 30,
    "points": 3,
    "slug": "redux-toolkit-purpose"
  },
  {
    "id": 4076,
    "title": "Redux createSlice",
    "category": "Redux",
    "difficulty": "Advanced",
    "question": "What does createSlice do in Redux Toolkit?",
    "options": [
      {
        "id": "a",
        "text": "Generates reducers, action creators, and action types for a slice of state",
        "isCorrect": true
      },
      { "id": "b", "text": "Memoizes selectors", "isCorrect": false },
      { "id": "c", "text": "Combines middleware", "isCorrect": false }
    ],
    "explanation": "createSlice simplifies reducer logic with generated actions and types.",
    "interview_tip": "Action creators are attached as methods on the slice object.",
    "references": ["https://redux-toolkit.js.org/api/createSlice"],
    "timeLimit": 30,
    "points": 3,
    "slug": "redux-createslice"
  },
  {
    "id": 4077,
    "title": "React Profiler API",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "How can you programmatically measure rendering time of a component subtree in React?",
    "options": [
      {
        "id": "a",
        "text": "With the <Profiler> component and an onRender callback",
        "isCorrect": true
      },
      { "id": "b", "text": "Using Error Boundaries", "isCorrect": false },
      { "id": "c", "text": "Using SuspenseList", "isCorrect": false }
    ],
    "explanation": "React.Profiler triggers onRender for timing and render details.",
    "interview_tip": "Often used for performance optimization.",
    "references": ["https://react.dev/reference/react/Profiler"],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-profiler-component"
  },
  {
    "id": 4078,
    "title": "Redux Immer Integration",
    "category": "Redux",
    "difficulty": "Advanced",
    "question": "How does Redux Toolkit use Immer by default?",
    "options": [
      {
        "id": "a",
        "text": "Allows you to write 'mutating' code that produces immutable state updates",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Disables mutability in reducers",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Requires manual spread operations in states",
        "isCorrect": false
      }
    ],
    "explanation": "With Immer, you can write code as if you mutate state, but Immer produces a new immutable state behind the scenes.",
    "interview_tip": "Makes writing reducers easier and less error-prone.",
    "references": ["https://redux-toolkit.js.org/usage/immer-reducers"],
    "timeLimit": 30,
    "points": 3,
    "slug": "redux-toolkit-immer"
  },
  {
    "id": 4079,
    "title": "React useTransition Hook",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is the benefit of the useTransition hook in React?",
    "options": [
      {
        "id": "a",
        "text": "Mark state updates as non-urgent and allow React to interrupt or defer them",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Batch rerenders for concurrent events",
        "isCorrect": false
      },
      { "id": "c", "text": "Control useEffect timing", "isCorrect": false }
    ],
    "explanation": "useTransition enables building UIs that stay responsive during expensive updates.",
    "interview_tip": "Available in React 18+. Useful for transitions triggered by user actions.",
    "references": ["https://react.dev/reference/react/useTransition"],
    "timeLimit": 30,
    "points": 3,
    "slug": "react-usetransition"
  },

  {
    "id": 5000,
    "title": "Next.js File-Based Routing",
    "category": "Next.js",
    "difficulty": "Beginner",
    "question": "How does Next.js create routes in a project?",
    "options": [
      {
        "id": "a",
        "text": "Based on file structure inside the 'pages' directory",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Using a routes.js configuration file",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "By listing paths in package.json",
        "isCorrect": false
      }
    ],
    "explanation": "Every file inside the 'pages' directory automatically becomes a route in Next.js.",
    "interview_tip": "Dynamic routes use bracket notation: [id].js.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/routing"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "nextjs-file-routing"
  },
  {
    "id": 5001,
    "title": "Default Export Component Requirement",
    "category": "Next.js",
    "difficulty": "Beginner",
    "question": "What is required in every file under the 'pages' directory in Next.js?",
    "options": [
      {
        "id": "a",
        "text": "A default exported React component",
        "isCorrect": true
      },
      { "id": "b", "text": "A named export called 'Page'", "isCorrect": false },
      { "id": "c", "text": "No exports are needed", "isCorrect": false }
    ],
    "explanation": "Each page must export a default React component as the page content.",
    "interview_tip": "Named exports in pages are ignored for rendering.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/routing/pages-and-layouts"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "nextjs-default-export"
  },
  {
    "id": 5002,
    "title": "Link Navigation",
    "category": "Next.js",
    "difficulty": "Beginner",
    "question": "What component should be used for client-side navigation between pages in Next.js?",
    "options": [
      { "id": "a", "text": "<Link>", "isCorrect": true },
      { "id": "b", "text": "<a>", "isCorrect": false },
      { "id": "c", "text": "<Navigate>", "isCorrect": false }
    ],
    "explanation": "The Next.js <Link> component enables prefetching and client-side navigation.",
    "interview_tip": "Don't forget to nest an <a> inside <Link> for correct semantics in Next 12 and earlier.",
    "references": [
      "https://nextjs.org/docs/pages/api-reference/components/link"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "nextjs-link-component"
  },
  {
    "id": 5003,
    "title": "API Routes",
    "category": "Next.js",
    "difficulty": "Beginner",
    "question": "Where are API routes defined in a Next.js project?",
    "options": [
      { "id": "a", "text": "In 'pages/api/' directory", "isCorrect": true },
      { "id": "b", "text": "In server.js", "isCorrect": false },
      { "id": "c", "text": "Under 'src/routes/api'", "isCorrect": false }
    ],
    "explanation": "Any JS file in 'pages/api' becomes an endpoint (e.g., /api/hello).",
    "interview_tip": "Use API routes for backend logic within the same project.",
    "references": ["https://nextjs.org/docs/pages/api-reference/api-routes"],
    "timeLimit": 30,
    "points": 1,
    "slug": "nextjs-api-routes"
  },
  {
    "id": 5004,
    "title": "Static and Dynamic Routing",
    "category": "Next.js",
    "difficulty": "Beginner",
    "question": "How do you define a dynamic route in Next.js (pages directory)?",
    "options": [
      {
        "id": "a",
        "text": "By naming a file with square brackets (e.g., [slug].js)",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "By using query parameters in filename",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Using a special dynamicRoutes.js file",
        "isCorrect": false
      }
    ],
    "explanation": "Files named with square brackets like [param].js become dynamic routes.",
    "interview_tip": "Multiple brackets for nested dynamic routes: [user]/[post].js.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/routing/dynamic-routes"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "nextjs-dynamic-routing"
  },
  {
    "id": 5005,
    "title": "Static Generation",
    "category": "Next.js",
    "difficulty": "Beginner",
    "question": "What is Static Generation (SSG) in Next.js?",
    "options": [
      { "id": "a", "text": "Generating HTML at build time", "isCorrect": true },
      {
        "id": "b",
        "text": "Generating HTML on every request",
        "isCorrect": false
      },
      { "id": "c", "text": "Generating HTML on the client", "isCorrect": false }
    ],
    "explanation": "SSG creates static HTML files for faster loads and SEO, at build time.",
    "interview_tip": "Use getStaticProps for SSG data fetching.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "nextjs-ssg"
  },
  {
    "id": 5006,
    "title": "getStaticProps Role",
    "category": "Next.js",
    "difficulty": "Beginner",
    "question": "What is the purpose of getStaticProps in a Next.js page?",
    "options": [
      {
        "id": "a",
        "text": "Fetches data at build time to pre-render a page",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Fetches data on the client only",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Updates state during a user event",
        "isCorrect": false
      }
    ],
    "explanation": "getStaticProps is used for build-time data fetching in static generation.",
    "interview_tip": "Runs only on the server during build, never in the browser.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "nextjs-getstaticprops"
  },
  {
    "id": 5007,
    "title": "Server-Side Rendering (SSR)",
    "category": "Next.js",
    "difficulty": "Beginner",
    "question": "Which method in Next.js enables server-side rendering for a page?",
    "options": [
      { "id": "a", "text": "getServerSideProps", "isCorrect": true },
      { "id": "b", "text": "getStaticProps", "isCorrect": false },
      { "id": "c", "text": "getInitialProps", "isCorrect": false }
    ],
    "explanation": "getServerSideProps runs on every request to fetch data and pre-render the page.",
    "interview_tip": "Use SSR for pages requiring up-to-date data.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-server-side-props"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "nextjs-getserversideprops"
  },
  {
    "id": 5008,
    "title": "Public Folder Assets",
    "category": "Next.js",
    "difficulty": "Beginner",
    "question": "Where should static assets (images, favicon, robots.txt) be placed for direct access in a Next.js app?",
    "options": [
      { "id": "a", "text": "public folder", "isCorrect": true },
      { "id": "b", "text": "static folder", "isCorrect": false },
      { "id": "c", "text": "assets folder", "isCorrect": false }
    ],
    "explanation": "All files in public/ are served at the root URL path.",
    "interview_tip": "Imports work for assets in /public, but not using import statements.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/optimizing/static-assets"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "nextjs-public-folder"
  },
  {
    "id": 5009,
    "title": "Image Optimization",
    "category": "Next.js",
    "difficulty": "Beginner",
    "question": "What is the purpose of the <Image> component in Next.js?",
    "options": [
      {
        "id": "a",
        "text": "Automatic image optimization and resizing",
        "isCorrect": true
      },
      { "id": "b", "text": "SVG sprite injection", "isCorrect": false },
      { "id": "c", "text": "Lazy loading videos", "isCorrect": false }
    ],
    "explanation": "<Image> optimizes images for size, format, and performance (lazy loading etc.).",
    "interview_tip": "Supports automatic WebP/AVIF serve if supported by the browser.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/optimizing/images"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "nextjs-image-component"
  },

  {
    "id": 5010,
    "title": "App Directory Structure",
    "category": "Next.js",
    "difficulty": "Beginner",
    "question": "In Next.js 13+, what is the primary purpose of the 'app' directory?",
    "options": [
      {
        "id": "a",
        "text": "Enables new layout and server components system",
        "isCorrect": true
      },
      { "id": "b", "text": "Holds only static files", "isCorrect": false },
      {
        "id": "c",
        "text": "Is required for all API routes",
        "isCorrect": false
      }
    ],
    "explanation": "The app directory enables enhanced routing, nested layouts, and React Server Components.",
    "interview_tip": "You can still use the 'pages' directory for legacy compatibility.",
    "references": [
      "https://nextjs.org/docs/app/building-your-application/routing"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "nextjs-app-directory"
  },
  {
    "id": 5011,
    "title": "Built-in CSS Support",
    "category": "Next.js",
    "difficulty": "Beginner",
    "question": "How does Next.js support importing CSS files?",
    "options": [
      {
        "id": "a",
        "text": "You can import CSS files directly into JavaScript/TypeScript source files",
        "isCorrect": true
      },
      { "id": "b", "text": "Only allows inline styles", "isCorrect": false },
      { "id": "c", "text": "You must use SASS only", "isCorrect": false }
    ],
    "explanation": "Next.js supports direct imports of global CSS and CSS Modules in components.",
    "interview_tip": "Use [name].module.css for CSS Modules.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/styling/css"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "nextjs-css-import"
  },
  {
    "id": 5012,
    "title": "API Route Format",
    "category": "Next.js",
    "difficulty": "Beginner",
    "question": "What does an exported function in an API route file receive as arguments?",
    "options": [
      { "id": "a", "text": "Request and Response objects", "isCorrect": true },
      { "id": "b", "text": "Props and state", "isCorrect": false },
      { "id": "c", "text": "A context object", "isCorrect": false }
    ],
    "explanation": "Handler functions get (req, res) just like Node/Express handlers.",
    "interview_tip": "Use req.query or req.body to access parameters and payload.",
    "references": [
      "https://nextjs.org/docs/pages/api-reference/api-routes/introduction"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "nextjs-api-handler-args"
  },
  {
    "id": 5013,
    "title": "Routing in App Directory",
    "category": "Next.js",
    "difficulty": "Beginner",
    "question": "How are routes defined in a Next.js 'app' directory?",
    "options": [
      {
        "id": "a",
        "text": "Using folders and a 'page.js' (or .tsx) file at each route level",
        "isCorrect": true
      },
      { "id": "b", "text": "A routes.json config", "isCorrect": false },
      { "id": "c", "text": "A dynamicRoutes file", "isCorrect": false }
    ],
    "explanation": "Each folder in 'app' with a file named page.js defines a route segment.",
    "interview_tip": "Nested folders create nested routes and layouts.",
    "references": [
      "https://nextjs.org/docs/app/building-your-application/routing"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "nextjs-app-routing"
  },
  {
    "id": 5014,
    "title": "Head Component",
    "category": "Next.js",
    "difficulty": "Beginner",
    "question": "How do you set the HTML <head> content for a page in Next.js?",
    "options": [
      {
        "id": "a",
        "text": "Using the <Head> component from 'next/head'",
        "isCorrect": true
      },
      { "id": "b", "text": "With <meta> in JSX directly", "isCorrect": false },
      { "id": "c", "text": "Only in public/index.html", "isCorrect": false }
    ],
    "explanation": "<Head> lets you add meta, title, and other head tags per page.",
    "interview_tip": "Place in any page or component to scope tags locally.",
    "references": [
      "https://nextjs.org/docs/pages/api-reference/components/head"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "nextjs-head-component"
  },
  {
    "id": 5015,
    "title": "Custom Document Purpose",
    "category": "Next.js",
    "difficulty": "Beginner",
    "question": "What is the purpose of '_document.js' in the pages directory?",
    "options": [
      {
        "id": "a",
        "text": "Customize and extend the root HTML document structure",
        "isCorrect": true
      },
      { "id": "b", "text": "Configure routing", "isCorrect": false },
      { "id": "c", "text": "Set default props", "isCorrect": false }
    ],
    "explanation": "_document.js controls the initial HTML, <html> and <body> tags, and can inject scripts.",
    "interview_tip": "It's only rendered on the server.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/routing/custom-document"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "nextjs-document"
  },
  {
    "id": 5016,
    "title": "Data Fetching in getStaticProps",
    "category": "Next.js",
    "difficulty": "Beginner",
    "question": "Which of the following is true about getStaticProps?",
    "options": [
      { "id": "a", "text": "Runs only during build time", "isCorrect": true },
      {
        "id": "b",
        "text": "Runs on every page load in the browser",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Allows mutation of client state",
        "isCorrect": false
      }
    ],
    "explanation": "getStaticProps is executed server-side during build for static generation.",
    "interview_tip": "Does not have access to browser APIs.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-props"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "nextjs-getstaticprops-build"
  },
  {
    "id": 5017,
    "title": "Environment Variables",
    "category": "Next.js",
    "difficulty": "Beginner",
    "question": "How must environment variables be named to be accessible in the browser?",
    "options": [
      { "id": "a", "text": "Start with NEXT_PUBLIC_", "isCorrect": true },
      { "id": "b", "text": "Start with PUBLIC_", "isCorrect": false },
      { "id": "c", "text": "Any custom prefix", "isCorrect": false }
    ],
    "explanation": "Only variables prefixed with NEXT_PUBLIC_ are exposed to client-side code.",
    "interview_tip": "All other env vars stay server-only.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "nextjs-env-vars"
  },
  {
    "id": 5018,
    "title": "Custom _app.js Purpose",
    "category": "Next.js",
    "difficulty": "Beginner",
    "question": "What is _app.js used for in the pages directory of Next.js?",
    "options": [
      {
        "id": "a",
        "text": "Overrides the default App component to initialize pages",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Defines custom server logic only",
        "isCorrect": false
      },
      { "id": "c", "text": "Sets up the API directory", "isCorrect": false }
    ],
    "explanation": "_app.js lets you add layout, context, and persist state between pages.",
    "interview_tip": "Great place to wrap components with providers.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/routing/custom-app"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "nextjs-app-js"
  },
  {
    "id": 5019,
    "title": "Deploying to Vercel",
    "category": "Next.js",
    "difficulty": "Beginner",
    "question": "Which platform is officially recommended for deploying Next.js apps?",
    "options": [
      { "id": "a", "text": "Vercel", "isCorrect": true },
      { "id": "b", "text": "GitHub Pages", "isCorrect": false },
      { "id": "c", "text": "Netlify", "isCorrect": false }
    ],
    "explanation": "Vercel is created by the makers of Next.js and provides optimized serverless hosting.",
    "interview_tip": "You can use other platforms, but Vercel gets first-class support.",
    "references": ["https://nextjs.org/deployment"],
    "timeLimit": 30,
    "points": 1,
    "slug": "nextjs-vercel-deploy"
  },
  {
    "id": 5020,
    "title": "Custom Error Page",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "How do you customize the 404 error page in a Next.js app (Pages directory)?",
    "options": [
      {
        "id": "a",
        "text": "Create a file named 404.js in the pages directory",
        "isCorrect": true
      },
      { "id": "b", "text": "Edit _error.js only", "isCorrect": false },
      { "id": "c", "text": "Add error='404' prop to pages", "isCorrect": false }
    ],
    "explanation": "A file named 404.js in the pages folder renders for all not-found routes.",
    "interview_tip": "You can also make a custom _error.js for other HTTP errors.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/routing/custom-error"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-custom-404"
  },
  {
    "id": 5021,
    "title": "Incremental Static Regeneration (ISR)",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "What is incremental static regeneration (ISR) in Next.js?",
    "options": [
      {
        "id": "a",
        "text": "Updates static content after build without full redeploy",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Rebuilds every page on each request",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Client-side data fetching only",
        "isCorrect": false
      }
    ],
    "explanation": "ISR combines static and dynamic: static pages can update at runtime with new content.",
    "interview_tip": "Use revalidate key in getStaticProps for ISR.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/data-fetching/incremental-static-regeneration"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-isr"
  },
  {
    "id": 5022,
    "title": "Dynamic Imports",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "How does Next.js support code-splitting for a specific component?",
    "options": [
      {
        "id": "a",
        "text": "Using dynamic(import('./Component'))",
        "isCorrect": true
      },
      { "id": "b", "text": "With <CodeSplit> component", "isCorrect": false },
      {
        "id": "c",
        "text": "By adding 'lazy' to the filename",
        "isCorrect": false
      }
    ],
    "explanation": "dynamic() enables component-level code splitting and SSR compatibility.",
    "interview_tip": "Accepts loading prop for fallback UI.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/optimizing/dynamic-imports"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-dynamic-import"
  },
  {
    "id": 5023,
    "title": "Middleware in Next.js",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "What is the use of the middleware file in a Next.js app?",
    "options": [
      {
        "id": "a",
        "text": "To run code before a request is completed, for auth or redirects",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "To define serverless API handlers",
        "isCorrect": false
      },
      { "id": "c", "text": "To serve static assets", "isCorrect": false }
    ],
    "explanation": "middleware.js runs code (in Edge runtime) to intercept requests before route handling.",
    "interview_tip": "Common for rewriting URLs, A/B testing, and auth.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/routing/middleware"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-middleware"
  },
  {
    "id": 5024,
    "title": "getStaticPaths Use",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "When is getStaticPaths required in a Next.js (pages router) app?",
    "options": [
      {
        "id": "a",
        "text": "When using dynamic static generation with getStaticProps",
        "isCorrect": true
      },
      { "id": "b", "text": "Always with API routes", "isCorrect": false },
      {
        "id": "c",
        "text": "Only for dynamic API endpoints",
        "isCorrect": false
      }
    ],
    "explanation": "getStaticPaths provides paths for dynamic [param] routes using SSG.",
    "interview_tip": "Returns an array of route params for build-time page generation.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/data-fetching/get-static-paths"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-getstaticpaths"
  },
  {
    "id": 5025,
    "title": "Custom Head Elements in App Directory",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "How are head elements managed in Next.js app directory layouts?",
    "options": [
      {
        "id": "a",
        "text": "With a head.js or Head function in each folder",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "In a global _document.js only",
        "isCorrect": false
      },
      { "id": "c", "text": "By editing index.html", "isCorrect": false }
    ],
    "explanation": "In the new app directory, you export a Head component/function or use head.js for per-route <head> tags.",
    "interview_tip": "This enables hierarchical, composable head management.",
    "references": [
      "https://nextjs.org/docs/app/building-your-application/routing/pages-and-layouts#modifying-head"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-app-head"
  },
  {
    "id": 5026,
    "title": "CSS Modules",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "How do you apply locally-scoped CSS styles to a component in Next.js?",
    "options": [
      {
        "id": "a",
        "text": "Use [name].module.css and import as styles",
        "isCorrect": true
      },
      { "id": "b", "text": "Refer to styles.css globally", "isCorrect": false },
      { "id": "c", "text": "Inline all styles as objects", "isCorrect": false }
    ],
    "explanation": "CSS Modules create locally scoped class names to avoid collisions.",
    "interview_tip": "Import classes: import styles from './Button.module.css'; use as styles.myClass.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/styling/css-modules"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-css-modules"
  },
  {
    "id": 5027,
    "title": "Public vs. Static Directory",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "What is a key difference between 'public' and 'static' directories in Next.js app structure (pre-v10)?",
    "options": [
      {
        "id": "a",
        "text": "'public' is for static assets at the root URL; 'static' is deprecated",
        "isCorrect": true
      },
      { "id": "b", "text": "'static' is for SSR only", "isCorrect": false },
      {
        "id": "c",
        "text": "'public' replaces 'api' directory",
        "isCorrect": false
      }
    ],
    "explanation": "The public directory serves static assets directly; 'static' was removed in favor of 'public' after v9.",
    "interview_tip": "Only files in 'public' are available at domain.com/filename.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/optimizing/static-assets"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-public-static"
  },
  {
    "id": 5028,
    "title": "Custom Server Requirement",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "When should you use a custom server (e.g. Express) with Next.js?",
    "options": [
      {
        "id": "a",
        "text": "Only if you need advanced routing or proxying beyond built-in features",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "For every deployment by default",
        "isCorrect": false
      },
      { "id": "c", "text": "For using the app directory", "isCorrect": false }
    ],
    "explanation": "Built-in server features are usually sufficient, but custom servers allow advanced middleware and proxies.",
    "interview_tip": "Custom servers can break some SSR optimizations.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/deploying/custom-server"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-custom-server"
  },
  {
    "id": 5029,
    "title": "Environment Variable Loading",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "Where does Next.js automatically load environment variables from?",
    "options": [
      {
        "id": "a",
        "text": ".env, .env.local, .env.development, .env.production files",
        "isCorrect": true
      },
      { "id": "b", "text": "package.json scripts", "isCorrect": false },
      {
        "id": "c",
        "text": "Nowhere unless using next-env-config",
        "isCorrect": false
      }
    ],
    "explanation": "These files are loaded in standard order, with .env.local used for secrets.",
    "interview_tip": "Variables must be prefixed with NEXT_PUBLIC_ for browser access.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-env-loading"
  },
  {
    "id": 5030,
    "title": "API Route Limitations",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "Which is NOT a limitation of Next.js API routes?",
    "options": [
      {
        "id": "a",
        "text": "Can execute long-running, blocking tasks efficiently",
        "isCorrect": false
      },
      {
        "id": "b",
        "text": "Cannot maintain persistent connections",
        "isCorrect": true
      },
      {
        "id": "c",
        "text": "Run only in Node / serverless environments",
        "isCorrect": false
      }
    ],
    "explanation": "API routes do not support persistent connections and are stateless like serverless functions.",
    "interview_tip": "Avoid for WebSocket or real-time streaming needs.",
    "references": [
      "https://nextjs.org/docs/pages/api-reference/api-routes/introduction"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-api-route-limit"
  },
  {
    "id": 5031,
    "title": "Image Component Loader",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "How can advanced image loading behavior be customized using the Next.js <Image> component?",
    "options": [
      {
        "id": "a",
        "text": "Pass a custom 'loader' function to the component",
        "isCorrect": true
      },
      { "id": "b", "text": "Use a data-image attribute", "isCorrect": false },
      { "id": "c", "text": "Change the public folder", "isCorrect": false }
    ],
    "explanation": "Custom loader lets you integrate external providers or CDNs.",
    "interview_tip": "Next.js Image requires 'width' and 'height' for optimization.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/optimizing/images#loader"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-custom-image-loader"
  },
  {
    "id": 5032,
    "title": "Static Export",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "What does 'next export' allow you to do?",
    "options": [
      {
        "id": "a",
        "text": "Build a fully static site (no SSR)",
        "isCorrect": true
      },
      { "id": "b", "text": "Run a dev server", "isCorrect": false },
      { "id": "c", "text": "Deploy to Vercel exclusively", "isCorrect": false }
    ],
    "explanation": "next export outputs HTML/CSS/JS files ready for traditional static hosting.",
    "interview_tip": "API routes and SSR pages are not supported in export.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/deploying/static-exports"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-export-static"
  },
  {
    "id": 5033,
    "title": "Absolute Imports",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "How do you configure absolute imports in a Next.js app?",
    "options": [
      {
        "id": "a",
        "text": "Add 'baseUrl' to jsconfig.json or tsconfig.json",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Place all files in src directory",
        "isCorrect": false
      },
      { "id": "c", "text": "Use require() only", "isCorrect": false }
    ],
    "explanation": "Absolute paths simplify imports; baseUrl set to '.' or 'src' is common.",
    "interview_tip": "No additional plugins or loaders are needed.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/configuring/absolute-imports-and-module-aliases"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-absolute-imports"
  },
  {
    "id": 5034,
    "title": "API Route Methods",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "How should you handle different HTTP methods in a Next.js API route?",
    "options": [
      {
        "id": "a",
        "text": "Check req.method and branch with if/else or switch",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Export a function named for each verb",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Use app.route to route methods",
        "isCorrect": false
      }
    ],
    "explanation": "API route handlers should manually check req.method for GET, POST, etc.",
    "interview_tip": "Return 405 (Method Not Allowed) for unsupported methods.",
    "references": [
      "https://nextjs.org/docs/pages/api-reference/api-routes/introduction"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-api-methods"
  },
  {
    "id": 5035,
    "title": "Headless CMS Integration",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "Which approach enables easy integration of headless CMS data in a Next.js site?",
    "options": [
      {
        "id": "a",
        "text": "Fetch data in getStaticProps or getServerSideProps",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Load CMS scripts in _document.js only",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Directly access CMS data from client only",
        "isCorrect": false
      }
    ],
    "explanation": "Fetching CMS content at build or request time allows for fast page rendering and SEO.",
    "interview_tip": "Choose SSG for infrequent updates, SSR for real-time content.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/data-fetching/overview"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-cms-integration"
  },
  {
    "id": 5036,
    "title": "Rewrites vs. Redirects",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "What is the difference between a rewrite and a redirect in next.config.js?",
    "options": [
      {
        "id": "a",
        "text": "Rewrite changes destination internally, redirect changes URL in browser",
        "isCorrect": true
      },
      { "id": "b", "text": "Both send 301 HTTP response", "isCorrect": false },
      { "id": "c", "text": "Redirects are for images only", "isCorrect": false }
    ],
    "explanation": "Rewrites proxy traffic without changing user’s visible URL. Redirects send new location to client.",
    "interview_tip": "Use redirects for SEO, rewrites for proxy/API routing.",
    "references": [
      "https://nextjs.org/docs/pages/api-reference/next-config-js/rewrites"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-rewrites-redirects"
  },
  {
    "id": 5037,
    "title": "SSR Authentication",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "Where is it recommended to check authentication during SSR?",
    "options": [
      { "id": "a", "text": "Inside getServerSideProps", "isCorrect": true },
      { "id": "b", "text": "In the client useEffect", "isCorrect": false },
      { "id": "c", "text": "With custom _document.js", "isCorrect": false }
    ],
    "explanation": "Server-side logic can read cookies, headers, tokens securely during SSR.",
    "interview_tip": "Never expose secret logic to client-side bundles.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/authentication"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-ssr-auth"
  },
  {
    "id": 5038,
    "title": "Preview Mode",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "What is preview mode used for in Next.js?",
    "options": [
      {
        "id": "a",
        "text": "View draft/unpublished CMS content on static sites",
        "isCorrect": true
      },
      { "id": "b", "text": "Deploy builds faster", "isCorrect": false },
      { "id": "c", "text": "Automatically refresh images", "isCorrect": false }
    ],
    "explanation": "Preview mode lets editors view staging content on SSG sites before publishing.",
    "interview_tip": "Preview mode is set/unset by API route handlers.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/data-fetching/preview-mode"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-preview-mode"
  },
  {
    "id": 5039,
    "title": "Catch-All Routes",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "How do you define a catch-all route in Next.js (pages directory)?",
    "options": [
      { "id": "a", "text": "[...param].js", "isCorrect": true },
      { "id": "b", "text": "{param*}.js", "isCorrect": false },
      { "id": "c", "text": "all.js", "isCorrect": false }
    ],
    "explanation": "Catch-all routes match any route such as /a, /a/b/c with one file.",
    "interview_tip": "Use [[...param]].js for optional catch-all.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/routing/dynamic-routes#catch-all-routes"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-catch-all"
  },
  {
    "id": 5040,
    "title": "Optional Catch-All Routes",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "What is the filename convention for an optional catch-all route in Next.js?",
    "options": [
      { "id": "a", "text": "[[...param]].js", "isCorrect": true },
      { "id": "b", "text": "{param*}.js", "isCorrect": false },
      { "id": "c", "text": "optional-all.js", "isCorrect": false }
    ],
    "explanation": "[[...param]].js matches /, /a, /a/b, etc. including the base route.",
    "interview_tip": "Regular catch-all requires at least one segment.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/routing/dynamic-routes#optional-catch-all-routes"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-optional-catch-all"
  },
  {
    "id": 5041,
    "title": "Static Files & CDN",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "Why might static assets in the public folder not update immediately for users?",
    "options": [
      {
        "id": "a",
        "text": "Browser and CDN caches can serve old versions",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "The server blocks all file changes",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Assets are stored in memory only",
        "isCorrect": false
      }
    ],
    "explanation": "CDNs and browsers cache assets; fingerprint filenames for cache busting.",
    "interview_tip": "Update image1.png → image1.123.png for instant updates.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/optimizing/static-assets"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-cache-busting"
  },
  {
    "id": 5042,
    "title": "API Route Response",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "How do you send a JSON response from a Next.js API route?",
    "options": [
      {
        "id": "a",
        "text": "Use res.status(200).json({ ... })",
        "isCorrect": true
      },
      { "id": "b", "text": "Return an object directly", "isCorrect": false },
      { "id": "c", "text": "Use res.sendJSON()", "isCorrect": false }
    ],
    "explanation": ".json() automatically stringifies and sets appropriate headers.",
    "interview_tip": "Always send a status code.",
    "references": [
      "https://nextjs.org/docs/pages/api-reference/api-routes/response-helpers"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-api-json"
  },
  {
    "id": 5043,
    "title": "API Handler Default Export",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "What must you always export from an API route file?",
    "options": [
      {
        "id": "a",
        "text": "A default export function that handles req, res",
        "isCorrect": true
      },
      { "id": "b", "text": "An object named 'handler'", "isCorrect": false },
      { "id": "c", "text": "No exports needed", "isCorrect": false }
    ],
    "explanation": "Next.js expects each file to export a default request handler.",
    "interview_tip": "You can organize handlers or routes with extra functions, but one default export is required.",
    "references": [
      "https://nextjs.org/docs/pages/api-reference/api-routes/introduction"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-api-default-export"
  },
  {
    "id": 5044,
    "title": "Dynamic Params in App Directory",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "How do you define a dynamic route segment in the new 'app' directory?",
    "options": [
      {
        "id": "a",
        "text": "Enclose folder name in brackets, e.g., [id]",
        "isCorrect": true
      },
      { "id": "b", "text": "{id} folder naming", "isCorrect": false },
      { "id": "c", "text": "params-id folder", "isCorrect": false }
    ],
    "explanation": "Dynamic segments use [param] folders, similar to pages.",
    "interview_tip": "Nested dynamic routes supported via nested folders.",
    "references": [
      "https://nextjs.org/docs/app/building-your-application/routing/dynamic-routes"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-app-dynamic-route"
  },
  {
    "id": 5045,
    "title": "API Route Body Parsing",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "How can you disable the default body parser in a Next.js API route?",
    "options": [
      {
        "id": "a",
        "text": "Export 'config' object with api: { bodyParser: false }",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Remove bodyParser module globally",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Set bodyParserConfig: false in next.config.js",
        "isCorrect": false
      }
    ],
    "explanation": "This is required for custom raw request parsing (e.g., file uploads).",
    "interview_tip": "Must parse (e.g., multer, busboy) manually if disabled.",
    "references": [
      "https://nextjs.org/docs/pages/api-reference/api-routes/request-helpers"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-disable-body-parser"
  },
  {
    "id": 5046,
    "title": "App Directory Layout.js",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "What is the function of layout.js in the Next.js app directory?",
    "options": [
      {
        "id": "a",
        "text": "Defines persistent UI wrappers for a section or the whole app",
        "isCorrect": true
      },
      { "id": "b", "text": "Handles route handler logic", "isCorrect": false },
      { "id": "c", "text": "Should only be used in root", "isCorrect": false }
    ],
    "explanation": "Layouts persist across navigations, great for shared headers/nav.",
    "interview_tip": "Nested layouts allow for complex app shell structures.",
    "references": [
      "https://nextjs.org/docs/app/building-your-application/routing/pages-and-layouts#modifying-layouts"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-layout-js"
  },
  {
    "id": 5047,
    "title": "Client Components in App Directory",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "How do you mark a React component as a client component in the app directory?",
    "options": [
      {
        "id": "a",
        "text": "Add 'use client' directive at the top of the file",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Export a ClientComponent flag",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Give component client: true in export",
        "isCorrect": false
      }
    ],
    "explanation": "The 'use client' pragma ensures the component and its children run on the client.",
    "interview_tip": "By default, components in 'app' directory are server components.",
    "references": [
      "https://nextjs.org/docs/app/building-your-application/rendering/client-components"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-use-client"
  },
  {
    "id": 5048,
    "title": "Streaming and Suspense",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "How does Next.js support streaming of server-rendered content for fast paint?",
    "options": [
      {
        "id": "a",
        "text": "Uses React Suspense to incrementally stream server-rendered UI to client",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Only renders full page after all data is fetched",
        "isCorrect": false
      },
      { "id": "c", "text": "Streams CSS files", "isCorrect": false }
    ],
    "explanation": "React Suspense and streaming in Next.js enable early visual loading, improving UX.",
    "interview_tip": "Combine with server components and loading.js in 'app' directory.",
    "references": [
      "https://nextjs.org/docs/app/building-your-application/rendering/server-components#streaming-server-rendering"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-streaming-suspense"
  },
  {
    "id": 5049,
    "title": "Middleware Edge Runtime",
    "category": "Next.js",
    "difficulty": "Intermediate",
    "question": "Where does Next.js middleware run by default?",
    "options": [
      {
        "id": "a",
        "text": "At the edge, close to the user (Edge runtime)",
        "isCorrect": true
      },
      { "id": "b", "text": "Only in the client browser", "isCorrect": false },
      { "id": "c", "text": "On the Node.js server only", "isCorrect": false }
    ],
    "explanation": "Middleware executes at the edge for lower latency and faster response.",
    "interview_tip": "Limited subset of Node.js APIs available in this runtime.",
    "references": [
      "https://nextjs.org/docs/app/building-your-application/routing/middleware#edge-runtime"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "nextjs-middleware-edge"
  },
  {
    "id": 5050,
    "title": "Server and Client Components Mix",
    "category": "Next.js",
    "difficulty": "Advanced",
    "question": "How can you use a client component inside a server component in the app directory?",
    "options": [
      {
        "id": "a",
        "text": "Import the client component as usual; the 'use client' directive on the imported file is required",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "You must convert the server component to a client component",
        "isCorrect": false
      },
      { "id": "c", "text": "Mixing is not supported", "isCorrect": false }
    ],
    "explanation": "Server components can import and render client components as children—client logic stays isolated.",
    "interview_tip": "Always mark client components with 'use client' at the top of the file.",
    "references": [
      "https://nextjs.org/docs/app/building-your-application/rendering/client-components#using-client-components"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "nextjs-server-client-mix"
  },
  {
    "id": 5051,
    "title": "Static Params in App Directory",
    "category": "Next.js",
    "difficulty": "Advanced",
    "question": "How do you statically generate dynamic routes in the app directory?",
    "options": [
      {
        "id": "a",
        "text": "Implement a generateStaticParams function in the dynamic route folder",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Use getStaticPaths as in the pages directory",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Set isStatic to true in route options",
        "isCorrect": false
      }
    ],
    "explanation": "generateStaticParams allows for SSG in dynamic segments of app directory routes.",
    "interview_tip": "Does not run on the client; only at build time.",
    "references": [
      "https://nextjs.org/docs/app/building-your-application/routing/dynamic-routes#static-generation"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "nextjs-generateStaticParams"
  },
  {
    "id": 5052,
    "title": "Advanced Data Fetching (app Directory)",
    "category": "Next.js",
    "difficulty": "Advanced",
    "question": "What is a recommended way to fetch data in server components of the app directory?",
    "options": [
      {
        "id": "a",
        "text": "Call fetch() directly at the top level of the component",
        "isCorrect": true
      },
      { "id": "b", "text": "Use useEffect", "isCorrect": false },
      { "id": "c", "text": "Only fetch in loading.js", "isCorrect": false }
    ],
    "explanation": "Server components can await fetch responses and pass fully resolved data to the client.",
    "interview_tip": "No need for custom hooks or state management for fetching in server components.",
    "references": [
      "https://nextjs.org/docs/app/building-your-application/data-fetching/server-components"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "nextjs-server-fetch"
  },
  {
    "id": 5053,
    "title": "App Directory Loading UI",
    "category": "Next.js",
    "difficulty": "Advanced",
    "question": "What is the purpose of loading.js in a Next.js app directory route segment?",
    "options": [
      {
        "id": "a",
        "text": "Displays a loading UI automatically while server component data is loading",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Defines a fallback for export static sites",
        "isCorrect": false
      },
      { "id": "c", "text": "For error handling only", "isCorrect": false }
    ],
    "explanation": "loading.js provides a UI (spinner, skeleton, etc.) while async server component data loads.",
    "interview_tip": "Place in route or sub-route for localized loading states.",
    "references": [
      "https://nextjs.org/docs/app/building-your-application/routing/loading-ui-and-streaming"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "nextjs-loading-js"
  },
  {
    "id": 5054,
    "title": "App Directory Error Handling",
    "category": "Next.js",
    "difficulty": "Advanced",
    "question": "How do you provide localized error boundaries in Next.js app directory?",
    "options": [
      {
        "id": "a",
        "text": "Add error.js in the route segment where you want error handling",
        "isCorrect": true
      },
      { "id": "b", "text": "Catch errors in _app.js", "isCorrect": false },
      {
        "id": "c",
        "text": "Each page component must have try/catch",
        "isCorrect": false
      }
    ],
    "explanation": "error.js files act as error boundaries for their route segments.",
    "interview_tip": "Errors in children surface up to nearest error.js.",
    "references": [
      "https://nextjs.org/docs/app/building-your-application/routing/error-handling"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "nextjs-error-js"
  },
  {
    "id": 5055,
    "title": "API Route Middleware",
    "category": "Next.js",
    "difficulty": "Advanced",
    "question": "How can you implement middleware logic for only specific API routes?",
    "options": [
      {
        "id": "a",
        "text": "Write custom middleware in the API handler function itself",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Place a middleware.js inside the API folder",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Use app directory middleware for all APIs",
        "isCorrect": false
      }
    ],
    "explanation": "Add logic to the handler for rate limiting, auth, etc, per-route.",
    "interview_tip": "Global middleware.js at root applies to all routes; inside API, add logic per-handler.",
    "references": [
      "https://nextjs.org/docs/pages/api-reference/api-routes/introduction"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "nextjs-api-specific-middleware"
  },
  {
    "id": 5056,
    "title": "Third-party Packages and SSR",
    "category": "Next.js",
    "difficulty": "Advanced",
    "question": "What must you verify before using a third-party React library in server-side rendering (SSR) pages?",
    "options": [
      {
        "id": "a",
        "text": "That it supports SSR and does not rely on browser-only APIs",
        "isCorrect": true
      },
      { "id": "b", "text": "That it uses hooks only", "isCorrect": false },
      { "id": "c", "text": "That it has a .js extension", "isCorrect": false }
    ],
    "explanation": "Libraries that access window or document throw errors in SSR unless properly guarded.",
    "interview_tip": "Look for an isomorphic or SSR-safe note in documentation.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/rendering/static-and-dynamic-rendering"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "nextjs-ssr-thirdparty"
  },
  {
    "id": 5057,
    "title": "API Rate Limiting Example",
    "category": "Next.js",
    "difficulty": "Advanced",
    "question": "What is a common way to implement rate limiting in Next.js API routes?",
    "options": [
      {
        "id": "a",
        "text": "Use in-memory or external store (e.g. Redis) to track requests per IP",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Change the public folder permissions",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Only rely on Next.js hosting limits",
        "isCorrect": false
      }
    ],
    "explanation": "Tracking requests by user or IP with a store lets you throttle or block abuse.",
    "interview_tip": "Avoid global objects for counters on serverless hosting.",
    "references": [
      "https://nextjs.org/docs/pages/api-reference/api-routes/introduction"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "nextjs-api-rate-limit"
  },
  {
    "id": 5058,
    "title": "App Directory Route Grouping",
    "category": "Next.js",
    "difficulty": "Advanced",
    "question": "How do you group routes without affecting the URL in the app directory?",
    "options": [
      {
        "id": "a",
        "text": "Prefix the folder with ( and ) — e.g., (admin)",
        "isCorrect": true
      },
      { "id": "b", "text": "_group folders", "isCorrect": false },
      { "id": "c", "text": "group.json config", "isCorrect": false }
    ],
    "explanation": "Folders with (name) are route groups—they organize code without showing in browser URL.",
    "interview_tip": "Use for layouts shared across multiple routes.",
    "references": [
      "https://nextjs.org/docs/app/building-your-application/routing/defining-routes#route-groups"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "nextjs-route-groups"
  },
  {
    "id": 5059,
    "title": "Internationalized Routing",
    "category": "Next.js",
    "difficulty": "Advanced",
    "question": "What is official support for internationalized routing in Next.js called?",
    "options": [
      {
        "id": "a",
        "text": "i18n routing with locale domains and automatic locale detection",
        "isCorrect": true
      },
      { "id": "b", "text": "routes.json globalizer", "isCorrect": false },
      {
        "id": "c",
        "text": "All routing happens on the client",
        "isCorrect": false
      }
    ],
    "explanation": "Configure locales, defaultLocale, and domains for i18n in next.config.js.",
    "interview_tip": "Next.js handles path prefixing and locale switching for you.",
    "references": [
      "https://nextjs.org/docs/pages/building-your-application/routing/internationalization"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "nextjs-i18n"
  },
  {
    "id": 6000,
    "title": "Node.js Entry File",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is the default filename for the entry point in a Node.js project?",
    "options": [
      { "id": "a", "text": "index.js", "isCorrect": true },
      { "id": "b", "text": "main.js", "isCorrect": false },
      { "id": "c", "text": "app.js", "isCorrect": false }
    ],
    "explanation": "Node.js will look for index.js by default when running code or a module.",
    "interview_tip": "package.json can explicitly set a custom entry file via the 'main' field.",
    "references": [
      "https://nodejs.org/api/modules.html#modules_writing_modules"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "node-entry-file"
  },
  {
    "id": 6001,
    "title": "Output to Console",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "Which method outputs a message to the console in Node.js?",
    "options": [
      { "id": "a", "text": "console.log()", "isCorrect": true },
      { "id": "b", "text": "print()", "isCorrect": false },
      { "id": "c", "text": "write()", "isCorrect": false }
    ],
    "explanation": "console.log() prints output to the terminal.",
    "interview_tip": "console.error() prints to stderr.",
    "references": ["https://nodejs.org/api/console.html"],
    "timeLimit": 30,
    "points": 1,
    "slug": "node-console-log"
  },
  {
    "id": 6002,
    "title": "Node.js Package Manager",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is the default package manager for Node.js?",
    "options": [
      { "id": "a", "text": "npm", "isCorrect": true },
      { "id": "b", "text": "yarn", "isCorrect": false },
      { "id": "c", "text": "pip", "isCorrect": false }
    ],
    "explanation": "npm (Node Package Manager) is bundled by default with Node.",
    "interview_tip": "Alternatives like yarn and pnpm are also popular.",
    "references": ["https://docs.npmjs.com/cli/v9/commands/npm"],
    "timeLimit": 30,
    "points": 1,
    "slug": "node-npm"
  },
  {
    "id": 6003,
    "title": "Imports in CommonJS",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "How do you import a module in CommonJS (traditional Node.js)?",
    "options": [
      { "id": "a", "text": "require('module')", "isCorrect": true },
      { "id": "b", "text": "import 'module'", "isCorrect": false },
      { "id": "c", "text": "include('module')", "isCorrect": false }
    ],
    "explanation": "CommonJS uses require for importing other modules.",
    "interview_tip": "import/export is available in ESM (.mjs or with type: module in package.json).",
    "references": ["https://nodejs.org/api/modules.html"],
    "timeLimit": 30,
    "points": 1,
    "slug": "node-require"
  },
  {
    "id": 6004,
    "title": "Node.js Global Variable",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "Which variable represents the directory name of the current module in Node.js?",
    "options": [
      { "id": "a", "text": "__dirname", "isCorrect": true },
      { "id": "b", "text": "__filename", "isCorrect": false },
      { "id": "c", "text": "dirName", "isCorrect": false }
    ],
    "explanation": "__dirname returns an absolute path string.",
    "interview_tip": "__filename includes the full path and filename.",
    "references": ["https://nodejs.org/api/modules.html#modules_dirname"],
    "timeLimit": 30,
    "points": 1,
    "slug": "node-dirname"
  },
  {
    "id": 6005,
    "title": "Read a File",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "Which built-in module is used for file operations in Node.js?",
    "options": [
      { "id": "a", "text": "fs", "isCorrect": true },
      { "id": "b", "text": "file", "isCorrect": false },
      { "id": "c", "text": "filesys", "isCorrect": false }
    ],
    "explanation": "fs stands for 'filesystem' and is standard in all Node installations.",
    "interview_tip": "fs has both synchronous and async methods.",
    "references": ["https://nodejs.org/api/fs.html"],
    "timeLimit": 30,
    "points": 1,
    "slug": "node-fs-module"
  },
  {
    "id": 6006,
    "title": "HTTP Server Creation",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "Which module allows you to create an HTTP server in Node.js?",
    "options": [
      { "id": "a", "text": "http", "isCorrect": true },
      { "id": "b", "text": "net", "isCorrect": false },
      { "id": "c", "text": "request", "isCorrect": false }
    ],
    "explanation": "http is a core Node.js module for server and client HTTP operations.",
    "interview_tip": "Use frameworks like Express for advanced routing.",
    "references": ["https://nodejs.org/api/http.html"],
    "timeLimit": 30,
    "points": 1,
    "slug": "node-http-module"
  },
  {
    "id": 6007,
    "title": "Package.json Use",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "Which file describes dependencies and scripts for a Node.js project?",
    "options": [
      { "id": "a", "text": "package.json", "isCorrect": true },
      { "id": "b", "text": "index.js", "isCorrect": false },
      { "id": "c", "text": "node_modules.json", "isCorrect": false }
    ],
    "explanation": "package.json contains project metadata, dependencies and lifecycle scripts.",
    "interview_tip": "Running `npm init` helps generate this file.",
    "references": [
      "https://docs.npmjs.com/cli/v9/configuring-npm/package-json"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "node-package-json"
  },
  {
    "id": 6008,
    "title": "Exporting in CommonJS",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "How do you export a function from a module in Node.js (CommonJS)?",
    "options": [
      { "id": "a", "text": "module.exports = myFunction", "isCorrect": true },
      { "id": "b", "text": "export default myFunction", "isCorrect": false },
      { "id": "c", "text": "exports: myFunction", "isCorrect": false }
    ],
    "explanation": "module.exports is the main export object for modules in Node.",
    "interview_tip": "exports.myFunc = ... is also valid, but only for named exports.",
    "references": [
      "https://nodejs.org/api/modules.html#modules_exports_shortcut"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "node-module-exports"
  },
  {
    "id": 6009,
    "title": "EventEmitter Basics",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What Node.js class is commonly extended to create custom event-driven objects?",
    "options": [
      { "id": "a", "text": "EventEmitter", "isCorrect": true },
      { "id": "b", "text": "Observable", "isCorrect": false },
      { "id": "c", "text": "EmitterClass", "isCorrect": false }
    ],
    "explanation": "EventEmitter is the standard base class for events in Node.js.",
    "interview_tip": "Used by many Node.js core APIs (e.g., streams, sockets).",
    "references": ["https://nodejs.org/api/events.html"],
    "timeLimit": 30,
    "points": 1,
    "slug": "node-eventemitter"
  },
  {
    "id": 6010,
    "title": "Node.js Process Exit Code",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What does process.exit(1) do?",
    "options": [
      {
        "id": "a",
        "text": "Terminates the process with a failure code",
        "isCorrect": true
      },
      { "id": "b", "text": "Suspends the process", "isCorrect": false },
      { "id": "c", "text": "Pauses the process output", "isCorrect": false }
    ],
    "explanation": "A non-zero exit code indicates an error/failure.",
    "interview_tip": "process.exit(0) means success.",
    "references": ["https://nodejs.org/api/process.html#processexitcode"],
    "timeLimit": 30,
    "points": 1,
    "slug": "node-process-exit"
  },
  {
    "id": 6011,
    "title": "Accessing Environment Variables",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "How do you access an environment variable named PORT in Node.js?",
    "options": [
      { "id": "a", "text": "process.env.PORT", "isCorrect": true },
      { "id": "b", "text": "env.PORT", "isCorrect": false },
      { "id": "c", "text": "process.PORT", "isCorrect": false }
    ],
    "explanation": "Environment variables are found on process.env object.",
    "interview_tip": "Always check for undefined when reading env vars.",
    "references": ["https://nodejs.org/api/process.html#processenv"],
    "timeLimit": 30,
    "points": 1,
    "slug": "node-env-vars"
  },
  {
    "id": 6012,
    "title": "Synchronous vs Asynchronous",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is a key advantage of asynchronous file reading in Node.js?",
    "options": [
      {
        "id": "a",
        "text": "Non-blocking: doesn't halt the event loop",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Is always faster than synchronous",
        "isCorrect": false
      },
      { "id": "c", "text": "Requires less code", "isCorrect": false }
    ],
    "explanation": "Async I/O is fundamental to Node's scalability. Blocking operations delay all processing.",
    "interview_tip": "Most Node APIs offer both sync and async versions.",
    "references": [
      "https://nodejs.org/en/docs/guides/blocking-vs-non-blocking"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "node-sync-vs-async"
  },
  {
    "id": 6013,
    "title": "require() Caching",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What happens if you require the same module multiple times?",
    "options": [
      {
        "id": "a",
        "text": "The cached module is returned after the first load",
        "isCorrect": true
      },
      { "id": "b", "text": "Loads a new copy every time", "isCorrect": false },
      { "id": "c", "text": "Throws an error", "isCorrect": false }
    ],
    "explanation": "Modules are cached after first load, improving performance.",
    "interview_tip": "You can clear the cache by manipulating require.cache, but this is rarely necessary.",
    "references": ["https://nodejs.org/api/modules.html#requirecache"],
    "timeLimit": 30,
    "points": 2,
    "slug": "node-require-cache"
  },
  {
    "id": 6014,
    "title": "Reading JSON Files",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "How can you easily import a JSON file as a module in Node.js?",
    "options": [
      { "id": "a", "text": "require('./file.json')", "isCorrect": true },
      { "id": "b", "text": "import('./file.json') only", "isCorrect": false },
      { "id": "c", "text": "Process with JSON.stringify", "isCorrect": false }
    ],
    "explanation": "require can load .json files directly as JS objects.",
    "interview_tip": "With ESM, you must use import assertions.",
    "references": ["https://nodejs.org/api/modules.html#json-modules"],
    "timeLimit": 30,
    "points": 2,
    "slug": "node-require-json"
  },
  {
    "id": 6015,
    "title": "Node.js Buffer",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is a Buffer object used for in Node.js?",
    "options": [
      { "id": "a", "text": "To handle binary data streams", "isCorrect": true },
      { "id": "b", "text": "To store JavaScript objects", "isCorrect": false },
      { "id": "c", "text": "To cache modules", "isCorrect": false }
    ],
    "explanation": "Buffers manage raw binary data from I/O streams like files and network.",
    "interview_tip": "Buffer is not a global in ESM; import it from 'buffer' module.",
    "references": ["https://nodejs.org/api/buffer.html"],
    "timeLimit": 30,
    "points": 2,
    "slug": "node-buffer"
  },
  {
    "id": 6016,
    "title": "Global Variables in Node.js",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "Which is NOT a global variable in Node.js?",
    "options": [
      { "id": "a", "text": "window", "isCorrect": true },
      { "id": "b", "text": "global", "isCorrect": false },
      { "id": "c", "text": "__dirname", "isCorrect": false }
    ],
    "explanation": "window is not available; global is the Node.js equivalent.",
    "interview_tip": "Avoid polluting the global object for maintainability.",
    "references": ["https://nodejs.org/api/globals.html"],
    "timeLimit": 30,
    "points": 2,
    "slug": "node-global-vars"
  },
  {
    "id": 6017,
    "title": "Event Loop",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is the purpose of Node.js's event loop?",
    "options": [
      {
        "id": "a",
        "text": "Handle concurrent I/O in a single-threaded environment",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Start new threads for each request",
        "isCorrect": false
      },
      { "id": "c", "text": "Limit memory usage", "isCorrect": false }
    ],
    "explanation": "The event loop processes events and callbacks for non-blocking I/O.",
    "interview_tip": "Heavy computation blocks the event loop and should be offloaded.",
    "references": [
      "https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "node-event-loop"
  },

  {
    "id": 6061,
    "title": "Signals Handling",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "How do you gracefully shut down a Node.js app on SIGTERM?",
    "options": [
      {
        "id": "a",
        "text": "Listen for process.on('SIGTERM') and close servers before exit",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Call process.exit() immediately",
        "isCorrect": false
      },
      { "id": "c", "text": "Unhandled signals are ignored", "isCorrect": false }
    ],
    "explanation": "Catching signals helps safely close servers and resources.",
    "interview_tip": "Crucial for cloud/managed service deployments.",
    "references": ["https://nodejs.org/api/process.html#signal-events"],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-signal-handling"
  },
  {
    "id": 6062,
    "title": "Timers and setImmediate",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What does setImmediate() do compared to setTimeout(fn, 0) in Node.js?",
    "options": [
      {
        "id": "a",
        "text": "Runs after I/O events while setTimeout waits for timer phase",
        "isCorrect": true
      },
      { "id": "b", "text": "They are identical", "isCorrect": false },
      {
        "id": "c",
        "text": "setImmediate blocks the event loop",
        "isCorrect": false
      }
    ],
    "explanation": "setImmediate runs callbacks after I/O, before timers; setTimeout schedules in timers phase.",
    "interview_tip": "Rarely matters, but can impact high-throughput apps.",
    "references": [
      "https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-setimmediate"
  },
  {
    "id": 6063,
    "title": "require.cache Manipulation",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "Why might you delete an entry from require.cache?",
    "options": [
      {
        "id": "a",
        "text": "To reload and re-evaluate a module",
        "isCorrect": true
      },
      { "id": "b", "text": "To speed up performance", "isCorrect": false },
      { "id": "c", "text": "It's required for all modules", "isCorrect": false }
    ],
    "explanation": "Clearing cache is useful for hot-reload during development.",
    "interview_tip": "Not recommended in production systems.",
    "references": ["https://nodejs.org/api/modules.html#requirecache"],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-require-cache-manipulate"
  },
  {
    "id": 6064,
    "title": "HTTP2 Support",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "Which module enables HTTP/2 server support in Node.js?",
    "options": [
      { "id": "a", "text": "http2", "isCorrect": true },
      { "id": "b", "text": "https", "isCorrect": false },
      { "id": "c", "text": "net", "isCorrect": false }
    ],
    "explanation": "http2 API provides better concurrency and performance via multiplexing.",
    "interview_tip": "Only supported in secure contexts (TLS/SSL).",
    "references": ["https://nodejs.org/api/http2.html"],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-http2"
  },
  {
    "id": 6065,
    "title": "Reading Large Files",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What approach is recommended for reading very large files without memory issues?",
    "options": [
      { "id": "a", "text": "Read using streams", "isCorrect": true },
      {
        "id": "b",
        "text": "Read synchronously with fs.readFileSync",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Load entire file with fs.readFile",
        "isCorrect": false
      }
    ],
    "explanation": "Streams process files in chunks rather than all at once.",
    "interview_tip": "fs.createReadStream() is standard.",
    "references": ["https://nodejs.org/api/fs.html#fscreateReadStream"],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-large-files"
  },
  {
    "id": 6066,
    "title": "Readline Module",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "Which built-in module provides an interface for reading data from a readable stream (e.g., process.stdin) one line at a time?",
    "options": [
      { "id": "a", "text": "readline", "isCorrect": true },
      { "id": "b", "text": "input", "isCorrect": false },
      { "id": "c", "text": "prompt", "isCorrect": false }
    ],
    "explanation": "readline creates line-by-line interfaces for user input and file parsing.",
    "interview_tip": "Used widely for command-line tools and parsers.",
    "references": ["https://nodejs.org/api/readline.html"],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-readline"
  },
  {
    "id": 6067,
    "title": "Microservices Communication",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "Which method is NOT suitable for Node.js service-to-service communication?",
    "options": [
      {
        "id": "a",
        "text": "Direct access to another process's in-memory variables",
        "isCorrect": true
      },
      { "id": "b", "text": "REST APIs", "isCorrect": false },
      { "id": "c", "text": "gRPC", "isCorrect": false }
    ],
    "explanation": "Processes are isolated; use network protocols like HTTP, gRPC, or message queues.",
    "interview_tip": "In-memory communication only works within a single process.",
    "references": [
      "https://nodejs.org/dist/latest-v18.x/docs/api/child_process.html"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-microservices"
  },
  {
    "id": 6068,
    "title": "Native Addon Modules",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What language are Node.js native addon modules typically written in?",
    "options": [
      { "id": "a", "text": "C or C++", "isCorrect": true },
      { "id": "b", "text": "Java", "isCorrect": false },
      { "id": "c", "text": "Go", "isCorrect": false }
    ],
    "explanation": "Native addons interface from JS to OS/hardware for performance.",
    "interview_tip": "Node Addon API and node-gyp are commonly used.",
    "references": ["https://nodejs.org/api/addons.html"],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-native-addon"
  },
  {
    "id": 6069,
    "title": "V8 Engine Usage",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What is the primary role of the V8 engine in Node.js?",
    "options": [
      {
        "id": "a",
        "text": "Compiles and executes JavaScript code",
        "isCorrect": true
      },
      { "id": "b", "text": "Handles I/O asynchronously", "isCorrect": false },
      { "id": "c", "text": "Manages npm packages", "isCorrect": false }
    ],
    "explanation": "The V8 engine is the JavaScript VM underlying Node.js.",
    "interview_tip": "Same engine as Chrome browser.",
    "references": [
      "https://nodejs.org/en/docs/guides/introduction-to-nodejs/#under-the-hood"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-v8"
  },
  {
    "id": 6018,
    "title": "npm install --save-dev",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is the purpose of the --save-dev flag when installing packages?",
    "options": [
      {
        "id": "a",
        "text": "Adds the package to devDependencies",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Installs the package globally",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Uninstalls the package after build",
        "isCorrect": false
      }
    ],
    "explanation": "Development dependencies are not installed in production unless explicitly requested.",
    "interview_tip": "Examples: testing libraries, bundlers.",
    "references": [
      "https://docs.npmjs.com/cli/v9/configuring-npm/package-json#devdependencies"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "node-npm-save-dev"
  },
  {
    "id": 6019,
    "title": "Process.stdout",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "Which object do you write to for standard output in Node.js?",
    "options": [
      { "id": "a", "text": "process.stdout", "isCorrect": true },
      { "id": "b", "text": "console.error", "isCorrect": false },
      { "id": "c", "text": "outputStream", "isCorrect": false }
    ],
    "explanation": "process.stdout is a writable stream for printing output.",
    "interview_tip": "process.stderr is for errors.",
    "references": ["https://nodejs.org/api/process.html#processstdout"],
    "timeLimit": 30,
    "points": 2,
    "slug": "node-process-stdout"
  },
  {
    "id": 6020,
    "title": "Child Process Module",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "Which module allows Node.js to spawn new OS processes?",
    "options": [
      { "id": "a", "text": "child_process", "isCorrect": true },
      { "id": "b", "text": "process_manager", "isCorrect": false },
      { "id": "c", "text": "fork", "isCorrect": false }
    ],
    "explanation": "child_process abstracts process creation and communication.",
    "interview_tip": "Methods include spawn, exec, fork.",
    "references": ["https://nodejs.org/api/child_process.html"],
    "timeLimit": 30,
    "points": 2,
    "slug": "node-child-process"
  },
  {
    "id": 6021,
    "title": "Express.js Use",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is Express.js for Node.js?",
    "options": [
      {
        "id": "a",
        "text": "A fast, minimal web application framework",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "A built-in module for networking",
        "isCorrect": false
      },
      { "id": "c", "text": "A template engine", "isCorrect": false }
    ],
    "explanation": "Express makes web servers and REST APIs easier with routing and middleware.",
    "interview_tip": "Despite popularity, it's not included in Node by default.",
    "references": ["https://expressjs.com/"],
    "timeLimit": 30,
    "points": 2,
    "slug": "node-express"
  },
  {
    "id": 6022,
    "title": "process.nextTick",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What does process.nextTick() do?",
    "options": [
      {
        "id": "a",
        "text": "Schedules a callback to run after the current operation completes",
        "isCorrect": true
      },
      { "id": "b", "text": "Pauses event loop", "isCorrect": false },
      { "id": "c", "text": "Starts the process", "isCorrect": false }
    ],
    "explanation": "Runs before other I/O events and timers.",
    "interview_tip": "process.nextTick callbacks always fire before setTimeout(…,0).",
    "references": [
      "https://nodejs.org/api/process.html#processnexttickcallback-args"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "node-nexttick"
  },
  {
    "id": 6023,
    "title": "Parsing Query Params",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "Which module parses URL query strings?",
    "options": [
      { "id": "a", "text": "querystring", "isCorrect": true },
      { "id": "b", "text": "urlparser", "isCorrect": false },
      { "id": "c", "text": "fs", "isCorrect": false }
    ],
    "explanation": "querystring provides parse() and stringify().",
    "interview_tip": "The new URL API is often preferred in modern Node.",
    "references": ["https://nodejs.org/api/querystring.html"],
    "timeLimit": 30,
    "points": 2,
    "slug": "node-querystring"
  },
  {
    "id": 6024,
    "title": "Unhandled Promise Rejection",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What happens if a Promise is rejected and not caught in Node.js?",
    "options": [
      {
        "id": "a",
        "text": "An 'unhandledRejection' event is emitted",
        "isCorrect": true
      },
      { "id": "b", "text": "Node.js crashes", "isCorrect": false },
      { "id": "c", "text": "Promise is silently ignored", "isCorrect": false }
    ],
    "explanation": "You can process.on('unhandledRejection') for logging or handling.",
    "interview_tip": "Node 15+ may exit on unhandledRejection by default.",
    "references": [
      "https://nodejs.org/api/process.html#event-unhandledrejection"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "node-unhandled-rejection"
  },
  {
    "id": 6025,
    "title": "Global Process Object",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is process.argv used for?",
    "options": [
      {
        "id": "a",
        "text": "Array of command-line arguments passed to Node",
        "isCorrect": true
      },
      { "id": "b", "text": "Environment variables", "isCorrect": false },
      { "id": "c", "text": "Process exit code", "isCorrect": false }
    ],
    "explanation": "process.argv[0] is node, argv[1] is the file, rest are arguments.",
    "interview_tip": "Use libraries like minimist or yargs to parse argv.",
    "references": ["https://nodejs.org/api/process.html#processargv"],
    "timeLimit": 30,
    "points": 2,
    "slug": "node-argv"
  },
  {
    "id": 6026,
    "title": "Cluster Module",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is the Node.js cluster module used for?",
    "options": [
      {
        "id": "a",
        "text": "Running multiple processes to utilize multi-core CPUs",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Managing environment variables",
        "isCorrect": false
      },
      { "id": "c", "text": "Creating async functions", "isCorrect": false }
    ],
    "explanation": "Clusters can fork multiple worker processes for parallelism.",
    "interview_tip": "Great for horizontal scaling on a single machine.",
    "references": ["https://nodejs.org/api/cluster.html"],
    "timeLimit": 30,
    "points": 2,
    "slug": "node-cluster"
  },
  {
    "id": 6027,
    "title": "Path Module Purpose",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What does the 'path' module help you do in Node.js?",
    "options": [
      {
        "id": "a",
        "text": "Manipulate file and directory paths",
        "isCorrect": true
      },
      { "id": "b", "text": "Read file contents", "isCorrect": false },
      { "id": "c", "text": "Parse JSON", "isCorrect": false }
    ],
    "explanation": "path handles platform-specific slashes, joins, resolves, etc.",
    "interview_tip": "Use path.join() for OS-independent paths.",
    "references": ["https://nodejs.org/api/path.html"],
    "timeLimit": 30,
    "points": 2,
    "slug": "node-path"
  },
  {
    "id": 6028,
    "title": "DNS Lookup",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "Which module is used to perform DNS lookups in Node.js?",
    "options": [
      { "id": "a", "text": "dns", "isCorrect": true },
      { "id": "b", "text": "net", "isCorrect": false },
      { "id": "c", "text": "lookup", "isCorrect": false }
    ],
    "explanation": "dns.lookup and dns.resolve support name resolution.",
    "interview_tip": "Use dns for both sync and async DNS lookup.",
    "references": ["https://nodejs.org/api/dns.html"],
    "timeLimit": 30,
    "points": 2,
    "slug": "node-dns"
  },
  {
    "id": 6029,
    "title": "Setting HTTP Headers",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "How do you set an HTTP response header using the http module?",
    "options": [
      {
        "id": "a",
        "text": "res.setHeader('Content-Type', 'text/html')",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "res.header('Content-Type', 'text/html')",
        "isCorrect": false
      },
      { "id": "c", "text": "res.headers.add(...)", "isCorrect": false }
    ],
    "explanation": "setHeader() sets headers before response is sent.",
    "interview_tip": "Headers must be set before res.end().",
    "references": [
      "https://nodejs.org/api/http.html#response-setheader-name-value"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "node-http-header"
  },
  {
    "id": 6030,
    "title": "Streaming Data",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is the advantage of using streams in Node.js?",
    "options": [
      {
        "id": "a",
        "text": "Efficiently handle large data by processing it chunk by chunk",
        "isCorrect": true
      },
      { "id": "b", "text": "Synchronous code only", "isCorrect": false },
      { "id": "c", "text": "Only used for logging", "isCorrect": false }
    ],
    "explanation": "Streams are memory efficient for large files and network traffic.",
    "interview_tip": "Readable, Writable, Duplex, Transform are main stream types.",
    "references": ["https://nodejs.org/api/stream.html"],
    "timeLimit": 30,
    "points": 2,
    "slug": "node-streams"
  },
  {
    "id": 6031,
    "title": "process.on('exit')",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What can you do during a 'process.on(\"exit\")' event?",
    "options": [
      {
        "id": "a",
        "text": "Synchronous operations only; no async code",
        "isCorrect": true
      },
      { "id": "b", "text": "Start an HTTP server", "isCorrect": false },
      {
        "id": "c",
        "text": "Write to database asynchronously",
        "isCorrect": false
      }
    ],
    "explanation": "Node exits once the exit handler returns; async work is not guaranteed.",
    "interview_tip": "Use exit for cleanup, never for async saves.",
    "references": ["https://nodejs.org/api/process.html#event-exit"],
    "timeLimit": 30,
    "points": 2,
    "slug": "node-exit-event"
  },
  {
    "id": 6032,
    "title": "ES Modules Support",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "How do you enable ES modules (import/export) in a Node.js project?",
    "options": [
      {
        "id": "a",
        "text": "Set 'type': 'module' in package.json or use .mjs extension",
        "isCorrect": true
      },
      { "id": "b", "text": "Enable via .eslintrc", "isCorrect": false },
      {
        "id": "c",
        "text": "Set 'module' flag in script tag",
        "isCorrect": false
      }
    ],
    "explanation": "Explicit module type or file extension is required for ESM support.",
    "interview_tip": "Mixing CommonJS and ESM has special caveats.",
    "references": ["https://nodejs.org/api/esm.html"],
    "timeLimit": 30,
    "points": 2,
    "slug": "node-esm"
  },
  {
    "id": 6033,
    "title": "require.resolve()",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What does require.resolve() return?",
    "options": [
      {
        "id": "a",
        "text": "The full resolved filename of a module",
        "isCorrect": true
      },
      { "id": "b", "text": "The module's exports", "isCorrect": false },
      { "id": "c", "text": "A URL to the module", "isCorrect": false }
    ],
    "explanation": "require.resolve returns the full file path Node will load.",
    "interview_tip": "Useful for inspecting how modules are resolved.",
    "references": ["https://nodejs.org/api/modules.html#requirereso..."],
    "timeLimit": 30,
    "points": 2,
    "slug": "node-require-resolve"
  },
  {
    "id": 6034,
    "title": "Crypto Module",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What is the crypto module in Node.js used for?",
    "options": [
      {
        "id": "a",
        "text": "Hashing, encryption, and cryptography functions",
        "isCorrect": true
      },
      { "id": "b", "text": "Password input only", "isCorrect": false },
      { "id": "c", "text": "Networking", "isCorrect": false }
    ],
    "explanation": "crypto offers secure hashing, signing, ciphers, etc.",
    "interview_tip": "Use for JWTs, passwords, or app secrets.",
    "references": ["https://nodejs.org/api/crypto.html"],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-crypto-module"
  },
  {
    "id": 6035,
    "title": "TLS/HTTPS Module",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "Which module is used to implement HTTPS servers in Node.js?",
    "options": [
      { "id": "a", "text": "https", "isCorrect": true },
      { "id": "b", "text": "crypto", "isCorrect": false },
      { "id": "c", "text": "ssl", "isCorrect": false }
    ],
    "explanation": "https is a Node.js core module built on top of http and tls for secure servers.",
    "interview_tip": "Requires SSL/TLS certificates.",
    "references": ["https://nodejs.org/api/https.html"],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-https"
  },
  {
    "id": 6036,
    "title": "Catching Exceptions",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "How do you catch unhandled exceptions globally in a Node.js app?",
    "options": [
      {
        "id": "a",
        "text": "process.on('uncaughtException', handler)",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "try/catch in the main file only",
        "isCorrect": false
      },
      { "id": "c", "text": "Promise.catch()", "isCorrect": false }
    ],
    "explanation": "process.on('uncaughtException') can prevent the app from instant exit. Use for logging; restart after fatal errors.",
    "interview_tip": "Best-practice: handle errors close to their source.",
    "references": [
      "https://nodejs.org/api/process.html#event-uncaughtexception"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-uncaught-exception"
  },
  {
    "id": 6037,
    "title": "require.main === module",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What does 'require.main === module' test for?",
    "options": [
      {
        "id": "a",
        "text": "If a file is run directly vs. required as a module",
        "isCorrect": true
      },
      { "id": "b", "text": "Module has submodules", "isCorrect": false },
      { "id": "c", "text": "Checks parent module's type", "isCorrect": false }
    ],
    "explanation": "Handy for running code only when not required by another file.",
    "interview_tip": "Enables usage as both CLI and library.",
    "references": [
      "https://nodejs.org/api/modules.html#accessing-the-main-module"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-require-main"
  },
  {
    "id": 6038,
    "title": "process.env.NODE_ENV",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What does setting NODE_ENV to 'production' do?",
    "options": [
      {
        "id": "a",
        "text": "Enables optimizations/disables dev features in many libraries",
        "isCorrect": true
      },
      { "id": "b", "text": "Switches to TypeScript mode", "isCorrect": false },
      { "id": "c", "text": "Forces process exit", "isCorrect": false }
    ],
    "explanation": "Common convention for switching config in frameworks/logger.",
    "interview_tip": "Default in Node is usually 'development'.",
    "references": [
      "https://nodejs.org/en/knowledge/getting-started/npm/what-is-the-node-environment-variable/"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-env"
  },
  {
    "id": 6039,
    "title": "require('os') module",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What does the os module provide in Node.js?",
    "options": [
      {
        "id": "a",
        "text": "OS-level info (CPUs, memory, platform, uptime, etc)",
        "isCorrect": true
      },
      { "id": "b", "text": "Websocket support", "isCorrect": false },
      { "id": "c", "text": "CLI argument parsing", "isCorrect": false }
    ],
    "explanation": "os is built-in and gives info for monitoring, logging, clustering.",
    "interview_tip": "Not for file system ops.",
    "references": ["https://nodejs.org/api/os.html"],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-os"
  },
  {
    "id": 6040,
    "title": "Child Process Communication",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "Which child process method allows two-way communication via message passing?",
    "options": [
      { "id": "a", "text": "fork()", "isCorrect": true },
      { "id": "b", "text": "spawn()", "isCorrect": false },
      { "id": "c", "text": "exec()", "isCorrect": false }
    ],
    "explanation": "child_process.fork() creates a process with IPC (inter-process communication) channel.",
    "interview_tip": "Common for cluster workers and background jobs.",
    "references": [
      "https://nodejs.org/api/child_process.html#child_processforkmodulepath-arguments-options"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-fork"
  },
  {
    "id": 6041,
    "title": "Debugger Integration",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "How do you start a Node.js app with the built-in debugger enabled?",
    "options": [
      { "id": "a", "text": "node --inspect app.js", "isCorrect": true },
      { "id": "b", "text": "node app.js --debug", "isCorrect": false },
      { "id": "c", "text": "npm run debug app.js", "isCorrect": false }
    ],
    "explanation": "--inspect opens V8 inspector for stepping through code.",
    "interview_tip": "Use Chrome DevTools or VSCode for inspecting live Node apps.",
    "references": [
      "https://nodejs.org/en/docs/guides/debugging-getting-started"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-debug"
  },
  {
    "id": 6042,
    "title": "Reading stdin",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "Which object provides access to standard input (stdin)?",
    "options": [
      { "id": "a", "text": "process.stdin", "isCorrect": true },
      { "id": "b", "text": "input.read()", "isCorrect": false },
      { "id": "c", "text": "fs.input", "isCorrect": false }
    ],
    "explanation": "process.stdin is a Readable stream for user or piped input.",
    "interview_tip": "Used for CLI prompts.",
    "references": ["https://nodejs.org/api/process.html#processstdin"],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-stdin"
  },
  {
    "id": 6043,
    "title": "require.main.filename",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What does require.main.filename provide in Node.js?",
    "options": [
      {
        "id": "a",
        "text": "Absolute path of the main module file",
        "isCorrect": true
      },
      { "id": "b", "text": "Parent module file", "isCorrect": false },
      { "id": "c", "text": "Relative path of any module", "isCorrect": false }
    ],
    "explanation": "Useful for locating the root file entry.",
    "interview_tip": "Different from __filename (in required module).",
    "references": [
      "https://nodejs.org/api/modules.html#accessing-the-main-module"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-main-filename"
  },
  {
    "id": 6044,
    "title": "Pipes in Streams",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What does the pipe() method accomplish in readable streams?",
    "options": [
      {
        "id": "a",
        "text": "Connects one stream's output to another's input",
        "isCorrect": true
      },
      { "id": "b", "text": "Emits an event", "isCorrect": false },
      { "id": "c", "text": "Saves memory", "isCorrect": false }
    ],
    "explanation": "pipe() transfers data from one stream to another, often used for file copy or network operations.",
    "interview_tip": "Automatically manages flow and backpressure during transfers.",
    "references": [
      "https://nodejs.org/api/stream.html#streampipedestination-options"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-pipe"
  },
  {
    "id": 6045,
    "title": "Unreferenced Timer",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What does calling unref() on a timer do?",
    "options": [
      {
        "id": "a",
        "text": "Allows the process to exit even if the timer is active",
        "isCorrect": true
      },
      { "id": "b", "text": "Restarts the timer", "isCorrect": false },
      { "id": "c", "text": "Cancels the timer immediately", "isCorrect": false }
    ],
    "explanation": "unref() lets Node exit naturally if it is the only thing keeping the process alive.",
    "interview_tip": "Useful for background timers and idle shutdown logic.",
    "references": ["https://nodejs.org/api/timers.html#timeoutunref"],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-timer-unref"
  },
  {
    "id": 6046,
    "title": "Detecting Memory Leaks",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "Which built-in tool can help detect memory leaks in Node.js processes?",
    "options": [
      {
        "id": "a",
        "text": "process.memoryUsage() stats combined with external profilers",
        "isCorrect": true
      },
      { "id": "b", "text": "dns module", "isCorrect": false },
      { "id": "c", "text": "path.resolver()", "isCorrect": false }
    ],
    "explanation": "process.memoryUsage() provides insights into heap and RSS usage for profiling.",
    "interview_tip": "External tools and heap snapshots provide deeper analysis.",
    "references": ["https://nodejs.org/api/process.html#processmemoryusage"],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-memory-usage"
  },
  {
    "id": 6047,
    "title": "CORS Handling",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "How can you handle Cross-Origin Resource Sharing (CORS) in a Node.js app?",
    "options": [
      {
        "id": "a",
        "text": "Set appropriate headers (Access-Control-Allow-*) or use the 'cors' middleware",
        "isCorrect": true
      },
      { "id": "b", "text": "Use global variable ONLY", "isCorrect": false },
      { "id": "c", "text": "Change port number", "isCorrect": false }
    ],
    "explanation": "Setting CORS headers manually or using dedicated middleware allows cross-origin AJAX/Web requests.",
    "interview_tip": "CORS issues are browser-side, not Node-specific.",
    "references": ["https://expressjs.com/en/resources/middleware/cors.html"],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-cors"
  },
  {
    "id": 6048,
    "title": "Promise.resolve() Use",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What does Promise.resolve(value) do?",
    "options": [
      {
        "id": "a",
        "text": "Returns a promise that is resolved with the value immediately",
        "isCorrect": true
      },
      { "id": "b", "text": "Pauses event loop", "isCorrect": false },
      { "id": "c", "text": "Throws an error", "isCorrect": false }
    ],
    "explanation": "Creates a promise resolved with the given value, useful for normalizing sync values to promise chains.",
    "interview_tip": "Promise.reject(value) creates an immediately rejected promise.",
    "references": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-promise-resolve"
  },
  {
    "id": 6049,
    "title": "Worker Threads Module",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What is the worker_threads module for?",
    "options": [
      {
        "id": "a",
        "text": "Spawning threads for CPU-intensive JavaScript tasks",
        "isCorrect": true
      },
      { "id": "b", "text": "Cleaning up memory", "isCorrect": false },
      { "id": "c", "text": "Controlling server listeners", "isCorrect": false }
    ],
    "explanation": "worker_threads enables true multi-threading for CPU-bound work.",
    "interview_tip": "Use for operations unsuitable for the event loop.",
    "references": ["https://nodejs.org/api/worker_threads.html"],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-worker-threads"
  },
  {
    "id": 6050,
    "title": "Cluster Worker Master Communication",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "How do cluster workers communicate with their master process?",
    "options": [
      {
        "id": "a",
        "text": "Through messaging using process.send()",
        "isCorrect": true
      },
      { "id": "b", "text": "Upstream HTTP requests", "isCorrect": false },
      { "id": "c", "text": "Shared file system queue", "isCorrect": false }
    ],
    "explanation": "process.send() enables message-based IPC between master and worker processes.",
    "interview_tip": "Perfect for coordination and job distribution.",
    "references": [
      "https://nodejs.org/api/cluster.html#workerprocesssendmessage-sendhandle-options-callback"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-cluster-comm"
  },
  {
    "id": 6051,
    "title": "Asynchronous Iteration",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What enables using 'for await...of' to iterate in Node.js?",
    "options": [
      {
        "id": "a",
        "text": "Async Iterators/Generator protocol",
        "isCorrect": true
      },
      { "id": "b", "text": "Promise chains only", "isCorrect": false },
      { "id": "c", "text": "Observables", "isCorrect": false }
    ],
    "explanation": "Streams and other async data sources expose the async iterator interface.",
    "interview_tip": "Extremely useful for working with stream data.",
    "references": [
      "https://nodejs.org/api/async_hooks.html#asynchronous-iteration"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-for-await"
  },
  {
    "id": 6052,
    "title": "UnhandledPromiseRejection Capture",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "How can you globally handle unhandled promise rejections in Node.js?",
    "options": [
      {
        "id": "a",
        "text": "Listen to the 'unhandledRejection' event on process",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Wrap all promises in try-catch",
        "isCorrect": false
      },
      { "id": "c", "text": "There’s no global handler", "isCorrect": false }
    ],
    "explanation": "process.on('unhandledRejection', handler) captures promise errors for logging or handling.",
    "interview_tip": "Abnormal exit is default in recent Node versions; always handle errors locally where possible.",
    "references": [
      "https://nodejs.org/api/process.html#event-unhandledrejection"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-unhandled-rejection-global"
  },
  {
    "id": 6053,
    "title": "npm link Usage",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What is the npm link command used for?",
    "options": [
      {
        "id": "a",
        "text": "Creates a global symlink to local packages for development",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Links all dependencies recursively",
        "isCorrect": false
      },
      { "id": "c", "text": "Links npm with the server", "isCorrect": false }
    ],
    "explanation": "npm link is ideal for live testing and debugging local packages.",
    "interview_tip": "Unlink after development to avoid unexpected version mismatches.",
    "references": ["https://docs.npmjs.com/cli/v9/commands/npm-link"],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-npm-link"
  },
  {
    "id": 6054,
    "title": "process.hrtime() Purpose",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "Why would you use process.hrtime() instead of Date.now() for timing?",
    "options": [
      {
        "id": "a",
        "text": "High-resolution time for benchmarking and profiling",
        "isCorrect": true
      },
      { "id": "b", "text": "Gets timezone offset", "isCorrect": false },
      { "id": "c", "text": "Returns a string", "isCorrect": false }
    ],
    "explanation": "process.hrtime delivers nanosecond-precision for effective benchmarking.",
    "interview_tip": "Best for fine-grained performance analysis.",
    "references": ["https://nodejs.org/api/process.html#processhrtimetime"],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-hrtime"
  },
  {
    "id": 6055,
    "title": "Inspecting Installed Packages",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "How do you list all globally installed npm packages?",
    "options": [
      { "id": "a", "text": "npm list -g --depth=0", "isCorrect": true },
      { "id": "b", "text": "npm install -g list", "isCorrect": false },
      { "id": "c", "text": "npm global-list", "isCorrect": false }
    ],
    "explanation": "The -g flag lists global, while --depth=0 limits the output to top-level packages.",
    "interview_tip": "Useful for debugging global dependency conflicts.",
    "references": ["https://docs.npmjs.com/cli/v9/commands/npm-list"],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-npm-list"
  },
  {
    "id": 6056,
    "title": "node_modules Resolution",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "How does Node.js resolve a required module if it’s not found in the local node_modules?",
    "options": [
      {
        "id": "a",
        "text": "Walks up to parent directories toward root, searching node_modules folders",
        "isCorrect": true
      },
      { "id": "b", "text": "Throws an error instantly", "isCorrect": false },
      { "id": "c", "text": "Checks only global modules", "isCorrect": false }
    ],
    "explanation": "Node resolves modules by traversing up the directory tree, making monorepo and multi-module support easy.",
    "interview_tip": "This process allows local overrides of shared dependencies.",
    "references": ["https://nodejs.org/api/modules.html#all-together"],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-module-resolution"
  },
  {
    "id": 6057,
    "title": "npm Scripts Pre/Post Hooks",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "How do npm pre- and post-scripts work?",
    "options": [
      {
        "id": "a",
        "text": "npm runs pre<command> before and post<command> after a named script automatically",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Scripts must be manually chained",
        "isCorrect": false
      },
      { "id": "c", "text": "Work only with test scripts", "isCorrect": false }
    ],
    "explanation": "These lifecycle hooks provide automation for build, test, deploy steps.",
    "interview_tip": "Follow exact script naming conventions for automatic execution.",
    "references": [
      "https://docs.npmjs.com/cli/v9/using-npm/scripts#life-cycle-scripts"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-pre-post-script"
  },
  {
    "id": 6058,
    "title": "node --experimental-modules",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What does the --experimental-modules flag do (in older Node versions)?",
    "options": [
      {
        "id": "a",
        "text": "Enables ES6 import/export module syntax",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Starts experimental npm features",
        "isCorrect": false
      },
      { "id": "c", "text": "Runs as experimental thread", "isCorrect": false }
    ],
    "explanation": "Older Node.js needed this flag to test ES modules; now use 'type: module' in package.json.",
    "interview_tip": "Mixed ESM/CommonJS code must be structured carefully.",
    "references": ["https://nodejs.org/api/esm.html#enabling"],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-experimental-modules"
  },
  {
    "id": 6059,
    "title": "npm ci Command",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What is the main use-case of the 'npm ci' command?",
    "options": [
      {
        "id": "a",
        "text": "Clean install dependencies from package-lock.json for repeatable builds",
        "isCorrect": true
      },
      { "id": "b", "text": "Install only devDependencies", "isCorrect": false },
      { "id": "c", "text": "Initialize a new project", "isCorrect": false }
    ],
    "explanation": "npm ci installs exactly what's in the lockfile, great for CI/CD pipelines and repeatability.",
    "interview_tip": "Removes node_modules, avoids updating package-lock.json.",
    "references": ["https://docs.npmjs.com/cli/v9/commands/npm-ci"],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-npm-ci"
  },
  {
    "id": 6060,
    "title": "Ping vs. TCP Connections",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "Which module would you use to programmatically open a TCP socket in Node.js?",
    "options": [
      { "id": "a", "text": "net", "isCorrect": true },
      { "id": "b", "text": "http", "isCorrect": false },
      { "id": "c", "text": "os", "isCorrect": false }
    ],
    "explanation": "The net module handles TCP network sockets and connections.",
    "interview_tip": "Supports raw binary transmissions and custom protocols.",
    "references": ["https://nodejs.org/api/net.html"],
    "timeLimit": 30,
    "points": 3,
    "slug": "node-net-module"
  },
  {
    "id": 7000,
    "title": "Array Indexing",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "What is the index of the first element in a zero-based array?",
    "options": [
      { "id": "a", "text": "0", "isCorrect": true },
      { "id": "b", "text": "1", "isCorrect": false },
      { "id": "c", "text": "-1", "isCorrect": false }
    ],
    "explanation": "Zero-based indexing means the first element is at index 0.",
    "interview_tip": "Many popular languages (C, Java, Python, JS) use zero-based arrays.",
    "references": ["https://en.wikipedia.org/wiki/Zero-based_numbering"],
    "timeLimit": 30,
    "points": 1,
    "slug": "array-indexing"
  },
  {
    "id": 7001,
    "title": "Stack Basic Property",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Which data structure uses the LIFO (Last-In, First-Out) principle?",
    "options": [
      { "id": "a", "text": "Stack", "isCorrect": true },
      { "id": "b", "text": "Queue", "isCorrect": false },
      { "id": "c", "text": "Array", "isCorrect": false }
    ],
    "explanation": "Stack allows access only to the last added element.",
    "interview_tip": "Functions/method calls use call stacks.",
    "references": ["https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"],
    "timeLimit": 30,
    "points": 1,
    "slug": "stack-lifo"
  },
  {
    "id": 7002,
    "title": "Queue Basic Property",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Which data structure does FIFO (First-In, First-Out) describe?",
    "options": [
      { "id": "a", "text": "Queue", "isCorrect": true },
      { "id": "b", "text": "Stack", "isCorrect": false },
      { "id": "c", "text": "Tree", "isCorrect": false }
    ],
    "explanation": "Queues process items in the order they arrive.",
    "interview_tip": "Print jobs use queues.",
    "references": ["https://en.wikipedia.org/wiki/Queue_(abstract_data_type)"],
    "timeLimit": 30,
    "points": 1,
    "slug": "queue-fifo"
  },
  {
    "id": 7003,
    "title": "Linked List Node",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "What does a node in a singly linked list typically contain?",
    "options": [
      {
        "id": "a",
        "text": "Value and a reference to the next node",
        "isCorrect": true
      },
      { "id": "b", "text": "Only a value", "isCorrect": false },
      { "id": "c", "text": "Two references", "isCorrect": false }
    ],
    "explanation": "Each node points to the next node until the end.",
    "interview_tip": "The last node next reference is NULL.",
    "references": ["https://en.wikipedia.org/wiki/Linked_list"],
    "timeLimit": 30,
    "points": 1,
    "slug": "singly-linked-list-node"
  },
  {
    "id": 7004,
    "title": "Binary Search Precondition",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "What must be true about an array to use binary search on it?",
    "options": [
      { "id": "a", "text": "It must be sorted", "isCorrect": true },
      { "id": "b", "text": "It must have unique elements", "isCorrect": false },
      { "id": "c", "text": "It must be reversed", "isCorrect": false }
    ],
    "explanation": "Binary search halves a sorted array to find a value.",
    "interview_tip": "Always check sort before using binary search.",
    "references": ["https://en.wikipedia.org/wiki/Binary_search_algorithm"],
    "timeLimit": 30,
    "points": 1,
    "slug": "binary-search-precondition"
  },
  {
    "id": 7005,
    "title": "Recursion Definition",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "What is recursion?",
    "options": [
      { "id": "a", "text": "A function calling itself", "isCorrect": true },
      { "id": "b", "text": "Looping with for/while", "isCorrect": false },
      { "id": "c", "text": "Calling a global variable", "isCorrect": false }
    ],
    "explanation": "Recursive functions have a base case terminating the call chain.",
    "interview_tip": "Always avoid infinite recursion by defining base/exit conditions.",
    "references": [
      "https://en.wikipedia.org/wiki/Recursion_(computer_science)"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "recursion-basic"
  },
  {
    "id": 7006,
    "title": "Big O of Array Search",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "What is the time complexity of unsorted array linear search?",
    "options": [
      { "id": "a", "text": "O(n)", "isCorrect": true },
      { "id": "b", "text": "O(1)", "isCorrect": false },
      { "id": "c", "text": "O(log n)", "isCorrect": false }
    ],
    "explanation": "Every element may need to be checked.",
    "interview_tip": "Worst case: target is last element or missing.",
    "references": ["https://en.wikipedia.org/wiki/Linear_search"],
    "timeLimit": 30,
    "points": 1,
    "slug": "array-search-big-o"
  },
  {
    "id": 7007,
    "title": "Hash Table Fast Case",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "What is the average time complexity for lookup in a hash table (no collisions)?",
    "options": [
      { "id": "a", "text": "O(1)", "isCorrect": true },
      { "id": "b", "text": "O(n)", "isCorrect": false },
      { "id": "c", "text": "O(n log n)", "isCorrect": false }
    ],
    "explanation": "No collisions: lookups are usually constant time.",
    "interview_tip": "Collisions increase lookup cost.",
    "references": ["https://en.wikipedia.org/wiki/Hash_table"],
    "timeLimit": 30,
    "points": 1,
    "slug": "hashtable-lookup"
  },
  {
    "id": 7008,
    "title": "Tree Node Degree",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "What is the degree of a tree node?",
    "options": [
      { "id": "a", "text": "Number of children", "isCorrect": true },
      { "id": "b", "text": "Number of ancestors", "isCorrect": false },
      { "id": "c", "text": "Number of siblings", "isCorrect": false }
    ],
    "explanation": "A node’s degree equals its outgoing edges (children count).",
    "interview_tip": "Leaves have degree 0.",
    "references": ["https://en.wikipedia.org/wiki/Tree_(data_structure)"],
    "timeLimit": 30,
    "points": 1,
    "slug": "tree-node-degree"
  },
  {
    "id": 7009,
    "title": "BST Inorder Traversal",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Which traversal of a Binary Search Tree gives nodes in sorted order?",
    "options": [
      { "id": "a", "text": "Inorder", "isCorrect": true },
      { "id": "b", "text": "Preorder", "isCorrect": false },
      { "id": "c", "text": "Postorder", "isCorrect": false }
    ],
    "explanation": "Inorder traverses left–root–right for BST, yielding a sorted sequence.",
    "interview_tip": "A classic interview favorite!",
    "references": [
      "https://en.wikipedia.org/wiki/Binary_search_tree#Traversal"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "bst-inorder"
  },
  {
    "id": 7010,
    "title": "Graph Edge Types",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "What does an undirected graph edge connect?",
    "options": [
      {
        "id": "a",
        "text": "Two vertices with no direction",
        "isCorrect": true
      },
      { "id": "b", "text": "A root to its leaf", "isCorrect": false },
      { "id": "c", "text": "A node to itself only", "isCorrect": false }
    ],
    "explanation": "Undirected edges have no start or end; relationship is bidirectional.",
    "interview_tip": "Directed graphs: edge has a direction.",
    "references": [
      "https://en.wikipedia.org/wiki/Graph_(discrete_mathematics)"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "undirected-graph-edge"
  },
  {
    "id": 7011,
    "title": "Heap Structure",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "A min heap’s root always contains:",
    "options": [
      { "id": "a", "text": "The minimum value", "isCorrect": true },
      { "id": "b", "text": "The maximum value", "isCorrect": false },
      { "id": "c", "text": "Parent node only", "isCorrect": false }
    ],
    "explanation": "By heap property, the smallest value is always at the root node.",
    "interview_tip": "Priority queues often use heaps.",
    "references": ["https://en.wikipedia.org/wiki/Heap_(data_structure)"],
    "timeLimit": 30,
    "points": 1,
    "slug": "min-heap-root"
  },
  {
    "id": 7012,
    "title": "Linear vs Non-Linear",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Which is NOT a linear data structure?",
    "options": [
      { "id": "a", "text": "Binary Tree", "isCorrect": true },
      { "id": "b", "text": "Array", "isCorrect": false },
      { "id": "c", "text": "Queue", "isCorrect": false }
    ],
    "explanation": "Trees/graphs are non-linear; arrays, stacks, and queues are linear.",
    "interview_tip": "Linear: single path from start to end.",
    "references": [
      "https://www.geeksforgeeks.org/difference-between-linear-and-non-linear-data-structures/"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "linear-vs-nonlinear"
  },
  {
    "id": 7013,
    "title": "Stack Top Operation",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "What is the typical name for viewing the most recently added stack element?",
    "options": [
      { "id": "a", "text": "Peek or Top", "isCorrect": true },
      { "id": "b", "text": "Enqueue", "isCorrect": false },
      { "id": "c", "text": "Tail", "isCorrect": false }
    ],
    "explanation": "Peek/Top returns top item without removing it.",
    "interview_tip": "Push adds, pop removes.",
    "references": ["https://en.wikipedia.org/wiki/Stack_(abstract_data_type)"],
    "timeLimit": 30,
    "points": 1,
    "slug": "stack-peek"
  },
  {
    "id": 7014,
    "title": "Queue Insert and Remove",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Which queue operation removes an element?",
    "options": [
      { "id": "a", "text": "Dequeue", "isCorrect": true },
      { "id": "b", "text": "Enqueue", "isCorrect": false },
      { "id": "c", "text": "Pop", "isCorrect": false }
    ],
    "explanation": "“Enqueue” inserts at the rear; “dequeue” removes from the front.",
    "interview_tip": "Pop is used for stack removals.",
    "references": ["https://en.wikipedia.org/wiki/Queue_(abstract_data_type)"],
    "timeLimit": 30,
    "points": 1,
    "slug": "queue-dequeue"
  },
  {
    "id": 7015,
    "title": "Tree Height Definition",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Height of a tree is defined as:",
    "options": [
      {
        "id": "a",
        "text": "Length of longest path from root to any leaf",
        "isCorrect": true
      },
      { "id": "b", "text": "Number of leaf nodes", "isCorrect": false },
      { "id": "c", "text": "Number of branches at root", "isCorrect": false }
    ],
    "explanation": "Height counts edges or levels from root to the lowest leaf.",
    "interview_tip": "Height of a tree with one node is 0.",
    "references": ["https://en.wikipedia.org/wiki/Tree_(data_structure)"],
    "timeLimit": 30,
    "points": 1,
    "slug": "tree-height"
  },
  {
    "id": 7016,
    "title": "Graph Connectivity",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "What is a connected graph?",
    "options": [
      {
        "id": "a",
        "text": "There is a path between every pair of vertices",
        "isCorrect": true
      },
      { "id": "b", "text": "Each node has two edges", "isCorrect": false },
      { "id": "c", "text": "All vertices are leaves", "isCorrect": false }
    ],
    "explanation": "Connected graphs enable traversal from any node to any other.",
    "interview_tip": "A disconnected graph has isolated nodes/components.",
    "references": ["https://en.wikipedia.org/wiki/Connectivity_(graph_theory)"],
    "timeLimit": 30,
    "points": 1,
    "slug": "graph-connected"
  },
  {
    "id": 7017,
    "title": "Push and Pop",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "The 'push' and 'pop' operations are related to which structure?",
    "options": [
      { "id": "a", "text": "Stack", "isCorrect": true },
      { "id": "b", "text": "Queue", "isCorrect": false },
      { "id": "c", "text": "Heap", "isCorrect": false }
    ],
    "explanation": "Push inserts, pop removes the top item of a stack.",
    "interview_tip": "If you see push/pop, think stack.",
    "references": [
      "https://en.wikipedia.org/wiki/Stack_(abstract_data_type)#Operations"
    ],
    "timeLimit": 30,
    "points": 1,
    "slug": "stack-push-pop"
  },
  {
    "id": 7018,
    "title": "Array Fixed Size",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "What property distinguishes an array from a linked list?",
    "options": [
      {
        "id": "a",
        "text": "Arrays have fixed size; linked lists are dynamic",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Linked list elements are contiguous",
        "isCorrect": false
      },
      { "id": "c", "text": "Arrays are non-linear", "isCorrect": false }
    ],
    "explanation": "Arrays are allocated with a size; linked lists grow and shrink flexibly.",
    "interview_tip": "If unsure about future size, use a linked list.",
    "references": ["https://www.geeksforgeeks.org/g-fact-10/"],
    "timeLimit": 30,
    "points": 1,
    "slug": "array-vs-linkedlist"
  },
  {
    "id": 7019,
    "title": "Finding Duplicates",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Which data structure is best for checking if a list contains duplicates efficiently?",
    "options": [
      { "id": "a", "text": "Hash set", "isCorrect": true },
      { "id": "b", "text": "Array", "isCorrect": false },
      { "id": "c", "text": "Queue", "isCorrect": false }
    ],
    "explanation": "Insert into set and check existence: O(1) avg time.",
    "interview_tip": "O(n) using extra space, O(n²) without it.",
    "references": ["https://en.wikipedia.org/wiki/Hash_table"],
    "timeLimit": 30,
    "points": 1,
    "slug": "set-duplicates"
  },
  {
    "id": 7020,
    "title": "Circular Queue Advantage",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "What is a main advantage of a circular queue over a standard queue?",
    "options": [
      { "id": "a", "text": "Efficient reuse of free space", "isCorrect": true },
      { "id": "b", "text": "Requires less initialization", "isCorrect": false },
      { "id": "c", "text": "Supports stack operations", "isCorrect": false }
    ],
    "explanation": "Circular queues wrap the rear pointer to the front, using idle slots.",
    "interview_tip": "Prevents wasted slots due to dequeue operations.",
    "references": ["https://en.wikipedia.org/wiki/Circular_buffer"],
    "timeLimit": 30,
    "points": 2,
    "slug": "circular-queue-adv"
  },
  {
    "id": 7021,
    "title": "Deque Operations",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "What operation is unique to a deque (double-ended queue)?",
    "options": [
      {
        "id": "a",
        "text": "Insertion/removal at both front and rear",
        "isCorrect": true
      },
      { "id": "b", "text": "Fixed size", "isCorrect": false },
      { "id": "c", "text": "Binary search", "isCorrect": false }
    ],
    "explanation": "Deque allows O(1) push/pop from both ends.",
    "interview_tip": "Useful for sliding window problems.",
    "references": ["https://en.wikipedia.org/wiki/Double-ended_queue"],
    "timeLimit": 30,
    "points": 2,
    "slug": "deque-ops"
  },
  {
    "id": 7022,
    "title": "Linked List Tail Insert Time",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "What is the time complexity to insert an element at the end of a singly linked list (no tail pointer)?",
    "options": [
      { "id": "a", "text": "O(n)", "isCorrect": true },
      { "id": "b", "text": "O(log n)", "isCorrect": false },
      { "id": "c", "text": "O(1)", "isCorrect": false }
    ],
    "explanation": "Must traverse list to reach the end if no tail.",
    "interview_tip": "Keep a tail pointer for O(1) insertions.",
    "references": [
      "https://www.geeksforgeeks.org/advantages-of-using-doubly-linked-list-over-singly-linked-list/"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "ll-tail-insert"
  },
  {
    "id": 7023,
    "title": "Hash Collisions Handling",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Which method is commonly used for handling hash collisions?",
    "options": [
      { "id": "a", "text": "Chaining with linked lists", "isCorrect": true },
      { "id": "b", "text": "Sorting the hash table", "isCorrect": false },
      { "id": "c", "text": "Ignoring collisions", "isCorrect": false }
    ],
    "explanation": "Colliding elements form a linked list at the bucket.",
    "interview_tip": "Open addressing is another alternative.",
    "references": [
      "https://en.wikipedia.org/wiki/Hash_table#Collision_resolution"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "hash-collision-chaining"
  },
  {
    "id": 7024,
    "title": "Queue by Array Drawback",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "What is a main drawback of implementing a queue with a simple array?",
    "options": [
      {
        "id": "a",
        "text": "Wasted space at the front after many dequeues",
        "isCorrect": true
      },
      { "id": "b", "text": "Enqueue always fails", "isCorrect": false },
      { "id": "c", "text": "Only LIFO is allowed", "isCorrect": false }
    ],
    "explanation": "Unless shifted/circular, dequeued slots are wasted.",
    "interview_tip": "Circular array solves this.",
    "references": ["https://www.programiz.com/dsa/circular-queue"],
    "timeLimit": 30,
    "points": 2,
    "slug": "queue-array-drawback"
  },
  {
    "id": 7025,
    "title": "Depth-First Search (DFS)",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Which data structure is typically used to implement DFS in graphs?",
    "options": [
      { "id": "a", "text": "Stack (can be via recursion)", "isCorrect": true },
      { "id": "b", "text": "Queue", "isCorrect": false },
      { "id": "c", "text": "Priority Queue", "isCorrect": false }
    ],
    "explanation": "DFS explores as deep as possible before backtracking; recursion or explicit stack used.",
    "interview_tip": "DFS can be implemented iteratively with a stack, or recursively.",
    "references": ["https://en.wikipedia.org/wiki/Depth-first_search"],
    "timeLimit": 30,
    "points": 2,
    "slug": "dfs-stack"
  },
  {
    "id": 7026,
    "title": "BFS Level Order",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Which algorithm traverses a tree level by level?",
    "options": [
      { "id": "a", "text": "Breadth-First Search (BFS)", "isCorrect": true },
      { "id": "b", "text": "Depth-First Search (DFS)", "isCorrect": false },
      { "id": "c", "text": "Binary Search", "isCorrect": false }
    ],
    "explanation": "BFS uses a queue to visit all nodes at current depth before moving deeper.",
    "interview_tip": "Useful in finding shortest path or minimum moves.",
    "references": ["https://en.wikipedia.org/wiki/Breadth-first_search"],
    "timeLimit": 30,
    "points": 2,
    "slug": "bfs-level-order"
  },
  {
    "id": 7027,
    "title": "Stack for Expression Evaluation",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Which data structure is often used to evaluate arithmetic expressions in postfix (RPN) form?",
    "options": [
      { "id": "a", "text": "Stack", "isCorrect": true },
      { "id": "b", "text": "Queue", "isCorrect": false },
      { "id": "c", "text": "Tree", "isCorrect": false }
    ],
    "explanation": "Operands are pushed, operators pop operands and push results.",
    "interview_tip": "Classic problem for stack understanding.",
    "references": ["https://en.wikipedia.org/wiki/Reverse_Polish_notation"],
    "timeLimit": 30,
    "points": 2,
    "slug": "postfix-stack"
  },
  {
    "id": 7028,
    "title": "Binary Search Complexity",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "What is the time complexity of binary search?",
    "options": [
      { "id": "a", "text": "O(log n)", "isCorrect": true },
      { "id": "b", "text": "O(n)", "isCorrect": false },
      { "id": "c", "text": "O(n log n)", "isCorrect": false }
    ],
    "explanation": "Each comparison halves the search range.",
    "interview_tip": "Only works on sorted data!",
    "references": ["https://en.wikipedia.org/wiki/Binary_search_algorithm"],
    "timeLimit": 30,
    "points": 2,
    "slug": "binary-search-big-o"
  },
  {
    "id": 7029,
    "title": "Circular Linked List",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "How does a circular linked list differ from a standard singly linked list?",
    "options": [
      {
        "id": "a",
        "text": "Last node points back to the first node",
        "isCorrect": true
      },
      { "id": "b", "text": "Supports O(1) indexing", "isCorrect": false },
      { "id": "c", "text": "Nodes have two pointers", "isCorrect": false }
    ],
    "explanation": "Circular lists allow cycling through from end to start.",
    "interview_tip": "Used for round-robin scheduling.",
    "references": [
      "https://en.wikipedia.org/wiki/Linked_list#Circular_linked_lists"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "circular-linked-list"
  },
  {
    "id": 7030,
    "title": "Tree Traversal Order",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Which tree traversal visits root before its subtrees?",
    "options": [
      { "id": "a", "text": "Preorder", "isCorrect": true },
      { "id": "b", "text": "Inorder", "isCorrect": false },
      { "id": "c", "text": "Postorder", "isCorrect": false }
    ],
    "explanation": "Preorder visits root node, then left and right children.",
    "interview_tip": "Preorder is used for copying/downloading trees.",
    "references": ["https://en.wikipedia.org/wiki/Tree_traversal"],
    "timeLimit": 30,
    "points": 2,
    "slug": "preorder-traversal"
  },
  {
    "id": 7031,
    "title": "Heap Insert Complexity",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "What is the time complexity to insert an element into a binary heap?",
    "options": [
      { "id": "a", "text": "O(log n)", "isCorrect": true },
      { "id": "b", "text": "O(1)", "isCorrect": false },
      { "id": "c", "text": "O(n)", "isCorrect": false }
    ],
    "explanation": "Each insert may bubble up at most height of heap.",
    "interview_tip": "Heaps are often implemented using arrays.",
    "references": ["https://en.wikipedia.org/wiki/Binary_heap"],
    "timeLimit": 30,
    "points": 2,
    "slug": "heap-insert"
  },
  {
    "id": 7032,
    "title": "Graph Adjacency Matrix",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Which representation needs O(V^2) space for a graph?",
    "options": [
      { "id": "a", "text": "Adjacency Matrix", "isCorrect": true },
      { "id": "b", "text": "Adjacency List", "isCorrect": false },
      { "id": "c", "text": "Edge List", "isCorrect": false }
    ],
    "explanation": "Adjacency matrix is space-inefficient for sparse graphs.",
    "interview_tip": "Adjacency list saves space for most sparse graphs.",
    "references": ["https://en.wikipedia.org/wiki/Adjacency_matrix"],
    "timeLimit": 30,
    "points": 2,
    "slug": "adjacency-matrix"
  },
  {
    "id": 7033,
    "title": "Stack Minimum Constant Time",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "How can you design a stack that returns the minimum value in O(1) time?",
    "options": [
      {
        "id": "a",
        "text": "Use an auxiliary stack for mins",
        "isCorrect": true
      },
      { "id": "b", "text": "Keep all elements sorted", "isCorrect": false },
      {
        "id": "c",
        "text": "Traverse stack on every min query",
        "isCorrect": false
      }
    ],
    "explanation": "Push/pop min stack when value is new min or removed.",
    "interview_tip": "Popular technical interview follow-up!",
    "references": ["https://leetcode.com/problems/min-stack/"],
    "timeLimit": 30,
    "points": 2,
    "slug": "stack-min-o1"
  },
  {
    "id": 7034,
    "title": "Trie Use",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "What is a key use case for a Trie data structure?",
    "options": [
      {
        "id": "a",
        "text": "Storing and searching strings/prefixes efficiently",
        "isCorrect": true
      },
      { "id": "b", "text": "Counting sorted numbers", "isCorrect": false },
      { "id": "c", "text": "Path-finding in graphs", "isCorrect": false }
    ],
    "explanation": "Tries store characters/strings for fast prefix search and dictionary lookup.",
    "interview_tip": "Autocomplete and spell-check use tries.",
    "references": ["https://en.wikipedia.org/wiki/Trie"],
    "timeLimit": 30,
    "points": 2,
    "slug": "trie-use"
  },
  {
    "id": 7035,
    "title": "Dynamic Array Resize",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "When a dynamic array (vector) is full, what usually happens?",
    "options": [
      {
        "id": "a",
        "text": "Capacity grows, copying old items to new storage",
        "isCorrect": true
      },
      { "id": "b", "text": "Insert fails", "isCorrect": false },
      { "id": "c", "text": "All items deleted", "isCorrect": false }
    ],
    "explanation": "A full dynamic array allocates more space and copies contents.",
    "interview_tip": "Amortized insert time remains O(1) due to doubling strategy.",
    "references": ["https://en.wikipedia.org/wiki/Dynamic_array"],
    "timeLimit": 30,
    "points": 2,
    "slug": "dynamic-array-resize"
  },
  {
    "id": 7036,
    "title": "Priority Queue Implementation",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Which structure is commonly used to implement a priority queue?",
    "options": [
      { "id": "a", "text": "Heap", "isCorrect": true },
      { "id": "b", "text": "Graph", "isCorrect": false },
      { "id": "c", "text": "Queue", "isCorrect": false }
    ],
    "explanation": "Heaps efficiently reorder for O(log n) insert/extract-min/max.",
    "interview_tip": "Used in Dijkstra, A* and scheduling.",
    "references": ["https://en.wikipedia.org/wiki/Priority_queue"],
    "timeLimit": 30,
    "points": 2,
    "slug": "priority-queue-heap"
  },
  {
    "id": 7037,
    "title": "Matrix Diagonal Traversal",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "How many diagonals does an N x N matrix have?",
    "options": [
      { "id": "a", "text": "2N - 1", "isCorrect": true },
      { "id": "b", "text": "N", "isCorrect": false },
      { "id": "c", "text": "N/2", "isCorrect": false }
    ],
    "explanation": "There are N-1 upper, 1 main, N-1 lower = 2N-1.",
    "interview_tip": "Recognizing diagonal traversal is a pattern in many matrix problems.",
    "references": [
      "https://math.stackexchange.com/questions/384429/number-of-diagonals-in-nxn-square"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "matrix-diagonals"
  },
  {
    "id": 7038,
    "title": "Disjoint Set Union Find",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "What is the main operation of a Disjoint Set (Union-Find)?",
    "options": [
      {
        "id": "a",
        "text": "Finds which set a value belongs to and merges sets efficiently",
        "isCorrect": true
      },
      { "id": "b", "text": "Sorts elements", "isCorrect": false },
      { "id": "c", "text": "Reverses arrays", "isCorrect": false }
    ],
    "explanation": "DSU finds leaders (roots) and merges sets with path compression.",
    "interview_tip": "Very useful in graph connectivity problems.",
    "references": ["https://en.wikipedia.org/wiki/Disjoint-set_data_structure"],
    "timeLimit": 30,
    "points": 2,
    "slug": "union-find"
  },
  {
    "id": 7039,
    "title": "Recursion Stack Overflow",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "What causes a stack overflow in recursive programs?",
    "options": [
      {
        "id": "a",
        "text": "Missing or incorrect base case",
        "isCorrect": true
      },
      { "id": "b", "text": "Too many global variables", "isCorrect": false },
      { "id": "c", "text": "Use of arrays", "isCorrect": false }
    ],
    "explanation": "Every recursive call pushes a frame onto the call stack; without termination, this hits stack limit.",
    "interview_tip": "Guard against infinite recursion.",
    "references": ["https://en.wikipedia.org/wiki/Stack_overflow"],
    "timeLimit": 30,
    "points": 2,
    "slug": "recursion-stack-overflow"
  },
  {
    "id": 7040,
    "title": "AVL Tree Balance",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "What property defines an AVL tree?",
    "options": [
      {
        "id": "a",
        "text": "Height difference of at most 1 between left and right subtrees",
        "isCorrect": true
      },
      { "id": "b", "text": "All leaves at the same depth", "isCorrect": false },
      {
        "id": "c",
        "text": "Sum of left values equals right",
        "isCorrect": false
      }
    ],
    "explanation": "An AVL tree is self-balancing with subtree heights differing by at most 1.",
    "interview_tip": "Rotations are used to restore balance after insertions/deletions.",
    "references": ["https://en.wikipedia.org/wiki/AVL_tree"],
    "timeLimit": 30,
    "points": 3,
    "slug": "avl-balance"
  },
  {
    "id": 7041,
    "title": "Dijkstra's Algorithm Structure",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Which data structure optimizes Dijkstra’s shortest path algorithm?",
    "options": [
      { "id": "a", "text": "Min-Heap/Priority Queue", "isCorrect": true },
      { "id": "b", "text": "Stack", "isCorrect": false },
      { "id": "c", "text": "Deque", "isCorrect": false }
    ],
    "explanation": "A min-heap efficiently picks the vertex with the smallest tentative distance.",
    "interview_tip": "Heap provides O(log n) extract-min and decrease-key.",
    "references": ["https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm"],
    "timeLimit": 30,
    "points": 3,
    "slug": "dijkstra-minheap"
  },
  {
    "id": 7042,
    "title": "Graph Cycle Detection",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Which technique can detect cycles in a directed graph?",
    "options": [
      { "id": "a", "text": "DFS with recursion stack", "isCorrect": true },
      { "id": "b", "text": "Inorder traversal", "isCorrect": false },
      { "id": "c", "text": "BFS only", "isCorrect": false }
    ],
    "explanation": "DFS tracks visiting nodes with a recursion stack; cycle if a node is revisited during traversal.",
    "interview_tip": "BFS using in-degrees (Kahn’s algo) is another option.",
    "references": [
      "https://en.wikipedia.org/wiki/Topological_sorting#Cycle_detection"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "cycle-detection-dfs"
  },
  {
    "id": 7043,
    "title": "Matrix Multiplication Complexity",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "What is the time complexity of multiplying two n × n matrices via standard algorithm?",
    "options": [
      { "id": "a", "text": "O(n^3)", "isCorrect": true },
      { "id": "b", "text": "O(n^2)", "isCorrect": false },
      { "id": "c", "text": "O(n log n)", "isCorrect": false }
    ],
    "explanation": "Each output cell computes a sum over n multiplications, for n² cells.",
    "interview_tip": "Strassen’s and others are faster but not widely used in code interviews.",
    "references": [
      "https://en.wikipedia.org/wiki/Matrix_multiplication#Computational_complexity"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "matrix-mult-o-n3"
  },
  {
    "id": 7044,
    "title": "Knapsack 0/1",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Which approach solves the 0/1 Knapsack problem efficiently?",
    "options": [
      { "id": "a", "text": "Dynamic Programming (DP)", "isCorrect": true },
      { "id": "b", "text": "Greedy algorithm", "isCorrect": false },
      { "id": "c", "text": "Recursion only", "isCorrect": false }
    ],
    "explanation": "DP fills a table of optimal values for subproblems.",
    "interview_tip": "Greedy succeeds only on fractional knapsack.",
    "references": ["https://en.wikipedia.org/wiki/Knapsack_problem"],
    "timeLimit": 30,
    "points": 3,
    "slug": "knapsack-dp"
  },
  {
    "id": 7045,
    "title": "Trie Space Complexity",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "What is the worst-case space complexity for storing n keys each of length m in a trie (alphabet size k)?",
    "options": [
      { "id": "a", "text": "O(n·m·k)", "isCorrect": true },
      { "id": "b", "text": "O(n·m)", "isCorrect": false },
      { "id": "c", "text": "O(n^2)", "isCorrect": false }
    ],
    "explanation": "Each node can have up to k children; uncompressed tries are space-heavy.",
    "interview_tip": "Compressed/ternary tries save memory.",
    "references": ["https://en.wikipedia.org/wiki/Trie#Analysis"],
    "timeLimit": 30,
    "points": 3,
    "slug": "trie-space"
  },
  {
    "id": 7046,
    "title": "Union by Rank",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "What does union by rank optimize in DSU/Union-Find?",
    "options": [
      {
        "id": "a",
        "text": "Keeps trees shallow for faster finds",
        "isCorrect": true
      },
      { "id": "b", "text": "Find operation", "isCorrect": false },
      { "id": "c", "text": "Blob storage", "isCorrect": false }
    ],
    "explanation": "Join smaller tree under larger for O(1) amortized performance.",
    "interview_tip": "Often combined with path compression.",
    "references": [
      "https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Disjoint-set_forests"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "union-rank"
  },
  {
    "id": 7047,
    "title": "Topological Sort Property",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "For which graphs is topological sorting possible?",
    "options": [
      {
        "id": "a",
        "text": "Directed Acyclic Graphs (DAGs)",
        "isCorrect": true
      },
      { "id": "b", "text": "Undirected graphs", "isCorrect": false },
      { "id": "c", "text": "Graphs with cycles", "isCorrect": false }
    ],
    "explanation": "Cycles make sort impossible; a sort lists nodes before any dependent node.",
    "interview_tip": "Dependency scheduling uses topo sort.",
    "references": ["https://en.wikipedia.org/wiki/Topological_sorting"],
    "timeLimit": 30,
    "points": 3,
    "slug": "topo-sort-dag"
  },
  {
    "id": 7048,
    "title": "Segment Tree Update",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "What is the time complexity of updating a value in a segment tree?",
    "options": [
      { "id": "a", "text": "O(log n)", "isCorrect": true },
      { "id": "b", "text": "O(n)", "isCorrect": false },
      { "id": "c", "text": "O(1)", "isCorrect": false }
    ],
    "explanation": "Segment trees enable efficient query/update of ranges, not just single points.",
    "interview_tip": "Used in interval/range query problems.",
    "references": [
      "https://cp-algorithms.com/data_structures/segment_tree.html"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "segment-tree-update"
  },
  {
    "id": 7049,
    "title": "Trie vs Hash Map",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Which advantage does a trie have over a hash map for prefix search?",
    "options": [
      {
        "id": "a",
        "text": "Efficient common prefix enumeration",
        "isCorrect": true
      },
      { "id": "b", "text": "Constant space for every use", "isCorrect": false },
      { "id": "c", "text": "Handles binary data best", "isCorrect": false }
    ],
    "explanation": "Tries easily list all words with a given prefix.",
    "interview_tip": "Autocomplete uses trie prefix enumeration.",
    "references": ["https://en.wikipedia.org/wiki/Trie"],
    "timeLimit": 30,
    "points": 3,
    "slug": "trie-vs-hashmap"
  },
  {
    "id": 7050,
    "title": "Inorder Predecessor BST",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Where is the inorder predecessor of a node in a BST?",
    "options": [
      {
        "id": "a",
        "text": "Rightmost node in the left subtree",
        "isCorrect": true
      },
      { "id": "b", "text": "Leftmost of the right child", "isCorrect": false },
      { "id": "c", "text": "Parent node", "isCorrect": false }
    ],
    "explanation": "Inorder predecessor is greatest value less than node’s value.",
    "interview_tip": "Opposite is inorder successor.",
    "references": ["https://en.wikipedia.org/wiki/Binary_search_tree"],
    "timeLimit": 30,
    "points": 3,
    "slug": "bst-inorder-pred"
  },
  {
    "id": 7051,
    "title": "KMP Algorithm Factor",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "What does the KMP string search algorithm precompute?",
    "options": [
      {
        "id": "a",
        "text": "Longest prefix which is also a suffix (LPS) for the pattern",
        "isCorrect": true
      },
      { "id": "b", "text": "All factors of a number", "isCorrect": false },
      { "id": "c", "text": "Jump table for every string", "isCorrect": false }
    ],
    "explanation": "LPS allows skipping characters after a mismatch rather than restart.",
    "interview_tip": "Improves pattern matching from O(mn) to O(m+n).",
    "references": [
      "https://en.wikipedia.org/wiki/Knuth–Morris–Pratt_algorithm"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "kmp-lps"
  },
  {
    "id": 7052,
    "title": "Sparse Table",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "What is the sparse table data structure best used for?",
    "options": [
      {
        "id": "a",
        "text": "Static range minimum/maximum queries",
        "isCorrect": true
      },
      { "id": "b", "text": "Range updates", "isCorrect": false },
      { "id": "c", "text": "Dynamic tree structure", "isCorrect": false }
    ],
    "explanation": "Sparse table preprocesses static data for O(1) RMQ.",
    "interview_tip": "Not suitable for point/range updates.",
    "references": [
      "https://cp-algorithms.com/data_structures/sparse-table.html"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "sparse-table"
  },
  {
    "id": 7053,
    "title": "Red-Black Tree Height",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "What is the maximum height of a red-black tree with n nodes?",
    "options": [
      { "id": "a", "text": "2 × log2(n+1)", "isCorrect": true },
      { "id": "b", "text": "n", "isCorrect": false },
      { "id": "c", "text": "1/2 × log2n", "isCorrect": false }
    ],
    "explanation": "Red-black balancing keeps height logarithmic.",
    "interview_tip": "Red-black tree is used in STL map/set.",
    "references": ["https://en.wikipedia.org/wiki/Red–black_tree"],
    "timeLimit": 30,
    "points": 3,
    "slug": "rb-tree-height"
  },
  {
    "id": 7054,
    "title": "B-Tree Usage",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Which application is B-Tree best suited for?",
    "options": [
      { "id": "a", "text": "Database indexing on disk", "isCorrect": true },
      { "id": "b", "text": "Array shifting", "isCorrect": false },
      { "id": "c", "text": "Graph search", "isCorrect": false }
    ],
    "explanation": "B-trees minimize disk reads by wide branching.",
    "interview_tip": "Used in filesystems and databases (e.g., MySQL).",
    "references": ["https://en.wikipedia.org/wiki/B-tree"],
    "timeLimit": 30,
    "points": 3,
    "slug": "b-tree-db"
  },
  {
    "id": 7055,
    "title": "Heapify Operation",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "What is the time complexity of building a heap (heapify) from an unsorted array?",
    "options": [
      { "id": "a", "text": "O(n)", "isCorrect": true },
      { "id": "b", "text": "O(n log n)", "isCorrect": false },
      { "id": "c", "text": "O(log n)", "isCorrect": false }
    ],
    "explanation": "Bottom-up heapify touches smaller trees, so sum stays O(n) overall.",
    "interview_tip": "Heap sort leverages this for fast sorting.",
    "references": ["https://en.wikipedia.org/wiki/Heapsort#Building_the_heap"],
    "timeLimit": 30,
    "points": 3,
    "slug": "heapify-complexity"
  },
  {
    "id": 7056,
    "title": "Bit Manipulation Trick",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Which bitwise operation clears the lowest set bit?",
    "options": [
      { "id": "a", "text": "x & (x - 1)", "isCorrect": true },
      { "id": "b", "text": "x | (x - 1)", "isCorrect": false },
      { "id": "c", "text": "x ^ (x - 1)", "isCorrect": false }
    ],
    "explanation": "x & (x-1) drops the lowest set bit, a fundamental bit hack.",
    "interview_tip": "Useful for counting set bits, subset generation.",
    "references": ["https://graphics.stanford.edu/~seander/bithacks.html"],
    "timeLimit": 30,
    "points": 3,
    "slug": "bit-manip-clear"
  },
  {
    "id": 7057,
    "title": "DFS Lowlink (Tarjan)",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "What is 'lowlink' in Tarjan's algorithm used for?",
    "options": [
      {
        "id": "a",
        "text": "Identifying strongly connected components",
        "isCorrect": true
      },
      { "id": "b", "text": "Dijkstra shortest path", "isCorrect": false },
      { "id": "c", "text": "Articulation points", "isCorrect": false }
    ],
    "explanation": "Lowlink tracks minimum index reachable, critical for SCC decomposition.",
    "interview_tip": "Usually taught at advanced/interview-prep level.",
    "references": [
      "https://en.wikipedia.org/wiki/Tarjan%27s_strongly_connected_components_algorithm"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "tarjan-lowlink"
  },
  {
    "id": 7058,
    "title": "Floyd Warshall",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "What does the Floyd–Warshall algorithm compute?",
    "options": [
      { "id": "a", "text": "All-pairs shortest paths", "isCorrect": true },
      { "id": "b", "text": "Maximum flow", "isCorrect": false },
      { "id": "c", "text": "Articulation points", "isCorrect": false }
    ],
    "explanation": "Floyd–Warshall computes shortest paths between every pair of vertices in O(n³).",
    "interview_tip": "Works on negative weights, not negative cycles.",
    "references": ["https://en.wikipedia.org/wiki/Floyd–Warshall_algorithm"],
    "timeLimit": 30,
    "points": 3,
    "slug": "floyd-warshall"
  },
  {
    "id": 7059,
    "title": "Longest Increasing Subsequence",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "What is the standard DP time complexity for finding Length of Longest Increasing Subsequence (LIS)?",
    "options": [
      { "id": "a", "text": "O(n^2)", "isCorrect": true },
      { "id": "b", "text": "O(n log n)", "isCorrect": false },
      { "id": "c", "text": "O(n^3)", "isCorrect": false }
    ],
    "explanation": "DP over all pairs gives O(n²). A more advanced O(n log n) method uses binary search.",
    "interview_tip": "State transition: dp[i] = max(dp[j]+1) for all j<i, a[j]<a[i].",
    "references": [
      "https://en.wikipedia.org/wiki/Longest_increasing_subsequence"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "lis-dp"
  },
  {
    "id": 7060,
    "title": "HashMap Amortized Complexity",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What is the amortized time complexity for inserting n items into an empty hash map?",
    "options": [
      { "id": "a", "text": "O(n)", "isCorrect": true },
      { "id": "b", "text": "O(1)", "isCorrect": false },
      { "id": "c", "text": "O(n log n)", "isCorrect": false }
    ],
    "explanation": "HashMap insertions are O(1) on average, but n insertions are O(n), i.e., O(1) per insert amortized.",
    "interview_tip": "Worst case per insert can degrade due to collisions or resizing.",
    "references": ["https://en.wikipedia.org/wiki/Amortized_analysis"],
    "timeLimit": 45,
    "points": 5,
    "slug": "hashmap-amortized"
  },
  {
    "id": 7061,
    "title": "Trie Space Complexity",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What is the main drawback of using a Trie for storing a large dictionary of words?",
    "options": [
      {
        "id": "a",
        "text": "Can use significant space for sparse branching",
        "isCorrect": true
      },
      { "id": "b", "text": "No fast lookup", "isCorrect": false },
      { "id": "c", "text": "Insertion is not possible", "isCorrect": false }
    ],
    "explanation": "Tries can waste memory when many nodes have few children.",
    "interview_tip": "Use compressed/patricia tries for optimization.",
    "references": ["https://en.wikipedia.org/wiki/Trie"],
    "timeLimit": 45,
    "points": 5,
    "slug": "trie-space"
  },
  {
    "id": 7062,
    "title": "Red-Black Tree Property",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What property must always hold in a Red-Black Tree?",
    "options": [
      {
        "id": "a",
        "text": "Every path from a node to a leaf contains same number of black nodes",
        "isCorrect": true
      },
      { "id": "b", "text": "Root is always red", "isCorrect": false },
      {
        "id": "c",
        "text": "Every node has at most one child",
        "isCorrect": false
      }
    ],
    "explanation": "This ensures the tree remains approximately balanced.",
    "interview_tip": "Red-Black Trees have strict coloring rules for balance.",
    "references": ["https://en.wikipedia.org/wiki/Red–black_tree"],
    "timeLimit": 45,
    "points": 5,
    "slug": "redblack-balance"
  },
  {
    "id": 7063,
    "title": "Kth Smallest in BST",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What is the optimal method for finding the kth smallest element in a BST?",
    "options": [
      {
        "id": "a",
        "text": "Inorder traversal with a counter",
        "isCorrect": true
      },
      { "id": "b", "text": "Level order traversal", "isCorrect": false },
      {
        "id": "c",
        "text": "Binary search in preorder array",
        "isCorrect": false
      }
    ],
    "explanation": "Inorder walk visits nodes in sorted order, making kth selection trivial.",
    "interview_tip": "Track count as you traverse for efficiency.",
    "references": [
      "https://leetcode.com/problems/kth-smallest-element-in-a-bst/"
    ],
    "timeLimit": 45,
    "points": 5,
    "slug": "bst-kth-smallest"
  },
  {
    "id": 7064,
    "title": "Suffix Trie Use",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "For which operation is a suffix trie most useful?",
    "options": [
      { "id": "a", "text": "Fast substring search", "isCorrect": true },
      { "id": "b", "text": "Sorting arrays", "isCorrect": false },
      { "id": "c", "text": "Hashing passwords", "isCorrect": false }
    ],
    "explanation": "Suffix tries allow for O(m) substring (pattern) search in a string.",
    "interview_tip": "Suffix trees/trie are key for advanced string matching.",
    "references": ["https://en.wikipedia.org/wiki/Suffix_tree"],
    "timeLimit": 45,
    "points": 5,
    "slug": "suffix-trie"
  },
  {
    "id": 7065,
    "title": "QuickSelect Complexity",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What is the average time complexity of finding the kth smallest number using QuickSelect?",
    "options": [
      { "id": "a", "text": "O(n)", "isCorrect": true },
      { "id": "b", "text": "O(log n)", "isCorrect": false },
      { "id": "c", "text": "O(n^2)", "isCorrect": false }
    ],
    "explanation": "QuickSelect is based on quicksort partitioning, yielding linear time on average.",
    "interview_tip": "Worst-case is O(n^2), but rare with good pivots.",
    "references": ["https://en.wikipedia.org/wiki/Quickselect"],
    "timeLimit": 45,
    "points": 5,
    "slug": "quickselect-average"
  },
  {
    "id": 7066,
    "title": "AVL Tree Balancing Factor",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "In an AVL tree, what is the maximum allowed difference in heights between any node's left and right subtrees?",
    "options": [
      { "id": "a", "text": "1", "isCorrect": true },
      { "id": "b", "text": "2", "isCorrect": false },
      { "id": "c", "text": "0", "isCorrect": false }
    ],
    "explanation": "AVL tree self-balances so no node has left/right subtrees differing by more than 1.",
    "interview_tip": "After every insert/delete, rebalance if needed.",
    "references": ["https://en.wikipedia.org/wiki/AVL_tree"],
    "timeLimit": 45,
    "points": 5,
    "slug": "avl-balance-factor"
  },
  {
    "id": 7067,
    "title": "Dijkstra Negative Edges",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "Can Dijkstra’s algorithm handle negative-weight edges in a graph?",
    "options": [
      {
        "id": "a",
        "text": "No, it may give incorrect results",
        "isCorrect": true
      },
      { "id": "b", "text": "Yes, always correct", "isCorrect": false },
      { "id": "c", "text": "Only if no cycles", "isCorrect": false }
    ],
    "explanation": "Dijkstra’s algorithm assumes all edges have positive weights.",
    "interview_tip": "Use Bellman–Ford for graphs with negative weights.",
    "references": [
      "https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm#Negative_weights"
    ],
    "timeLimit": 45,
    "points": 5,
    "slug": "dijkstra-negative"
  },
  {
    "id": 7068,
    "title": "Floyd–Warshall Complexity",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What is the time complexity of the Floyd–Warshall algorithm for shortest paths?",
    "options": [
      { "id": "a", "text": "O(V^3)", "isCorrect": true },
      { "id": "b", "text": "O(V^2)", "isCorrect": false },
      { "id": "c", "text": "O(E log V)", "isCorrect": false }
    ],
    "explanation": "Floyd–Warshall computes shortest paths between all pairs of V vertices.",
    "interview_tip": "Best suited for dense graphs with not too many vertices.",
    "references": [
      "https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm"
    ],
    "timeLimit": 45,
    "points": 5,
    "slug": "floyd-warshall"
  },
  {
    "id": 7069,
    "title": "Segment Tree Range Query",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What problem does a segment tree solve efficiently?",
    "options": [
      {
        "id": "a",
        "text": "Range queries and updates in logarithmic time",
        "isCorrect": true
      },
      { "id": "b", "text": "Sorting N elements", "isCorrect": false },
      { "id": "c", "text": "Graph traversal", "isCorrect": false }
    ],
    "explanation": "Segment trees allow O(log n) range min/max/sum and update queries.",
    "interview_tip": "Common in competitive programming for RMQ problems.",
    "references": [
      "https://cp-algorithms.com/data_structures/segment_tree.html"
    ],
    "timeLimit": 45,
    "points": 5,
    "slug": "segment-tree"
  },
  {
    "id": 7070,
    "title": "Topological Sort Uses",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What is a real-world application of topological sorting?",
    "options": [
      {
        "id": "a",
        "text": "Task scheduling with dependencies",
        "isCorrect": true
      },
      { "id": "b", "text": "Network packet routing", "isCorrect": false },
      { "id": "c", "text": "Finding cycles in graphs", "isCorrect": false }
    ],
    "explanation": "Topological sort gives an order to process tasks under dependency constraints.",
    "interview_tip": "Valid only for DAGs (Directed Acyclic Graphs).",
    "references": ["https://en.wikipedia.org/wiki/Topological_sorting"],
    "timeLimit": 45,
    "points": 5,
    "slug": "toposort"
  },
  {
    "id": 7071,
    "title": "KMP Algorithm Purpose",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What problem does the Knuth–Morris–Pratt (KMP) algorithm solve?",
    "options": [
      {
        "id": "a",
        "text": "String pattern searching with linear time complexity",
        "isCorrect": true
      },
      { "id": "b", "text": "Array sorting", "isCorrect": false },
      { "id": "c", "text": "Heap insertions", "isCorrect": false }
    ],
    "explanation": "KMP preprocesses the search pattern to avoid backtracking.",
    "interview_tip": "Partial match table is core to KMP efficiency.",
    "references": [
      "https://en.wikipedia.org/wiki/Knuth–Morris–Pratt_algorithm"
    ],
    "timeLimit": 45,
    "points": 5,
    "slug": "kmp-purpose"
  },
  {
    "id": 7072,
    "title": "Sliding Window Technique",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "Sliding window is most efficient for which type of problems?",
    "options": [
      {
        "id": "a",
        "text": "Finding longest/shortest subarrays meeting constraints",
        "isCorrect": true
      },
      { "id": "b", "text": "Graph coloring", "isCorrect": false },
      { "id": "c", "text": "Binary tree rebalance", "isCorrect": false }
    ],
    "explanation": "Sliding window lets you process contiguous subarrays efficiently with O(n) time.",
    "interview_tip": "Two-pointer approach is a variant of sliding window.",
    "references": ["https://leetcode.com/tag/sliding-window/"],
    "timeLimit": 45,
    "points": 5,
    "slug": "sliding-window"
  },
  {
    "id": 7073,
    "title": "Bitmasking Use Case",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "In which situation is bitmasking most efficient?",
    "options": [
      {
        "id": "a",
        "text": "Representing sets and boolean flags in compact space",
        "isCorrect": true
      },
      { "id": "b", "text": "Counting digits", "isCorrect": false },
      { "id": "c", "text": "Big number multiplication", "isCorrect": false }
    ],
    "explanation": "Bitmasking stores k booleans in a single k-bit value; ideal for set DP or flag storage.",
    "interview_tip": "Look for problems that involve 'all subsets' or 'visited nodes'.",
    "references": ["https://cp-algorithms.com/algebra/bit-manipulation.html"],
    "timeLimit": 45,
    "points": 5,
    "slug": "bitmasking"
  },
  {
    "id": 7074,
    "title": "Bloom Filter False Positives",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "Bloom filters guarantee which property?",
    "options": [
      {
        "id": "a",
        "text": "No false negatives, some false positives",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "No false positives, some false negatives",
        "isCorrect": false
      },
      { "id": "c", "text": "Perfect accuracy", "isCorrect": false }
    ],
    "explanation": "Cannot return false negatives, but may wrongly say an element exists.",
    "interview_tip": "Great for fast, space-saving membership tests.",
    "references": ["https://en.wikipedia.org/wiki/Bloom_filter"],
    "timeLimit": 45,
    "points": 5,
    "slug": "bloomfilter-falsepositive"
  },
  {
    "id": 7075,
    "title": "Median of Two Sorted Arrays",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What is the best possible time complexity to find the median of two sorted arrays?",
    "options": [
      { "id": "a", "text": "O(log(min(n, m)))", "isCorrect": true },
      { "id": "b", "text": "O(n + m)", "isCorrect": false },
      { "id": "c", "text": "O(1)", "isCorrect": false }
    ],
    "explanation": "Solution needs binary search—partition arrays to achieve logarithmic performance.",
    "interview_tip": "Classic high-difficulty interview question!",
    "references": [
      "https://leetcode.com/problems/median-of-two-sorted-arrays/"
    ],
    "timeLimit": 45,
    "points": 5,
    "slug": "median-two-arrays"
  },
  {
    "id": 7076,
    "title": "Union Find with Path Compression",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "With union by rank and path compression, what is the amortized time per operation in DSU?",
    "options": [
      {
        "id": "a",
        "text": "Nearly O(1) (inverse Ackermann function)",
        "isCorrect": true
      },
      { "id": "b", "text": "O(n)", "isCorrect": false },
      { "id": "c", "text": "O(n log n)", "isCorrect": false }
    ],
    "explanation": "Ackermann's function grows so slowly it's effectively constant for all inputs.",
    "interview_tip": "Relevant for Kruskal's and other advanced graph connectivity algorithms.",
    "references": [
      "https://en.wikipedia.org/wiki/Disjoint-set_data_structure#Time_complexity"
    ],
    "timeLimit": 45,
    "points": 5,
    "slug": "unionfind-ackermann"
  },
  {
    "id": 7077,
    "title": "Trie vs. Hash Map",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "Compared to hash maps, when is a trie more advantageous for string lookups?",
    "options": [
      {
        "id": "a",
        "text": "Prefix matching and lexicographic ordering",
        "isCorrect": true
      },
      { "id": "b", "text": "Random access by index", "isCorrect": false },
      {
        "id": "c",
        "text": "Better average search time for all strings",
        "isCorrect": false
      }
    ],
    "explanation": "Tries enable prefix searches and maintain order, hash maps do not.",
    "interview_tip": "Use when autocomplete, prefix queries, or ordering is needed.",
    "references": ["https://en.wikipedia.org/wiki/Trie"],
    "timeLimit": 45,
    "points": 5,
    "slug": "trie-vs-hashmap"
  },
  {
    "id": 7078,
    "title": "Minimax Alpha Beta Pruning",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "Alpha-beta pruning in minimax trees has what effect?",
    "options": [
      {
        "id": "a",
        "text": "Speeds up minimax by pruning unneeded branches",
        "isCorrect": true
      },
      { "id": "b", "text": "Does not affect complexity", "isCorrect": false },
      {
        "id": "c",
        "text": "Guarantees same nodes are always pruned",
        "isCorrect": false
      }
    ],
    "explanation": "Alpha-beta reduces evaluated nodes, increasing search efficiency.",
    "interview_tip": "Best performance with good move order.",
    "references": ["https://en.wikipedia.org/wiki/Alpha–beta_pruning"],
    "timeLimit": 45,
    "points": 5,
    "slug": "alpha-beta-pruning"
  },
  {
    "id": 7079,
    "title": "Persistent Segment Trees",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What does persistence add to a segment tree?",
    "options": [
      {
        "id": "a",
        "text": "Queries on previous versions of data efficiently",
        "isCorrect": true
      },
      { "id": "b", "text": "O(1) update for all ranges", "isCorrect": false },
      { "id": "c", "text": "Less space complexity", "isCorrect": false }
    ],
    "explanation": "Persistence keeps history—enables time-travel range queries/updates.",
    "interview_tip": "Used in some advanced contest/competitive programming problems.",
    "references": [
      "https://cp-algorithms.com/data_structures/persistent_segment_tree.html"
    ],
    "timeLimit": 45,
    "points": 5,
    "slug": "persistent-segtree"
  },
  {
    "id": 7060,
    "title": "Amortized HashMap Insertions",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What is the amortized time complexity for inserting n elements into a hash map?",
    "options": [
      { "id": "a", "text": "O(n)", "isCorrect": true },
      { "id": "b", "text": "O(1)", "isCorrect": false },
      { "id": "c", "text": "O(n log n)", "isCorrect": false }
    ],
    "explanation": "Each insertion is O(1) on average but inserting n elements gives O(n) total, so O(1) amortized per insert.",
    "interview_tip": "Resizing incurs sporadic O(n) cost but doesn't affect amortized analysis for large n.",
    "references": ["https://en.wikipedia.org/wiki/Amortized_analysis"],
    "timeLimit": 45,
    "points": 5,
    "slug": "hashmap-amortized"
  },
  {
    "id": 7061,
    "title": "Trie Space Usage",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What is the main drawback of a naive trie used for word storage?",
    "options": [
      {
        "id": "a",
        "text": "It may use a lot of extra space for sparse inputs",
        "isCorrect": true
      },
      { "id": "b", "text": "Provides only linear search", "isCorrect": false },
      { "id": "c", "text": "No prefix operations allowed", "isCorrect": false }
    ],
    "explanation": "Tries may have many nodes with null children. High-degree alphabets increase wasted memory.",
    "interview_tip": "Use a compressed or ternary trie for optimization.",
    "references": ["https://en.wikipedia.org/wiki/Trie"],
    "timeLimit": 45,
    "points": 5,
    "slug": "trie-space-drawback"
  },
  {
    "id": 7062,
    "title": "Red-Black Tree Property",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What key property must red-black trees always maintain?",
    "options": [
      {
        "id": "a",
        "text": "No two red nodes appear consecutively on any path",
        "isCorrect": true
      },
      { "id": "b", "text": "All nodes have two children", "isCorrect": false },
      {
        "id": "c",
        "text": "Left subtree always contains smaller items",
        "isCorrect": false
      }
    ],
    "explanation": "No red node has a red child; ensures self-balancing in logarithmic height.",
    "interview_tip": "Check red/black rules when debugging tree rotations.",
    "references": ["https://en.wikipedia.org/wiki/Red–black_tree"],
    "timeLimit": 45,
    "points": 5,
    "slug": "red-black-property"
  },
  {
    "id": 7063,
    "title": "Kth Smallest in BST",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What is the time complexity to find the k-th smallest in a BST if each node stores its subtree size?",
    "options": [
      { "id": "a", "text": "O(log n)", "isCorrect": true },
      { "id": "b", "text": "O(n)", "isCorrect": false },
      { "id": "c", "text": "O(k)", "isCorrect": false }
    ],
    "explanation": "Use the subtree sizes to skip whole subtrees and move O(log n) steps in balanced BST.",
    "interview_tip": "Augment nodes to make order statistics queries fast.",
    "references": [
      "https://en.wikipedia.org/wiki/Binary_search_tree#Order_statistic_operations"
    ],
    "timeLimit": 45,
    "points": 5,
    "slug": "bst-kth-smallest"
  },
  {
    "id": 7064,
    "title": "Suffix Tree Use",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "Suffix trees enable which operation in linear time relative to string S length?",
    "options": [
      { "id": "a", "text": "Fast substring search", "isCorrect": true },
      { "id": "b", "text": "Logging insertions", "isCorrect": false },
      { "id": "c", "text": "Linear sorting", "isCorrect": false }
    ],
    "explanation": "A suffix tree can preprocess a string for O(m) lookup of any pattern of length m.",
    "interview_tip": "Most pattern-matching interview Qs use tries/traverse, but know what a suffix tree offers.",
    "references": ["https://en.wikipedia.org/wiki/Suffix_tree"],
    "timeLimit": 45,
    "points": 5,
    "slug": "suffix-tree-use"
  },
  {
    "id": 7065,
    "title": "Heap vs. AVL for Priority Queue",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "Why is a binary heap preferred over AVL tree for implementations of priority queues?",
    "options": [
      {
        "id": "a",
        "text": "Heaps have better constants and simpler structure for insert/extract-min",
        "isCorrect": true
      },
      { "id": "b", "text": "AVL is not self-balancing", "isCorrect": false },
      {
        "id": "c",
        "text": "Heap allows for constant-time min/max",
        "isCorrect": false
      }
    ],
    "explanation": "Heaps offer O(log n) for insert/extract-min and are memory- and cache-friendly—no pointers.",
    "interview_tip": "AVL is more for sorted order, not for fast min/max only.",
    "references": ["https://en.wikipedia.org/wiki/Binary_heap"],
    "timeLimit": 45,
    "points": 5,
    "slug": "heap-vs-avl-prio"
  },
  {
    "id": 7066,
    "title": "Heavy-Light Decomposition",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What problem is Heavy-Light Decomposition used to solve efficiently?",
    "options": [
      { "id": "a", "text": "Path queries/updates on trees", "isCorrect": true },
      { "id": "b", "text": "Heap sort", "isCorrect": false },
      { "id": "c", "text": "Detecting cycles", "isCorrect": false }
    ],
    "explanation": "Breaks a tree into heavy and light paths to enable fast path or subtree queries using arrays and segment trees.",
    "interview_tip": "Advanced algorithm, rarely expected except for top-tier positions.",
    "references": ["https://cp-algorithms.com/graph/hld.html"],
    "timeLimit": 45,
    "points": 5,
    "slug": "hld-use"
  },
  {
    "id": 7067,
    "title": "Sliding Window Maximum",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "Which structure gives an O(n) solution to 'maximum in every sliding window of size k' in an array?",
    "options": [
      { "id": "a", "text": "Deque (double-ended queue)", "isCorrect": true },
      { "id": "b", "text": "Min-Heap", "isCorrect": false },
      { "id": "c", "text": "Binary Search Tree", "isCorrect": false }
    ],
    "explanation": "Deque helps efficiently push and pop elements from ends for window max.",
    "interview_tip": "Classic algorithm question for strong candidates!",
    "references": ["https://leetcode.com/problems/sliding-window-maximum/"],
    "timeLimit": 45,
    "points": 5,
    "slug": "sliding-window-max"
  },
  {
    "id": 7068,
    "title": "Longest Palindromic Substring",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What is the time complexity of Manacher's Algorithm for LPS?",
    "options": [
      { "id": "a", "text": "O(n)", "isCorrect": true },
      { "id": "b", "text": "O(n^2)", "isCorrect": false },
      { "id": "c", "text": "O(log n)", "isCorrect": false }
    ],
    "explanation": "Manacher’s Algorithm finds the longest palindromic substring in linear time.",
    "interview_tip": "Brute force is O(n²), DP is O(n²), Manacher’s is optimal.",
    "references": [
      "https://en.wikipedia.org/wiki/Longest_palindromic_substring"
    ],
    "timeLimit": 45,
    "points": 5,
    "slug": "manacher-lps"
  },
  {
    "id": 7069,
    "title": "Convex Hull 2D",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What is the optimal time complexity to compute a convex hull of n points in 2D?",
    "options": [
      { "id": "a", "text": "O(n log n)", "isCorrect": true },
      { "id": "b", "text": "O(n^2)", "isCorrect": false },
      { "id": "c", "text": "O(n)", "isCorrect": false }
    ],
    "explanation": "O(n log n) is needed for sort-based algorithms like Graham scan; lower bounds due to sorting.",
    "interview_tip": "Important in computational geometry and GIS.",
    "references": ["https://en.wikipedia.org/wiki/Convex_hull#Algorithms"],
    "timeLimit": 45,
    "points": 5,
    "slug": "convex-hull"
  },
  {
    "id": 7070,
    "title": "Lowest Common Ancestor (LCA)",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "With Euler tour and RMQ, what is the query time for LCA after O(n log n) preprocessing?",
    "options": [
      { "id": "a", "text": "O(1)", "isCorrect": true },
      { "id": "b", "text": "O(log n)", "isCorrect": false },
      { "id": "c", "text": "O(n)", "isCorrect": false }
    ],
    "explanation": "Euler tour + RMQ lets you get LCA in constant time after preprocessing.",
    "interview_tip": "Other solutions exist; this is the fastest.",
    "references": ["https://cp-algorithms.com/graph/lca.html"],
    "timeLimit": 45,
    "points": 5,
    "slug": "lca-euler-tour"
  },
  {
    "id": 7071,
    "title": "Disjoint Set Union by Path Compression",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "After using path compression and union by rank, what is the amortized time per operation for DSU?",
    "options": [
      { "id": "a", "text": "O(α(n)) (inverse Ackermann)", "isCorrect": true },
      { "id": "b", "text": "O(log n)", "isCorrect": false },
      { "id": "c", "text": "O(1)", "isCorrect": false }
    ],
    "explanation": "Amortized time per operation is nearly constant (inverse Ackermann function).",
    "interview_tip": "α(n) <= 5 for all practical n on earth.",
    "references": ["https://en.wikipedia.org/wiki/Disjoint-set_data_structure"],
    "timeLimit": 45,
    "points": 5,
    "slug": "dsu-path-compression"
  },
  {
    "id": 7072,
    "title": "Suffix Automaton Use",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "For which problem is a Suffix Automaton especially efficient?",
    "options": [
      {
        "id": "a",
        "text": "Counting number of different substrings",
        "isCorrect": true
      },
      { "id": "b", "text": "All-pair shortest path", "isCorrect": false },
      { "id": "c", "text": "Integer factorization", "isCorrect": false }
    ],
    "explanation": "Suffix automata provide O(n) construction and substring counting.",
    "interview_tip": "Rare in interviews but useful in stringology.",
    "references": ["https://cp-algorithms.com/string/suffix-automaton.html"],
    "timeLimit": 45,
    "points": 5,
    "slug": "suffix-automaton-count"
  },
  {
    "id": 7073,
    "title": "Persistent Segment Tree",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What does a persistent segment tree let you do efficiently?",
    "options": [
      {
        "id": "a",
        "text": "Access and update previous versions of array intervals in logarithmic time",
        "isCorrect": true
      },
      { "id": "b", "text": "Sweep line intersection", "isCorrect": false },
      { "id": "c", "text": "Hash collisions", "isCorrect": false }
    ],
    "explanation": "Persistent segment trees save copies for fast rollback/versioned queries.",
    "interview_tip": "Used rarely except for competitive programming and research.",
    "references": [
      "https://cp-algorithms.com/data_structures/persistent_segment_tree.html"
    ],
    "timeLimit": 45,
    "points": 5,
    "slug": "persistent-segtree"
  },
  {
    "id": 7074,
    "title": "Counting Inversions",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What's the optimal time complexity to count inversions in an array?",
    "options": [
      { "id": "a", "text": "O(n log n)", "isCorrect": true },
      { "id": "b", "text": "O(n^2)", "isCorrect": false },
      { "id": "c", "text": "O(n)", "isCorrect": false }
    ],
    "explanation": "Modified merge sort (divide and conquer) counts inversions in O(n log n).",
    "interview_tip": "Classic divide-and-conquer twist problem.",
    "references": [
      "https://en.wikipedia.org/wiki/Inversion_(discrete_mathematics)"
    ],
    "timeLimit": 45,
    "points": 5,
    "slug": "inversion-count"
  },
  {
    "id": 7075,
    "title": "Suffix Array Optimal Construction",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What is the best known time complexity for constructing a suffix array?",
    "options": [
      { "id": "a", "text": "O(n)", "isCorrect": true },
      { "id": "b", "text": "O(n log n)", "isCorrect": false },
      { "id": "c", "text": "O(n²)", "isCorrect": false }
    ],
    "explanation": "Induced sorting methods (e.g. SA-IS) achieve O(n).",
    "interview_tip": "Most classic implementations are O(n log n); O(n) is advanced.",
    "references": [
      "https://en.wikipedia.org/wiki/Suffix_array#Linear_time_construction"
    ],
    "timeLimit": 45,
    "points": 5,
    "slug": "suffix-array-optimal"
  },
  {
    "id": 7076,
    "title": "Kth Largest in Stream",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What structure supports fast streaming k-th largest element queries?",
    "options": [
      { "id": "a", "text": "Min-Heap of size k", "isCorrect": true },
      { "id": "b", "text": "Segment Tree", "isCorrect": false },
      { "id": "c", "text": "Stack", "isCorrect": false }
    ],
    "explanation": "Keep a Min-Heap of size k; root gives kth largest as each new item is processed.",
    "interview_tip": "Question is common in big-data real-time scenarios.",
    "references": [
      "https://leetcode.com/problems/kth-largest-element-in-a-stream/"
    ],
    "timeLimit": 45,
    "points": 5,
    "slug": "kth-largest-stream"
  },
  {
    "id": 7077,
    "title": "Lowest Common Ancestor (LCA) vs. RMQ",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "Why is range minimum query (RMQ) useful for computing LCA in trees?",
    "options": [
      {
        "id": "a",
        "text": "LCA reduces to RMQ on Euler tour depths",
        "isCorrect": true
      },
      { "id": "b", "text": "Because RMQ is always O(1)", "isCorrect": false },
      { "id": "c", "text": "RMQ solves all graph cycles", "isCorrect": false }
    ],
    "explanation": "The node with minimum depth between first occurrences is the LCA.",
    "interview_tip": "Advanced tree Qs: ask about RMQ/LCA reductions.",
    "references": ["https://cp-algorithms.com/graph/lca.html"],
    "timeLimit": 45,
    "points": 5,
    "slug": "lca-via-rmq"
  },
  {
    "id": 7078,
    "title": "Hopcroft–Karp Algorithm",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "What problem does Hopcroft–Karp solve in O(√V E) time?",
    "options": [
      {
        "id": "a",
        "text": "Maximum matching in bipartite graphs",
        "isCorrect": true
      },
      { "id": "b", "text": "SCC in digraphs", "isCorrect": false },
      { "id": "c", "text": "Min cut", "isCorrect": false }
    ],
    "explanation": "Hopcroft–Karp is optimal for bipartite matching (job-assignment, pairings, etc.).",
    "interview_tip": "Mentioned for very advanced graph/interview scenarios.",
    "references": ["https://en.wikipedia.org/wiki/Hopcroft–Karp_algorithm"],
    "timeLimit": 45,
    "points": 5,
    "slug": "hopcroft-karp"
  },
  {
    "id": 7079,
    "title": "Mo’s Algorithm",
    "category": "DSA",
    "difficulty": "Expert",
    "question": "Mo’s algorithm is used to optimize which class of problems?",
    "options": [
      {
        "id": "a",
        "text": "Offline range query problems (e.g. sum, count, frequency)",
        "isCorrect": true
      },
      { "id": "b", "text": "String pattern matching", "isCorrect": false },
      { "id": "c", "text": "Union-find", "isCorrect": false }
    ],
    "explanation": "Mo’s algorithm reorders queries to minimize transitions, achieving sqrt-decomposition speedup.",
    "interview_tip": "Appears in competitive programming for static queries.",
    "references": [
      "https://cp-algorithms.com/data_structures/sqrt_decomposition.html#mo-s-algorithm"
    ],
    "timeLimit": 45,
    "points": 5,
    "slug": "mos-algorithm"
  },
  {
    "id": 7055,
    "title": "Heapify Operation",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "What is the time complexity of the heapify operation on an array of n elements?",
    "options": [
      { "id": "a", "text": "O(n)", "isCorrect": true },
      { "id": "b", "text": "O(n log n)", "isCorrect": false },
      { "id": "c", "text": "O(log n)", "isCorrect": false }
    ],
    "explanation": "Building a binary heap from an array with heapify takes linear time due to nature of tree levels.",
    "interview_tip": "Insertions individually would take O(n log n).",
    "references": ["https://en.wikipedia.org/wiki/Binary_heap#Building_a_heap"],
    "timeLimit": 30,
    "points": 3,
    "slug": "heapify-ono"
  },
  {
    "id": 7056,
    "title": "Floyd-Warshall Usage",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "What problem does the Floyd-Warshall algorithm solve?",
    "options": [
      { "id": "a", "text": "All pairs shortest paths", "isCorrect": true },
      { "id": "b", "text": "Minimum spanning tree", "isCorrect": false },
      { "id": "c", "text": "Cycle detection", "isCorrect": false }
    ],
    "explanation": "Floyd-Warshall computes the shortest paths between all nodes efficiently.",
    "interview_tip": "Time complexity is O(n^3).",
    "references": ["https://en.wikipedia.org/wiki/Floyd–Warshall_algorithm"],
    "timeLimit": 30,
    "points": 3,
    "slug": "floyd-warshall"
  },
  {
    "id": 7057,
    "title": "Articulation Point",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "What is an articulation point in an undirected graph?",
    "options": [
      {
        "id": "a",
        "text": "A vertex whose removal increases the number of connected components",
        "isCorrect": true
      },
      { "id": "b", "text": "A bridge edge", "isCorrect": false },
      { "id": "c", "text": "A node with maximum degree", "isCorrect": false }
    ],
    "explanation": "Articulation points are critical for network reliability.",
    "interview_tip": "Often found using DFS and low-link values.",
    "references": ["https://en.wikipedia.org/wiki/Biconnected_component"],
    "timeLimit": 30,
    "points": 3,
    "slug": "articulation-point"
  },
  {
    "id": 7058,
    "title": "Kruskal's Algorithm",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "What data structure does Kruskal's algorithm rely on for efficient cycle detection?",
    "options": [
      { "id": "a", "text": "Disjoint Set / Union-Find", "isCorrect": true },
      { "id": "b", "text": "Min-heap", "isCorrect": false },
      { "id": "c", "text": "Queue", "isCorrect": false }
    ],
    "explanation": "Union-Find quickly checks if vertices are in the same set.",
    "interview_tip": "Sort edges by weight before processing.",
    "references": ["https://en.wikipedia.org/wiki/Kruskal%27s_algorithm"],
    "timeLimit": 30,
    "points": 3,
    "slug": "kruskal-union-find"
  },
  {
    "id": 7059,
    "title": "Binary Indexed Tree (Fenwick tree)",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "What type of queries does a Binary Indexed Tree answer efficiently?",
    "options": [
      { "id": "a", "text": "Prefix sum/range sum", "isCorrect": true },
      { "id": "b", "text": "Depth-first traversal", "isCorrect": false },
      { "id": "c", "text": "Radix sort", "isCorrect": false }
    ],
    "explanation": "BITs support O(log n) updates and prefix/range queries.",
    "interview_tip": "Space-efficient vs. segment trees for sum queries.",
    "references": ["https://en.wikipedia.org/wiki/Fenwick_tree"],
    "timeLimit": 30,
    "points": 3,
    "slug": "fenwick-tree"
  },
  {
    "id": 7060,
    "title": "Suffix Array Application",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Suffix arrays are commonly used for:",
    "options": [
      { "id": "a", "text": "Efficient substring search", "isCorrect": true },
      { "id": "b", "text": "Sorting integers", "isCorrect": false },
      { "id": "c", "text": "Union-find operations", "isCorrect": false }
    ],
    "explanation": "Suffix arrays (often with LCP array) allow fast substring searching in O(m + log n).",
    "interview_tip": "Used in plagiarism detection, bioinformatics.",
    "references": ["https://en.wikipedia.org/wiki/Suffix_array"],
    "timeLimit": 30,
    "points": 3,
    "slug": "suffix-array-usage"
  },
  {
    "id": 7061,
    "title": "Bridges in Graph",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "A bridge in an undirected graph is:",
    "options": [
      {
        "id": "a",
        "text": "An edge whose removal increases number of connected components",
        "isCorrect": true
      },
      { "id": "b", "text": "A vertex of degree one", "isCorrect": false },
      { "id": "c", "text": "A self-loop", "isCorrect": false }
    ],
    "explanation": "Bridges are single points of network failure.",
    "interview_tip": "Bridge-finding is related to articulation point algorithms.",
    "references": ["https://en.wikipedia.org/wiki/Bridge_(graph_theory)"],
    "timeLimit": 30,
    "points": 3,
    "slug": "bridge-edge"
  },
  {
    "id": 7062,
    "title": "Amortized Analysis",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Which best describes 'amortized analysis' of an algorithm?",
    "options": [
      {
        "id": "a",
        "text": "Average time per operation over a worst case sequence",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Only average over the best case",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Maximum time for a single operation",
        "isCorrect": false
      }
    ],
    "explanation": "Amortized analysis is used for dynamic array resizing, splay trees, etc.",
    "interview_tip": "Shows overall efficiency even if single ops are slow.",
    "references": ["https://en.wikipedia.org/wiki/Amortized_analysis"],
    "timeLimit": 30,
    "points": 3,
    "slug": "amortized-analysis"
  },
  {
    "id": 7063,
    "title": "NP-complete Example",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Which of the following problems is NP-complete?",
    "options": [
      { "id": "a", "text": "Subset sum", "isCorrect": true },
      { "id": "b", "text": "Binary search", "isCorrect": false },
      { "id": "c", "text": "Mergesort", "isCorrect": false }
    ],
    "explanation": "Subset sum, SAT, TSP, etc. are classic NP-complete problems.",
    "interview_tip": "Expect DP/backtracking for NP-complete questions.",
    "references": ["https://en.wikipedia.org/wiki/NP-completeness"],
    "timeLimit": 30,
    "points": 3,
    "slug": "subset-sum-np"
  },
  {
    "id": 7064,
    "title": "LCA (Lowest Common Ancestor)",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "LCA in binary trees can be found in O(n) via:",
    "options": [
      { "id": "a", "text": "Recursive traversal from root", "isCorrect": true },
      { "id": "b", "text": "DFS only from leaf", "isCorrect": false },
      { "id": "c", "text": "Simple BFS", "isCorrect": false }
    ],
    "explanation": "Check if current is ancestor of both nodes, else traverse left/right.",
    "interview_tip": "In BST, LCA can be O(h) using values.",
    "references": ["https://en.wikipedia.org/wiki/Lowest_common_ancestor"],
    "timeLimit": 30,
    "points": 3,
    "slug": "lca-tree"
  },
  {
    "id": 7065,
    "title": "K-th Largest in a Stream",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "How can you efficiently find the k-th largest element in a stream of n numbers?",
    "options": [
      { "id": "a", "text": "Min-heap of size k", "isCorrect": true },
      { "id": "b", "text": "Sort all numbers", "isCorrect": false },
      { "id": "c", "text": "Trie", "isCorrect": false }
    ],
    "explanation": "Maintain a heap of k largest; root is kth largest.",
    "interview_tip": "Min-heap: easy eviction of smallest so far.",
    "references": [
      "https://leetcode.com/problems/kth-largest-element-in-a-stream/"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "kth-large-heap"
  },
  {
    "id": 7066,
    "title": "Manacher's Algorithm",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Which problem does Manacher’s Algorithm solve in linear time?",
    "options": [
      { "id": "a", "text": "Longest palindromic substring", "isCorrect": true },
      { "id": "b", "text": "Shortest path in graphs", "isCorrect": false },
      { "id": "c", "text": "Convex hull", "isCorrect": false }
    ],
    "explanation": "Manacher’s Algorithm finds longest palindromic substring in O(n).",
    "interview_tip": "Tricky to code—useful for interviewers to mention!",
    "references": [
      "https://en.wikipedia.org/wiki/Longest_palindromic_substring#Manacher's_algorithm"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "manacher"
  },
  {
    "id": 7067,
    "title": "Strongly Connected Components",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Which algorithm finds strongly connected components in directed graphs?",
    "options": [
      {
        "id": "a",
        "text": "Kosaraju’s or Tarjan’s algorithm",
        "isCorrect": true
      },
      { "id": "b", "text": "BFS", "isCorrect": false },
      { "id": "c", "text": "Prim’s", "isCorrect": false }
    ],
    "explanation": "Both use DFS with special ordering or low-link values.",
    "interview_tip": "SCCs are maximal sets with mutual reachability.",
    "references": [
      "https://en.wikipedia.org/wiki/Strongly_connected_component"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "scc"
  },
  {
    "id": 7068,
    "title": "Dynamic Programming Subproblems",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "What two main features enable an algorithm to use dynamic programming?",
    "options": [
      {
        "id": "a",
        "text": "Optimal substructure and overlapping subproblems",
        "isCorrect": true
      },
      { "id": "b", "text": "Greedy choices", "isCorrect": false },
      { "id": "c", "text": "Divide and conquer", "isCorrect": false }
    ],
    "explanation": "You can break the problem into subproblems and cache partial results.",
    "interview_tip": "Tabulation and memoization are DP implementation styles.",
    "references": ["https://en.wikipedia.org/wiki/Dynamic_programming"],
    "timeLimit": 30,
    "points": 3,
    "slug": "dp-principles"
  },
  {
    "id": 7069,
    "title": "Perfect Hashing",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "What is unique about a perfect hash function?",
    "options": [
      {
        "id": "a",
        "text": "No collisions for a known set of keys",
        "isCorrect": true
      },
      { "id": "b", "text": "Works for all possible keys", "isCorrect": false },
      { "id": "c", "text": "Returns negative values", "isCorrect": false }
    ],
    "explanation": "Perfect hashing is collision-free for the original key set.",
    "interview_tip": "Used for small, fixed key sets.",
    "references": ["https://en.wikipedia.org/wiki/Perfect_hash_function"],
    "timeLimit": 30,
    "points": 3,
    "slug": "perfect-hash"
  },
  {
    "id": 7070,
    "title": "Median of Two Sorted Arrays",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "The optimal time complexity to find the median of two sorted arrays is:",
    "options": [
      { "id": "a", "text": "O(log(min(n, m)))", "isCorrect": true },
      { "id": "b", "text": "O(n+m)", "isCorrect": false },
      { "id": "c", "text": "O(n^2)", "isCorrect": false }
    ],
    "explanation": "A binary search partition method achieves O(log min(n, m)).",
    "interview_tip": "Classic Google/Facebook interview problem.",
    "references": [
      "https://leetcode.com/problems/median-of-two-sorted-arrays/"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "median-two-arrays"
  },
  {
    "id": 7071,
    "title": "Trie Search Time",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "What is the time complexity of searching for a string of length L in a trie?",
    "options": [
      { "id": "a", "text": "O(L)", "isCorrect": true },
      { "id": "b", "text": "O(log L)", "isCorrect": false },
      { "id": "c", "text": "O(N)", "isCorrect": false }
    ],
    "explanation": "Each character traverses one level in trie.",
    "interview_tip": "Independent of number of stored words.",
    "references": ["https://en.wikipedia.org/wiki/Trie"],
    "timeLimit": 30,
    "points": 3,
    "slug": "trie-search-time"
  },
  {
    "id": 7072,
    "title": "Maximum Subarray (Kadane’s Algorithm)",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "What does Kadane’s algorithm compute?",
    "options": [
      {
        "id": "a",
        "text": "Largest sum of a contiguous subarray",
        "isCorrect": true
      },
      { "id": "b", "text": "Product of all elements", "isCorrect": false },
      { "id": "c", "text": "Maximum element only", "isCorrect": false }
    ],
    "explanation": "Kadane’s keeps running max and global max for O(n) time.",
    "interview_tip": "Watch for all-negative cases!",
    "references": ["https://en.wikipedia.org/wiki/Maximum_subarray_problem"],
    "timeLimit": 30,
    "points": 3,
    "slug": "kadanes-algo"
  },
  {
    "id": 7073,
    "title": "Rolling Hash Use",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Which algorithmic task are rolling hashes commonly used for?",
    "options": [
      { "id": "a", "text": "String matching (Rabin-Karp)", "isCorrect": true },
      { "id": "b", "text": "Graph coloring", "isCorrect": false },
      { "id": "c", "text": "Trie insertions", "isCorrect": false }
    ],
    "explanation": "Rolling hash updates hash in constant time for substring search.",
    "interview_tip": "Rabin-Karp is a classic rolling hash-based string search.",
    "references": [
      "https://en.wikipedia.org/wiki/Rabin%E2%80%93Karp_algorithm"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "rolling-hash"
  },
  {
    "id": 7074,
    "title": "Kahn’s Algorithm",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "What is Kahn’s algorithm used for?",
    "options": [
      { "id": "a", "text": "Topological sorting of a DAG", "isCorrect": true },
      { "id": "b", "text": "Binary search in arrays", "isCorrect": false },
      { "id": "c", "text": "Maximum bipartite matching", "isCorrect": false }
    ],
    "explanation": "Kahn’s uses in-degree zero queue to order nodes.",
    "interview_tip": "Alternative to DFS-based topological sort.",
    "references": [
      "https://en.wikipedia.org/wiki/Topological_sorting#Kahn's_algorithm"
    ],
    "timeLimit": 30,
    "points": 3,
    "slug": "kahns-algorithm"
  },
  {
    "id": 7075,
    "title": "Type Annotations",
    "category": "TypeScript",
    "difficulty": "Beginner",
    "question": "Which is the correct way to annotate a string variable in TypeScript?",
    "options": [
      { "id": "a", "text": "let name: string;", "isCorrect": true },
      { "id": "b", "text": "let name = string;", "isCorrect": false },
      { "id": "c", "text": "string name;", "isCorrect": false }
    ],
    "explanation": "TypeScript uses the syntax `variableName: type` to add type annotations.",
    "timeLimit": 30,
    "points": 1,
    "slug": "type-annotation-string"
  },
  {
    "id": 7076,
    "title": "Infer Type",
    "category": "TypeScript",
    "difficulty": "Beginner",
    "question": "Which keyword lets TypeScript infer the type automatically?",
    "options": [
      { "id": "a", "text": "let", "isCorrect": true },
      { "id": "b", "text": "define", "isCorrect": false },
      { "id": "c", "text": "typedef", "isCorrect": false }
    ],
    "explanation": "`let age = 20;` infers `age` to be of type `number`.",
    "timeLimit": 30,
    "points": 1,
    "slug": "ts-type-inference"
  },
  {
    "id": 7077,
    "title": "Primitive Types",
    "category": "TypeScript",
    "difficulty": "Beginner",
    "question": "Which of the following is NOT a valid primitive type in TypeScript?",
    "options": [
      { "id": "a", "text": "number", "isCorrect": false },
      { "id": "b", "text": "boolean", "isCorrect": false },
      { "id": "c", "text": "character", "isCorrect": true }
    ],
    "explanation": "TypeScript uses `string`, not `character`. `character` is not a valid type.",
    "timeLimit": 30,
    "points": 1,
    "slug": "ts-primitive-types"
  },
  {
    "id": 7078,
    "title": "Enums",
    "category": "TypeScript",
    "difficulty": "Beginner",
    "question": "What does the following enum definition produce?\n\n``````",
    "options": [
      {
        "id": "a",
        "text": "An object where Up = 0, Down = 1",
        "isCorrect": true
      },
      { "id": "b", "text": "A set of strings", "isCorrect": false },
      { "id": "c", "text": "A tuple", "isCorrect": false }
    ],
    "explanation": "In numeric enums, members are auto-incremented starting at 0 by default.",
    "timeLimit": 30,
    "points": 1,
    "slug": "ts-enum-basic"
  },
  {
    "id": 7079,
    "title": "Type Assertion",
    "category": "TypeScript",
    "difficulty": "Beginner",
    "question": "Which syntax is valid for asserting `input` to be a string?",
    "options": [
      { "id": "a", "text": "let value = input as string;", "isCorrect": true },
      { "id": "b", "text": "let value = input = string;", "isCorrect": false },
      { "id": "c", "text": "let value: input = string;", "isCorrect": false }
    ],
    "explanation": "Type assertion syntax is `value = input as string` or `<string>input`.",
    "timeLimit": 30,
    "points": 1,
    "slug": "ts-type-assertion"
  },

  {
    "id": 7080,
    "title": "Circular Queue Advantage",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "What is a main advantage of a circular queue over a standard queue?",
    "options": [
      {
        "id": "a",
        "text": "Efficient reuse of free space",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Requires less initialization",
        "isCorrect": false
      },
      { "id": "c", "text": "Supports stack operations", "isCorrect": false }
    ],
    "explanation": "Circular queues wrap the rear pointer to the front, using idle slots.",
    "interview_tip": "Prevents wasted slots due to dequeue operations.",
    "references": ["https://en.wikipedia.org/wiki/Circular_buffer"],
    "timeLimit": 30,
    "points": 2,
    "slug": "circular-queue-adv"
  },
  {
    "id": 7081,
    "title": "Deque Operations",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "What operation is unique to a deque (double-ended queue)?",
    "options": [
      {
        "id": "a",
        "text": "Insertion/removal at both front and rear",
        "isCorrect": true
      },
      { "id": "b", "text": "Fixed size", "isCorrect": false },
      { "id": "c", "text": "Binary search", "isCorrect": false }
    ],
    "explanation": "Deque allows O(1) push/pop from both ends.",
    "interview_tip": "Useful for sliding window problems.",
    "references": ["https://en.wikipedia.org/wiki/Double-ended_queue"],
    "timeLimit": 30,
    "points": 2,
    "slug": "deque-ops"
  },
  {
    "id": 7082,
    "title": "Linked List Tail Insert Time",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "What is the time complexity to insert an element at the end of a singly linked list (no tail pointer)?",
    "options": [
      { "id": "a", "text": "O(n)", "isCorrect": true },
      { "id": "b", "text": "O(log n)", "isCorrect": false },
      { "id": "c", "text": "O(1)", "isCorrect": false }
    ],
    "explanation": "Must traverse list to reach the end if no tail.",
    "interview_tip": "Keep a tail pointer for O(1) insertions.",
    "references": [
      "https://www.geeksforgeeks.org/advantages-of-using-doubly-linked-list-over-singly-linked-list/"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "ll-tail-insert"
  },
  {
    "id": 7083,
    "title": "Hash Collisions Handling",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Which method is commonly used for handling hash collisions?",
    "options": [
      { "id": "a", "text": "Chaining with linked lists", "isCorrect": true },
      { "id": "b", "text": "Sorting the hash table", "isCorrect": false },
      { "id": "c", "text": "Ignoring collisions", "isCorrect": false }
    ],
    "explanation": "Colliding elements form a linked list at the bucket.",
    "interview_tip": "Open addressing is another alternative.",
    "references": [
      "https://en.wikipedia.org/wiki/Hash_table#Collision_resolution"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "hash-collision-chaining"
  },
  {
    "id": 7084,
    "title": "Queue by Array Drawback",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "What is a main drawback of implementing a queue with a simple array?",
    "options": [
      {
        "id": "a",
        "text": "Wasted space at the front after many dequeues",
        "isCorrect": true
      },
      { "id": "b", "text": "Enqueue always fails", "isCorrect": false },
      { "id": "c", "text": "Only LIFO is allowed", "isCorrect": false }
    ],
    "explanation": "Unless shifted/circular, dequeued slots are wasted.",
    "interview_tip": "Circular array solves this.",
    "references": ["https://www.programiz.com/dsa/circular-queue"],
    "timeLimit": 30,
    "points": 2,
    "slug": "queue-array-drawback"
  },
  {
    "id": 7085,
    "title": "Depth-First Search (DFS)",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Which data structure is typically used to implement DFS in graphs?",
    "options": [
      {
        "id": "a",
        "text": "Stack (can be via recursion)",
        "isCorrect": true
      },
      { "id": "b", "text": "Queue", "isCorrect": false },
      { "id": "c", "text": "Priority Queue", "isCorrect": false }
    ],
    "explanation": "DFS explores as deep as possible before backtracking; recursion or explicit stack used.",
    "interview_tip": "DFS can be implemented iteratively with a stack, or recursively.",
    "references": ["https://en.wikipedia.org/wiki/Depth-first_search"],
    "timeLimit": 30,
    "points": 2,
    "slug": "dfs-stack"
  },
  {
    "id": 7086,
    "title": "BFS Level Order",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Which algorithm traverses a tree level by level?",
    "options": [
      { "id": "a", "text": "Breadth-First Search (BFS)", "isCorrect": true },
      { "id": "b", "text": "Depth-First Search (DFS)", "isCorrect": false },
      { "id": "c", "text": "Binary Search", "isCorrect": false }
    ],
    "explanation": "BFS uses a queue to visit all nodes at current depth before moving deeper.",
    "interview_tip": "Useful in finding shortest path or minimum moves.",
    "references": ["https://en.wikipedia.org/wiki/Breadth-first_search"],
    "timeLimit": 30,
    "points": 2,
    "slug": "bfs-level-order"
  },
  {
    "id": 7087,
    "title": "Stack for Expression Evaluation",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Which data structure is often used to evaluate arithmetic expressions in postfix (RPN) form?",
    "options": [
      { "id": "a", "text": "Stack", "isCorrect": true },
      { "id": "b", "text": "Queue", "isCorrect": false },
      { "id": "c", "text": "Tree", "isCorrect": false }
    ],
    "explanation": "Operands are pushed, operators pop operands and push results.",
    "interview_tip": "Classic problem for stack understanding.",
    "references": ["https://en.wikipedia.org/wiki/Reverse_Polish_notation"],
    "timeLimit": 30,
    "points": 2,
    "slug": "postfix-stack"
  },
  {
    "id": 7088,
    "title": "Binary Search Complexity",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "What is the time complexity of binary search?",
    "options": [
      { "id": "a", "text": "O(log n)", "isCorrect": true },
      { "id": "b", "text": "O(n)", "isCorrect": false },
      { "id": "c", "text": "O(n log n)", "isCorrect": false }
    ],
    "explanation": "Each comparison halves the search range.",
    "interview_tip": "Only works on sorted data!",
    "references": ["https://en.wikipedia.org/wiki/Binary_search_algorithm"],
    "timeLimit": 30,
    "points": 2,
    "slug": "binary-search-big-o"
  },
  {
    "id": 7089,
    "title": "Circular Linked List",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "How does a circular linked list differ from a standard singly linked list?",
    "options": [
      {
        "id": "a",
        "text": "Last node points back to the first node",
        "isCorrect": true
      },
      { "id": "b", "text": "Supports O(1) indexing", "isCorrect": false },
      { "id": "c", "text": "Nodes have two pointers", "isCorrect": false }
    ],
    "explanation": "Circular lists allow cycling through from end to start.",
    "interview_tip": "Used for round-robin scheduling.",
    "references": [
      "https://en.wikipedia.org/wiki/Linked_list#Circular_linked_lists"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "circular-linked-list"
  },
  {
    "id": 7090,
    "title": "Tree Traversal Order",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Which tree traversal visits root before its subtrees?",
    "options": [
      { "id": "a", "text": "Preorder", "isCorrect": true },
      { "id": "b", "text": "Inorder", "isCorrect": false },
      { "id": "c", "text": "Postorder", "isCorrect": false }
    ],
    "explanation": "Preorder visits root node, then left and right children.",
    "interview_tip": "Preorder is used for copying trees.",
    "references": ["https://en.wikipedia.org/wiki/Tree_traversal"],
    "timeLimit": 30,
    "points": 2,
    "slug": "preorder-traversal"
  },
  {
    "id": 7091,
    "title": "Balance Factor in AVL Trees",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "What is the maximum allowed balance factor for any node in an AVL tree?",
    "options": [
      { "id": "a", "text": "1", "isCorrect": true },
      { "id": "b", "text": "2", "isCorrect": false },
      { "id": "c", "text": "0", "isCorrect": false }
    ],
    "explanation": "Balance factor: left subtree height − right subtree height (must be -1, 0, or +1).",
    "interview_tip": "Rebalancing ensures O(log n) operations.",
    "references": ["https://en.wikipedia.org/wiki/AVL_tree"],
    "timeLimit": 30,
    "points": 2,
    "slug": "avl-balance-factor"
  },
  {
    "id": 7092,
    "title": "Priority Queue Backed By",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Which data structure efficiently implements a priority queue?",
    "options": [
      { "id": "a", "text": "Heap", "isCorrect": true },
      { "id": "b", "text": "Stack", "isCorrect": false },
      { "id": "c", "text": "Deque", "isCorrect": false }
    ],
    "explanation": "Heaps allow O(log n) insertion and extraction of max/min.",
    "interview_tip": "Binary heaps are most common.",
    "references": ["https://en.wikipedia.org/wiki/Priority_queue"],
    "timeLimit": 30,
    "points": 2,
    "slug": "pq-heap"
  },
  {
    "id": 7093,
    "title": "Minimum Spanning Tree",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "What is a Minimum Spanning Tree (MST) of a graph?",
    "options": [
      {
        "id": "a",
        "text": "A subset of edges that connects all vertices with minimum total weight",
        "isCorrect": true
      },
      { "id": "b", "text": "A tree with maximum height", "isCorrect": false },
      {
        "id": "c",
        "text": "A tree covering only a subset of vertices",
        "isCorrect": false
      }
    ],
    "explanation": "MST is key to network design/optimization.",
    "interview_tip": "Kruskal’s and Prim’s algorithms are popular.",
    "references": ["https://en.wikipedia.org/wiki/Minimum_spanning_tree"],
    "timeLimit": 30,
    "points": 2,
    "slug": "mst-definition"
  },
  {
    "id": 7094,
    "title": "Directed Acyclic Graph",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Which structure guarantees no cycles and has directed edges?",
    "options": [
      {
        "id": "a",
        "text": "DAG (Directed Acyclic Graph)",
        "isCorrect": true
      },
      { "id": "b", "text": "Tree", "isCorrect": false },
      { "id": "c", "text": "Undirected graph", "isCorrect": false }
    ],
    "explanation": "DAGs are used for scheduling, dependency resolution, etc.",
    "interview_tip": "DAG is prerequisite for topological sorting.",
    "references": ["https://en.wikipedia.org/wiki/Directed_acyclic_graph"],
    "timeLimit": 30,
    "points": 2,
    "slug": "dag-definition"
  },
  {
    "id": 7095,
    "title": "Trie Usage",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "What task are Tries (Prefix Trees) especially suited for?",
    "options": [
      { "id": "a", "text": "Prefix-based word lookups", "isCorrect": true },
      { "id": "b", "text": "Sorting numbers", "isCorrect": false },
      { "id": "c", "text": "Arithmetic computation", "isCorrect": false }
    ],
    "explanation": "Tries store words with fast prefix lookups for autocomplete, spell checkers, etc.",
    "interview_tip": "Nodes represent characters; paths form words.",
    "references": ["https://en.wikipedia.org/wiki/Trie"],
    "timeLimit": 30,
    "points": 2,
    "slug": "trie-usage"
  },
  {
    "id": 7096,
    "title": "Hash Map vs Tree Map",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "What is a key difference between a hash map and a tree map?",
    "options": [
      {
        "id": "a",
        "text": "Hash maps offer O(1) lookups, tree maps O(log n)",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Trees only allow strings as keys",
        "isCorrect": false
      },
      { "id": "c", "text": "Hash maps are always sorted", "isCorrect": false }
    ],
    "explanation": "Tree maps keep keys sorted (binary search tree); hash maps are unordered.",
    "interview_tip": "Choose based on need for sort or lookup performance.",
    "references": [
      "https://www.geeksforgeeks.org/difference-between-hashmap-and-treemap-in-java/"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "hashmap-vs-treemap"
  },
  {
    "id": 7097,
    "title": "Graph Adjacency Matrix Size",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "For a graph with n vertices, what is the space usage of an adjacency matrix?",
    "options": [
      { "id": "a", "text": "O(n^2)", "isCorrect": true },
      { "id": "b", "text": "O(n)", "isCorrect": false },
      { "id": "c", "text": "O(1)", "isCorrect": false }
    ],
    "explanation": "Matrix is n by n for every possible edge.",
    "interview_tip": "Sparse graphs: adjacency lists are more space efficient.",
    "references": ["https://en.wikipedia.org/wiki/Adjacency_matrix"],
    "timeLimit": 30,
    "points": 2,
    "slug": "adj-matrix-size"
  },
  {
    "id": 7098,
    "title": "Stack Using Queues",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Can a stack be implemented using two queues?",
    "options": [
      {
        "id": "a",
        "text": "Yes, by moving elements between queues for push/pop",
        "isCorrect": true
      },
      { "id": "b", "text": "No, it's not possible", "isCorrect": false },
      { "id": "c", "text": "Only works with arrays", "isCorrect": false }
    ],
    "explanation": "Can simulate stack LIFO with two FIFO queues by shifting elements.",
    "interview_tip": "Classic coding challenge: implement pop or push costly.",
    "references": [
      "https://www.geeksforgeeks.org/implement-stack-using-queue/"
    ],
    "timeLimit": 30,
    "points": 2,
    "slug": "stack-with-queues"
  },
  {
    "id": 7099,
    "title": "Graph Connected Components",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "What is a connected component in a graph?",
    "options": [
      {
        "id": "a",
        "text": "A maximal set of nodes where each pair is connected by a path",
        "isCorrect": true
      },
      { "id": "b", "text": "A node with no edges", "isCorrect": false },
      { "id": "c", "text": "The shortest path tree", "isCorrect": false }
    ],
    "explanation": "Each disconnected part of a graph forms a component.",
    "interview_tip": "Find by BFS/DFS traversal from every unvisited node.",
    "references": ["https://en.wikipedia.org/wiki/Component_(graph_theory)"],
    "timeLimit": 30,
    "points": 2,
    "slug": "graph-components"
  },
  {
    "id": 7100,
    "title": "Default Parameter",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "How can you define a default parameter value in a TypeScript function?",
    "options": [
      {
        "id": "a",
        "text": "function greet(name = 'Guest')",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "function greet(name := 'Guest')",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "function greet(name as 'Guest')",
        "isCorrect": false
      }
    ],
    "explanation": "Default parameter syntax uses `=` to assign a default in the function definition.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-default-param"
  },
  {
    "id": 7101,
    "title": "Union Types",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "How can you declare a variable that can hold either a string or a number?",
    "options": [
      { "id": "a", "text": "let value: string | number;", "isCorrect": true },
      {
        "id": "b",
        "text": "let value: string || number;",
        "isCorrect": false
      },
      { "id": "c", "text": "let value: any[];", "isCorrect": false }
    ],
    "explanation": "Union type syntax uses the `|` symbol for multiple allowed types.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-union-types"
  },
  {
    "id": 7102,
    "title": "Type Alias",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "Which of the following is a valid type alias in TypeScript?",
    "options": [
      { "id": "a", "text": "type Age = number;", "isCorrect": true },
      { "id": "b", "text": "define Age: number;", "isCorrect": false },
      { "id": "c", "text": "alias Age = number;", "isCorrect": false }
    ],
    "explanation": "`type` is used to create type aliases in TypeScript.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-type-alias"
  },
  {
    "id": 7103,
    "title": "Type Narrowing",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What allows TypeScript to narrow a union type within a code block?",
    "options": [
      { "id": "a", "text": "Type guards", "isCorrect": true },
      { "id": "b", "text": "Generic types", "isCorrect": false },
      { "id": "c", "text": "Type assertion only", "isCorrect": false }
    ],
    "explanation": "Type guards (like `typeof`, `instanceof`) help narrow down types accurately at runtime.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-type-narrowing"
  },
  {
    "id": 7104,
    "title": "Function Overloading",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What is function overloading in TypeScript?",
    "options": [
      {
        "id": "a",
        "text": "Supporting multiple signatures for a function",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Declaring multiple constructors",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Calling a function inside a function",
        "isCorrect": false
      }
    ],
    "explanation": "Function overloading defines multiple signatures but must implement a combined function body.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-function-overloading"
  },
  {
    "id": 7105,
    "title": "Tuple Destructuring",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "Which of these correctly destructures a tuple?",
    "options": [
      { "id": "a", "text": "let [x, y] = myTuple;", "isCorrect": true },
      { "id": "b", "text": "let (x, y) = myTuple;", "isCorrect": false },
      { "id": "c", "text": "let x, y = myTuple;", "isCorrect": false }
    ],
    "explanation": "Tuple destructuring uses array-like [ ] syntax.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-tuple-destructuring"
  },
  {
    "id": 7106,
    "title": "Readonly Modifier",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "Which modifier makes a class property immutable?",
    "options": [
      { "id": "a", "text": "readonly", "isCorrect": true },
      { "id": "b", "text": "final", "isCorrect": false },
      { "id": "c", "text": "frozen", "isCorrect": false }
    ],
    "explanation": "`readonly` ensures the property cannot be modified after initialization.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-readonly"
  },
  {
    "id": 7107,
    "title": "Dynamic Keys (Index Signature)",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What is the TypeScript syntax for an object with dynamic string keys and number values?",
    "options": [
      { "id": "a", "text": "{ [key: string]: number }", "isCorrect": true },
      { "id": "b", "text": "{ string: number }", "isCorrect": false },
      { "id": "c", "text": "{ key(string): number }", "isCorrect": false }
    ],
    "explanation": "Index signatures let you define keys as types like `string` or `number` dynamically.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-index-signature"
  },
  {
    "id": 7108,
    "title": "Optional Parameters",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "How do you mark a function parameter as optional?",
    "options": [
      {
        "id": "a",
        "text": "By adding `?` after the parameter name",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "By using `optional` before it",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "By using union types with `undefined`",
        "isCorrect": false
      }
    ],
    "explanation": "`?` makes the parameter optional in function declarations.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-optional-param"
  },
  {
    "id": 7109,
    "title": "Enums in TypeScript",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What does the following enum produce?\n\n`enum Direction { Up, Down }`",
    "options": [
      { "id": "a", "text": "Up = 0, Down = 1", "isCorrect": true },
      { "id": "b", "text": "Up = 'Up', Down = 'Down'", "isCorrect": false },
      {
        "id": "c",
        "text": "Up = undefined, Down = undefined",
        "isCorrect": false
      }
    ],
    "explanation": "Numeric enums default to assigning values from 0 upwards.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-enum-output"
  },
  {
    "id": 7100,
    "title": "Default Parameter",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "How can you define a default parameter value in a TypeScript function?",
    "options": [
      {
        "id": "a",
        "text": "function greet(name = 'Guest')",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "function greet(name := 'Guest')",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "function greet(name as 'Guest')",
        "isCorrect": false
      }
    ],
    "explanation": "Default parameter syntax uses `=` to assign a default in the function definition.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-default-param"
  },
  {
    "id": 7101,
    "title": "Union Types",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "How can you declare a variable that can hold either a string or a number?",
    "options": [
      { "id": "a", "text": "let value: string | number;", "isCorrect": true },
      { "id": "b", "text": "let value: string || number;", "isCorrect": false },
      { "id": "c", "text": "let value: any[];", "isCorrect": false }
    ],
    "explanation": "Union type syntax uses the `|` symbol for multiple allowed types.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-union-types"
  },
  {
    "id": 7102,
    "title": "Type Alias",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "Which of the following is a valid type alias in TypeScript?",
    "options": [
      { "id": "a", "text": "type Age = number;", "isCorrect": true },
      { "id": "b", "text": "define Age: number;", "isCorrect": false },
      { "id": "c", "text": "alias Age = number;", "isCorrect": false }
    ],
    "explanation": "`type` is used to create type aliases in TypeScript.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-type-alias"
  },
  {
    "id": 7103,
    "title": "Type Narrowing",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What allows TypeScript to narrow a union type within a code block?",
    "options": [
      { "id": "a", "text": "Type guards", "isCorrect": true },
      { "id": "b", "text": "Generic types", "isCorrect": false },
      { "id": "c", "text": "Type assertion only", "isCorrect": false }
    ],
    "explanation": "Type guards (like `typeof`, `instanceof`) help narrow down types accurately at runtime.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-type-narrowing"
  },
  {
    "id": 7104,
    "title": "Function Overloading",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What is function overloading in TypeScript?",
    "options": [
      {
        "id": "a",
        "text": "Supporting multiple signatures for a function",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Declaring multiple constructors",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Calling a function inside a function",
        "isCorrect": false
      }
    ],
    "explanation": "Function overloading defines multiple signatures but must implement a combined function body.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-function-overloading"
  },
  {
    "id": 7105,
    "title": "Tuple Destructuring",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "Which of these correctly destructures a tuple?",
    "options": [
      { "id": "a", "text": "let [x, y] = myTuple;", "isCorrect": true },
      { "id": "b", "text": "let (x, y) = myTuple;", "isCorrect": false },
      { "id": "c", "text": "let x, y = myTuple;", "isCorrect": false }
    ],
    "explanation": "Tuple destructuring uses array-like [ ] syntax.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-tuple-destructuring"
  },
  {
    "id": 7106,
    "title": "Readonly Modifier",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "Which modifier makes a class property immutable?",
    "options": [
      { "id": "a", "text": "readonly", "isCorrect": true },
      { "id": "b", "text": "final", "isCorrect": false },
      { "id": "c", "text": "frozen", "isCorrect": false }
    ],
    "explanation": "`readonly` ensures the property cannot be modified after initialization.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-readonly"
  },
  {
    "id": 7107,
    "title": "Dynamic Keys (Index Signature)",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What is the TypeScript syntax for an object with dynamic string keys and number values?",
    "options": [
      { "id": "a", "text": "{ [key: string]: number }", "isCorrect": true },
      { "id": "b", "text": "{ string: number }", "isCorrect": false },
      { "id": "c", "text": "{ key(string): number }", "isCorrect": false }
    ],
    "explanation": "Index signatures let you define keys as types like `string` or `number` dynamically.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-index-signature"
  },
  {
    "id": 7108,
    "title": "Optional Parameters",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "How do you mark a function parameter as optional?",
    "options": [
      {
        "id": "a",
        "text": "By adding `?` after the parameter name",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "By using `optional` before it",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "By using union types with `undefined`",
        "isCorrect": false
      }
    ],
    "explanation": "`?` makes the parameter optional in function declarations.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-optional-param"
  },
  {
    "id": 7109,
    "title": "Enums in TypeScript",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What does the following enum produce?\n\n`enum Direction { Up, Down }`",
    "options": [
      { "id": "a", "text": "Up = 0, Down = 1", "isCorrect": true },
      { "id": "b", "text": "Up = 'Up', Down = 'Down'", "isCorrect": false },
      {
        "id": "c",
        "text": "Up = undefined, Down = undefined",
        "isCorrect": false
      }
    ],
    "explanation": "Numeric enums default to assigning values from 0 upwards.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-enum-output"
  },
  {
    "id": 7110,
    "title": "Type Guard Keyword",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "Which keyword is commonly used for implementing type guards?",
    "options": [
      { "id": "a", "text": "typeof", "isCorrect": true },
      { "id": "b", "text": "instance", "isCorrect": false },
      { "id": "c", "text": "guard", "isCorrect": false }
    ],
    "explanation": "Type guards use `typeof`, `instanceof`, or custom predicate functions.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-type-guard-keyword"
  },
  {
    "id": 7111,
    "title": "Tuple in TypeScript",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What is a tuple in TypeScript?",
    "options": [
      {
        "id": "a",
        "text": "An array with a fixed number and types of elements",
        "isCorrect": true
      },
      { "id": "b", "text": "A dynamic unordered list", "isCorrect": false },
      { "id": "c", "text": "Any object with keys", "isCorrect": false }
    ],
    "explanation": "Tuples define an array with fixed length and types, e.g., [string, number].",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-tuple-definition"
  },
  {
    "id": 7112,
    "title": "Void Return Type",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "Which return type should be used for a function that does not return anything?",
    "options": [
      { "id": "a", "text": "void", "isCorrect": true },
      { "id": "b", "text": "undefined", "isCorrect": false },
      { "id": "c", "text": "never", "isCorrect": false }
    ],
    "explanation": "`void` indicates that the function returns `undefined`, or nothing.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-return-void"
  },
  {
    "id": 7113,
    "title": "Never Type",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "When is the `never` type used?",
    "options": [
      {
        "id": "a",
        "text": "For functions that never return",
        "isCorrect": true
      },
      { "id": "b", "text": "When a value can be null", "isCorrect": false },
      { "id": "c", "text": "For deprecated types", "isCorrect": false }
    ],
    "explanation": "`never` is assigned to things that can’t occur (e.g., infinite loop, throw error).",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-never-type"
  },
  {
    "id": 7114,
    "title": "Keyof Operator",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What does the `keyof` operator return?",
    "options": [
      {
        "id": "a",
        "text": "A union of the property names of a type",
        "isCorrect": true
      },
      { "id": "b", "text": "A union of property values", "isCorrect": false },
      { "id": "c", "text": "A boolean", "isCorrect": false }
    ],
    "explanation": "`keyof` is used to get all keys of a type as a union of string literals.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-keyof"
  },
  {
    "id": 7115,
    "title": "Mapped Types",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What does a mapped type do?",
    "options": [
      {
        "id": "a",
        "text": "Applies transformation to keys in a type",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Applies transformations to arrays",
        "isCorrect": false
      },
      { "id": "c", "text": "Maps one variable to another", "isCorrect": false }
    ],
    "explanation": "Mapped types generate new types by transforming properties of existing ones.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-mapped-types"
  },
  {
    "id": 7116,
    "title": "Intersection Types",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What operator is used in TypeScript to create an intersection type?",
    "options": [
      { "id": "a", "text": "&", "isCorrect": true },
      { "id": "b", "text": "|", "isCorrect": false },
      { "id": "c", "text": "&&", "isCorrect": false }
    ],
    "explanation": "The `&` symbol combines types, requiring the value to fulfill both.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-intersection-type"
  },
  {
    "id": 7117,
    "title": "typeof in TypeScript",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What does the TypeScript `typeof` operator allow you to do?",
    "options": [
      {
        "id": "a",
        "text": "Capture the type of a variable in another declaration",
        "isCorrect": true
      },
      { "id": "b", "text": "Create union types", "isCorrect": false },
      { "id": "c", "text": "Get the length of a string", "isCorrect": false }
    ],
    "explanation": "`typeof` lets you reference the type of an existing variable.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-typeof"
  },
  {
    "id": 7118,
    "title": "typeof vs instanceof",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What is the main difference between `typeof` and `instanceof` in TypeScript?",
    "options": [
      {
        "id": "a",
        "text": "`typeof` is used for primitives, `instanceof` is for class instances",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "`typeof` is only used in classes",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "`instanceof` returns the type of variable",
        "isCorrect": false
      }
    ],
    "explanation": "`typeof` is for `number`, `string`, etc. `instanceof` checks for constructor reference.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-typeof-vs-instanceof"
  },
  {
    "id": 7119,
    "title": "Declaration Merging",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What is declaration merging in TypeScript?",
    "options": [
      {
        "id": "a",
        "text": "Combining interfaces and namespaces with the same name",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Using two interfaces in a file",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Combining multiple types with & operator",
        "isCorrect": false
      }
    ],
    "explanation": "Declaration merging lets you extend declarations with the same name.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-declaration-merging"
  },
  {
    "id": 7120,
    "title": "Literal Types",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "Which of the following is a literal type?",
    "options": [
      { "id": "a", "text": "'success'", "isCorrect": true },
      { "id": "b", "text": "string", "isCorrect": false },
      { "id": "c", "text": "{ type: string }", "isCorrect": false }
    ],
    "explanation": "String literals like `'success'` can form literal types.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-literal-type"
  },
  {
    "id": 7121,
    "title": "Utility Types - Partial",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What does the `Partial<T>` utility type do?",
    "options": [
      { "id": "a", "text": "Makes all properties optional", "isCorrect": true },
      { "id": "b", "text": "Removes all properties", "isCorrect": false },
      { "id": "c", "text": "Makes all properties required", "isCorrect": false }
    ],
    "explanation": "`Partial<T>` is useful for constructing type-safe patch/update objects.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-utility-partial"
  },
  {
    "id": 7122,
    "title": "Non-null Assertion Operator",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What does `!` do after a variable name in TypeScript?",
    "options": [
      {
        "id": "a",
        "text": "Asserts the value is neither null nor undefined",
        "isCorrect": true
      },
      { "id": "b", "text": "Indicates negation", "isCorrect": false },
      { "id": "c", "text": "Converts it to a boolean", "isCorrect": false }
    ],
    "explanation": "It tells the compiler the value is definitely assigned.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-non-null-assert"
  },
  {
    "id": 7123,
    "title": "Global Declaration File",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "Which file extension is used for declaration files in TypeScript?",
    "options": [
      { "id": "a", "text": ".d.ts", "isCorrect": true },
      { "id": "b", "text": ".tsd", "isCorrect": false },
      { "id": "c", "text": ".dt", "isCorrect": false }
    ],
    "explanation": "`.d.ts` defines types for modules and global declarations.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-decl-file"
  },
  {
    "id": 7124,
    "title": "Generic Constraints",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "How do you restrict a type parameter to specific keys of an interface?",
    "options": [
      { "id": "a", "text": "Use `extends keyof Interface`", "isCorrect": true },
      { "id": "b", "text": "Use `implement Interface`", "isCorrect": false },
      { "id": "c", "text": "Use `extract Interface`", "isCorrect": false }
    ],
    "explanation": "`extends keyof T` forces the type variable to match one of the keys.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-generic-constraints"
  },
  {
    "id": 7125,
    "title": "Rest Parameters",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "Which syntax defines rest parameters in TypeScript?",
    "options": [
      { "id": "a", "text": "...args: string[]", "isCorrect": true },
      { "id": "b", "text": "**args: string[]", "isCorrect": false },
      { "id": "c", "text": "args[]", "isCorrect": false }
    ],
    "explanation": "`...args` collects multiple trailing arguments into a single array.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-rest-params"
  },
  {
    "id": 7126,
    "title": "ReadonlyArray",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What is a `ReadonlyArray<T>` in TypeScript?",
    "options": [
      {
        "id": "a",
        "text": "An array whose contents cannot be changed",
        "isCorrect": true
      },
      { "id": "b", "text": "A constant variable", "isCorrect": false },
      { "id": "c", "text": "A tuple", "isCorrect": false }
    ],
    "explanation": "`ReadonlyArray<T>` prevents methods like push/pop from being used.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-readonly-array"
  },
  {
    "id": 7127,
    "title": "Discriminated Union",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What enables creating advanced type-safe unions of interfaces?",
    "options": [
      {
        "id": "a",
        "text": "Discriminated union with literal tags",
        "isCorrect": true
      },
      { "id": "b", "text": "String indexing alone", "isCorrect": false },
      { "id": "c", "text": "Intersection types only", "isCorrect": false }
    ],
    "explanation": "A literal property tag lets you switch on types safely at runtime.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-discriminated-union"
  },
  {
    "id": 7128,
    "title": "typeof keyof Combination",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What does `typeof obj[keyof typeof obj]` refer to?",
    "options": [
      { "id": "a", "text": "The types of values of `obj`", "isCorrect": true },
      { "id": "b", "text": "Keys only", "isCorrect": false },
      { "id": "c", "text": "A tuple of obj keys", "isCorrect": false }
    ],
    "explanation": "`keyof typeof obj` gives keys; indexing with those yields the value types.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-typeof-keyof"
  },
  {
    "id": 7129,
    "title": "Generic Interfaces",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "How do you define a generic interface?",
    "options": [
      { "id": "a", "text": "interface Box<T>", "isCorrect": true },
      { "id": "b", "text": "generic interface Box", "isCorrect": false },
      { "id": "c", "text": "interface<T> Box", "isCorrect": false }
    ],
    "explanation": "Generics in interfaces follow type parameter syntax: `interface Box<T> { value: T }`.",
    "timeLimit": 30,
    "points": 2,
    "slug": "ts-generic-interface"
  },

  {
    "id": 7130,
    "title": "Generics with Constraints",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "How do you limit a generic type parameter to only accept types that have a length property?",
    "options": [
      {
        "id": "a",
        "text": "function test<T extends { length: number }>(): void",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "function test<T lengthable>(): void",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "function test<T implements Length>(): void",
        "isCorrect": false
      }
    ],
    "explanation": "Generics with `extends { length: number }` ensure T has a length property.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-generic-constraint-length"
  },
  {
    "id": 7131,
    "title": "Conditional Types",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "Which is the correct syntax for a conditional (ternary) type in TypeScript?",
    "options": [
      { "id": "a", "text": "type T = U extends V ? X : Y", "isCorrect": true },
      {
        "id": "b",
        "text": "type T = U if V then X else Y",
        "isCorrect": false
      },
      { "id": "c", "text": "type T = (U | V) & (X | Y)", "isCorrect": false }
    ],
    "explanation": "Conditional types use syntax `A extends B ? X : Y`.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-conditional-types"
  },
  {
    "id": 7132,
    "title": "Indexed Access Types",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What does `T[K]` mean if K is a key of T?",
    "options": [
      {
        "id": "a",
        "text": "The type of the property K of type T",
        "isCorrect": true
      },
      { "id": "b", "text": "A function returning T", "isCorrect": false },
      { "id": "c", "text": "A tuple of K and T", "isCorrect": false }
    ],
    "explanation": "Indexed access types fetch the type of a property dynamically.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-indexed-access-type"
  },
  {
    "id": 7133,
    "title": "Infer Keyword Usage",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What is the function of the `infer` keyword in conditional types?",
    "options": [
      {
        "id": "a",
        "text": "To extract and name a type variable within a conditional type",
        "isCorrect": true
      },
      { "id": "b", "text": "To cast values", "isCorrect": false },
      { "id": "c", "text": "To merge interfaces", "isCorrect": false }
    ],
    "explanation": "`infer U` lets you define and use U as a deduced type inside a conditional.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-infer"
  },
  {
    "id": 7134,
    "title": "Mapped Type Modifiers",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "How do you remove the 'readonly' modifier in a mapped type?",
    "options": [
      { "id": "a", "text": "-readonly modifer", "isCorrect": true },
      { "id": "b", "text": "~readonly modifier", "isCorrect": false },
      { "id": "c", "text": "readonly: false", "isCorrect": false }
    ],
    "explanation": "The mapped syntax `-readonly` before key removes the readonly flag.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-mapped-remove-readonly"
  },
  {
    "id": 7135,
    "title": "Omit Utility Type",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What does the `Omit<T, K>` utility type do?",
    "options": [
      {
        "id": "a",
        "text": "Creates a type by excluding keys K from type T",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Omits literal types from unions",
        "isCorrect": false
      },
      { "id": "c", "text": "Combines T and K only", "isCorrect": false }
    ],
    "explanation": "`Omit` removes specified keys from a type.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-omit-utility"
  },
  {
    "id": 7136,
    "title": "ReturnType Utility",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "How do you get the return type of a function in TypeScript?",
    "options": [
      {
        "id": "a",
        "text": "ReturnType<typeof functionName>",
        "isCorrect": true
      },
      { "id": "b", "text": "typeof functionName.return", "isCorrect": false },
      { "id": "c", "text": "returns functionName", "isCorrect": false }
    ],
    "explanation": "ReturnType extracts the return type of a function.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-returntype"
  },
  {
    "id": 7137,
    "title": "Parameters Utility",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What does `Parameters<typeof fn>` return?",
    "options": [
      {
        "id": "a",
        "text": "A tuple of parameter types for fn",
        "isCorrect": true
      },
      { "id": "b", "text": "Return type of fn", "isCorrect": false },
      { "id": "c", "text": "A list of function names", "isCorrect": false }
    ],
    "explanation": "`Parameters` utility forms a tuple type of a function's parameters.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-parameters"
  },
  {
    "id": 7138,
    "title": "Module Augmentation",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What is module augmentation?",
    "options": [
      {
        "id": "a",
        "text": "Adding new declarations to an existing module",
        "isCorrect": true
      },
      { "id": "b", "text": "Repeating an import", "isCorrect": false },
      { "id": "c", "text": "Removing exports", "isCorrect": false }
    ],
    "explanation": "Module augmentation allows extending existing type declarations.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-module-augmentation"
  },
  {
    "id": 7139,
    "title": "Ambient Declaration",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What is an ambient declaration in TypeScript?",
    "options": [
      {
        "id": "a",
        "text": "A declaration for values provided externally",
        "isCorrect": true
      },
      { "id": "b", "text": "A default parameter", "isCorrect": false },
      { "id": "c", "text": "A method overload", "isCorrect": false }
    ],
    "explanation": "Ambient declarations use `declare` for externally defined types or variables.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-ambient"
  },
  {
    "id": 7140,
    "title": "Decorator Signature",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "Which is a valid decorator signature for a class method?",
    "options": [
      {
        "id": "a",
        "text": "function (target: Object, propertyKey: string, descriptor: PropertyDescriptor)",
        "isCorrect": true
      },
      { "id": "b", "text": "function (target: number)", "isCorrect": false },
      { "id": "c", "text": "function (descriptor: string)", "isCorrect": false }
    ],
    "explanation": "The full decorator signature includes class prototype, property, and method descriptor.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-decorator-sig"
  },
  {
    "id": 7141,
    "title": "Decorator Metadata",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What must you enable in tsconfig.json to use metadata reflection with decorators?",
    "options": [
      { "id": "a", "text": "emitDecoratorMetadata", "isCorrect": true },
      { "id": "b", "text": "checkMetadata", "isCorrect": false },
      { "id": "c", "text": "reflectTypes", "isCorrect": false }
    ],
    "explanation": "`emitDecoratorMetadata` allows runtime type info for decorators.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-decorator-metadata"
  },
  {
    "id": 7142,
    "title": "Key Remapping in Mapped Types",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What is key remapping in mapped types?",
    "options": [
      {
        "id": "a",
        "text": "Changing the property keys to a new name or value during mapping",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Changing property values only",
        "isCorrect": false
      },
      { "id": "c", "text": "Omitting keys", "isCorrect": false }
    ],
    "explanation": "Mapped types with `as` can rename keys while producing new types.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-key-remap"
  },
  {
    "id": 7143,
    "title": "Distributive Conditional Types",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "When is a conditional type distributive?",
    "options": [
      {
        "id": "a",
        "text": "When its checked type is a naked type parameter",
        "isCorrect": true
      },
      { "id": "b", "text": "On any object", "isCorrect": false },
      { "id": "c", "text": "For all literal types", "isCorrect": false }
    ],
    "explanation": "Distributive means a union A|B is split as C<A> | C<B> if C<T> is conditional on naked T.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-distributive-type"
  },
  {
    "id": 7144,
    "title": "Assert Function Types",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What special return type does an assertion function use?",
    "options": [
      { "id": "a", "text": "asserts x is T", "isCorrect": true },
      { "id": "b", "text": "returns T", "isCorrect": false },
      { "id": "c", "text": "void", "isCorrect": false }
    ],
    "explanation": "Assertion functions let TS narrow types after runtime checks.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-assertion-func"
  },
  {
    "id": 7145,
    "title": "Type Predicate Return",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What does a type predicate in a return type do?",
    "options": [
      {
        "id": "a",
        "text": "Narrows the type of its variable for the following block",
        "isCorrect": true
      },
      { "id": "b", "text": "Checks prototype chain", "isCorrect": false },
      { "id": "c", "text": "Returns an object", "isCorrect": false }
    ],
    "explanation": "A predicate `x is T` allows using `x` as type T after the function is true.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-type-predicate"
  },
  {
    "id": 7146,
    "title": "Type Query Operator typeof",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What does the `typeof` operator do when used in a type context?",
    "options": [
      {
        "id": "a",
        "text": "Extracts the type of a variable or property",
        "isCorrect": true
      },
      { "id": "b", "text": "Returns the runtime value", "isCorrect": false },
      { "id": "c", "text": "Returns string at runtime", "isCorrect": false }
    ],
    "explanation": "In a type context, `typeof` yields the type, not runtime value.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-type-query"
  },
  {
    "id": 7147,
    "title": "Literal Inference",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "Which TypeScript utility infers the most restricted (literal) type for a value?",
    "options": [
      { "id": "a", "text": "const assertion (as const)", "isCorrect": true },
      { "id": "b", "text": "readonly modifier", "isCorrect": false },
      { "id": "c", "text": "never type", "isCorrect": false }
    ],
    "explanation": "`as const` preserves literal types, not expanding to string, number, etc.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-literal-infer"
  },
  {
    "id": 7148,
    "title": "Template Literal Types",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What does TypeScript allow with template literal types?",
    "options": [
      {
        "id": "a",
        "text": "Building new string types from unions/strings",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Template strings in runtime JS only",
        "isCorrect": false
      },
      { "id": "c", "text": "Restricting number types", "isCorrect": false }
    ],
    "explanation": "Template literal types create unions of formatted string types at compile time.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-template-literal-type"
  },
  {
    "id": 7149,
    "title": "Module Resolution Strategies",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "Which are valid module resolution strategies in TypeScript?",
    "options": [
      { "id": "a", "text": "Classic and Node", "isCorrect": true },
      { "id": "b", "text": "CommonJS and AMD only", "isCorrect": false },
      { "id": "c", "text": "System and UMD only", "isCorrect": false }
    ],
    "explanation": "TypeScript supports Classic and Node for resolving modules.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-module-resolution"
  },
  {
    "id": 7150,
    "title": "Namespace Merging",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What happens if you declare the same namespace multiple times in TypeScript?",
    "options": [
      {
        "id": "a",
        "text": "They are merged into a single namespace",
        "isCorrect": true
      },
      { "id": "b", "text": "An error occurs", "isCorrect": false },
      { "id": "c", "text": "Only the last is kept", "isCorrect": false }
    ],
    "explanation": "TypeScript merges all declarations with the same namespace name.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-namespace-merge"
  },
  {
    "id": 7151,
    "title": "Generic Defaults",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "How do you provide a default for a generic parameter?",
    "options": [
      { "id": "a", "text": "type Box<T = string>", "isCorrect": true },
      { "id": "b", "text": "type Box<T or string>", "isCorrect": false },
      { "id": "c", "text": "type Box<T | string>", "isCorrect": false }
    ],
    "explanation": "T = string means T defaults to string unless specified otherwise.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-generic-default"
  },
  {
    "id": 7152,
    "title": "Recursive Conditional Type",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What is a recursive conditional type?",
    "options": [
      {
        "id": "a",
        "text": "A type that calls itself within its definition via conditional type",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "A type alias for a recursive function",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "A conditional property signature",
        "isCorrect": false
      }
    ],
    "explanation": "These types build complex transforms, e.g., flattening arrays, at the type level.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-recursive-conditional"
  },
  {
    "id": 7153,
    "title": "Distributive Omit",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What does Omit distributively do over union types?",
    "options": [
      {
        "id": "a",
        "text": "Removes keys from each member of a union individually",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Omits keys only from the first",
        "isCorrect": false
      },
      { "id": "c", "text": "Combines all properties", "isCorrect": false }
    ],
    "explanation": "Distributive means Omit<|> applies to each member type in a union separately.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-distributive-omit"
  },
  {
    "id": 7154,
    "title": "Optional Chaining",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What does the optional chaining operator (`?.`) do?",
    "options": [
      {
        "id": "a",
        "text": "Prevents errors if accessing undefined or null",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "Provides types for optional properties",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "Sets a value to null if not defined",
        "isCorrect": false
      }
    ],
    "explanation": "`?.` safely accesses properties or calls functions; returns undefined if nullish.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-optional-chaining"
  },
  {
    "id": 7155,
    "title": "BigInt Support",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "How can you specify a BigInt literal in TypeScript?",
    "options": [
      { "id": "a", "text": "By appending n, e.g. 123n", "isCorrect": true },
      { "id": "b", "text": "By using bigint()", "isCorrect": false },
      { "id": "c", "text": "By writing BigInt(123)", "isCorrect": false }
    ],
    "explanation": "BigInts are denoted with an `n` suffix, such as 100n.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-bigint-literal"
  },
  {
    "id": 7156,
    "title": "Key Constraint In Generic",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "Which constraint is used to ensure a generic K is a property key of T?",
    "options": [
      { "id": "a", "text": "K extends keyof T", "isCorrect": true },
      { "id": "b", "text": "K is keyof T", "isCorrect": false },
      { "id": "c", "text": "K in T", "isCorrect": false }
    ],
    "explanation": "`extends keyof T` restricts K to be one of T's keys.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-generic-keyof"
  },
  {
    "id": 7157,
    "title": "GlobalThis",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What is `globalThis` in TypeScript?",
    "options": [
      {
        "id": "a",
        "text": "A standard global object accessible in any environment",
        "isCorrect": true
      },
      { "id": "b", "text": "An alias for window", "isCorrect": false },
      { "id": "c", "text": "A function", "isCorrect": false }
    ],
    "explanation": "`globalThis` is the ECMAScript standard global object covering node, browser, etc.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-globalthis"
  },
  {
    "id": 7158,
    "title": "Export = Syntax",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "Which export syntax allows compatibility with CommonJS and ES modules?",
    "options": [
      { "id": "a", "text": "export = value", "isCorrect": true },
      { "id": "b", "text": "module.exports = value", "isCorrect": false },
      { "id": "c", "text": "export value", "isCorrect": false }
    ],
    "explanation": "`export = foo` bridges TypeScript and CommonJS.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-export-equals"
  },
  {
    "id": 7159,
    "title": "Type-Only Imports",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "How do you import only types in TypeScript (no JS emitted)?",
    "options": [
      {
        "id": "a",
        "text": "import type { Foo } from './bar';",
        "isCorrect": true
      },
      {
        "id": "b",
        "text": "import {type Foo} from './bar';",
        "isCorrect": false
      },
      {
        "id": "c",
        "text": "import Foo as type from './bar';",
        "isCorrect": false
      }
    ],
    "explanation": "`import type` ensures only types are imported, not runtime code.",
    "timeLimit": 30,
    "points": 3,
    "slug": "ts-type-only-import"
  }
]

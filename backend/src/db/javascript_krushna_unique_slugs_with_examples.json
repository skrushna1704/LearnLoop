[
  {
    "id": 1,
    "title": "Is JavaScript a dynamically typed language or a statically typed language?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "Is JavaScript a dynamically typed language or a statically typed language?",
    "answer": [
      "JavaScript is a dynamically typed language.",
      "It means all type checks are done at run time (when the program is executing).",
      "We can assign anything to the variable and it works fine.",
      "TypeScript is a statically typed language. All checks are performed at compile time."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "is-javascript-a-dynamically-typed-language-or-a-statically-typed-language"
  },
  {
    "id": 2,
    "title": "What are the different datatypes in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What are the different datatypes in JavaScript?",
    "answer": [
      "Primitive datatypes:",
      "String",
      "number",
      "boolean",
      "null",
      "undefined",
      "Bigint",
      "symbol",
      "Non-Primitive datatypes:",
      "Object",
      "Array",
      "Date"
    ],
    "interview_tip": "(Most asked)",
    "references": [],
    "slug": "what-are-the-different-datatypes-in-javascript"
  },
  {
    "id": 3,
    "title": "What is Hoisting in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is Hoisting in JavaScript?",
    "answer": [
      "In other scripting/server side languages, variables or functions must be declared before using it.",
      "In JavaScript, variables and functions can be used before declaring it.",
      "The JavaScript compiler moves all the declarations of variables and functions on top, so there will not be any error.",
      "This is called hoisting."
    ],
    "interview_tip": "Mention buzz word temporal dead zone in above answer so that interviewer will ask What is temporal dead zone.",
    "references": [],
    "slug": "what-is-hoisting-in-javascript"
  },
  {
    "id": 4,
    "title": "What are the various things hoisted in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What are the various things hoisted in JavaScript?",
    "answer": [
      "Function declarations: Fully hoisted.",
      "var - Hoisted",
      "Arrow functions: Not hoisted",
      "Anonymous Function expressions: Not hoisted",
      "let - Hoisted but not initialized. (Temporal dead zone)",
      "const - Hoisted but not initialized. (Temporal dead zone)",
      "class declarations - Hoisted but not initialized."
    ],
    "interview_tip": null,
    "references": [
      "https://stackabuse.com/hoisting-in-javascript/"
    ],
    "slug": "what-are-the-various-things-hoisted-in-javascript"
  },
  {
    "id": 5,
    "title": "What is temporal dead zone?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is temporal dead zone?",
    "answer": [
      "It is a specific time period in the execution of JavaScript code where the variables declared with let and const exist but cannot be accessed until the value is assigned.",
      "Any attempt to access them results in reference errors."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-temporal-dead-zone"
  },
  {
    "id": 6,
    "title": "What are the differences between let, var and const?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What are the differences between let, var and const?",
    "answer": [
      "Scope:",
      "Variables declared with var are function scoped (available throughout the function where itâ€™s declared) or global scoped if defined outside the function.",
      "Variables declared with let and const are block scoped.",
      "Reassignment:",
      "var and let can be reassigned.",
      "const cannot be reassigned.",
      "Hoisting:",
      "var gets hoisted and initialized with undefined.",
      "let and const get hoisted to the top of the scope but do not get assigned any value (temporal dead zone)."
    ],
    "interview_tip": "(Most asked)",
    "references": [],
    "slug": "what-are-the-differences-between-let-var-and-const"
  },
  {
    "id": 7,
    "title": "List out some key features of ES6.",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "List out some key features of ES6.",
    "answer": [
      "Arrow functions",
      "Let and Const declarations",
      "Destructuring assignment",
      "Default parameters",
      "Template literals",
      "Spread and Rest operators",
      "Promises",
      "Classes",
      "Modules",
      "Map, Set, WeakMap, WeakSet"
    ],
    "interview_tip": "Here try to explain definitions (provided in below questions) for these features so that you can kill 2-3 minutes of interview time ðŸ˜‰",
    "references": [],
    "slug": "list-out-some-key-features-of-es6"
  },
  {
    "id": 8,
    "title": "What are limitations of arrow functions in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What are limitations of arrow functions in JavaScript?",
    "answer": [
      "Arrow functions cannot be accessed before initialization.",
      "Arrow functions do not have access to the arguments object.",
      "Arrow functions do not have their own this. Instead, they inherit this from the surrounding code at the time the function is defined.",
      "Arrow functions cannot be used as constructors. Using them with the new keyword throws a TypeError.",
      "Arrow functions cannot be used as generator functions."
    ],
    "interview_tip": "Arrow functions + this combination questions will be asked here. Please explore on this combination.",
    "references": [],
    "slug": "what-are-limitations-of-arrow-functions-in-javascript"
  },
  {
    "id": 9,
    "title": "Whatâ€™s the spread operator in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "Whatâ€™s the spread operator in JavaScript?",
    "answer": [
      "Spread operator is used to spread or expand the elements of an iterable like an array or string into individual elements.",
      "Uses:",
      "Concatenating arrays.",
      "Copying arrays or objects.",
      "Passing array of values as individual arguments to a function."
    ],
    "interview_tip": "Practice the above examples mentioned and showcase them in interviews to make the interviewer think you are a practical person. ðŸ˜‰",
    "references": [],
    "slug": "what-s-the-spread-operator-in-javascript"
  },
  {
    "id": 10,
    "title": "What is rest operator in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is rest operator in JavaScript?",
    "answer": [
      "Rest operator is used to condense multiple elements into a single array or object.",
      "Itâ€™s useful when we donâ€™t know how many parameters a function may receive and want to capture all of them as an array."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-rest-operator-in-javascript"
  },
  {
    "id": 11,
    "title": "What is destructuring?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is destructuring?",
    "answer": [
      "It is introduced in ES6.",
      "It allows us to assign the object properties and array values to distinct variables.",
      "Example with objects: const { age, name } = user;",
      "Example with arrays: const [a, b] = [1, 2];"
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-destructuring"
  },
  {
    "id": 12,
    "title": "What are the differences between Map and Set?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What are the differences between Map and Set?",
    "answer": [
      "Map is the collection of key-value pairs.",
      "Set is a collection of unique values.",
      "Map is two-dimensional.",
      "Set is one-dimensional.",
      "Map examples involve .set(), .get(), .has(), etc.",
      "Set examples involve .add(), .has(), .delete(), etc."
    ],
    "interview_tip": null,
    "references": [
      "https://javascript.info/map-set"
    ],
    "slug": "what-are-the-differences-between-map-and-set"
  },
  {
    "id": 13,
    "title": "What are modules in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What are modules in JavaScript?",
    "answer": [
      "Modules allow us to break down large pieces of code into smaller parts.",
      "They help us write more reusable and maintainable code.",
      "Modules can be imported and exported using import and export statements."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-are-modules-in-javascript"
  },
  {
    "id": 14,
    "title": "What is the difference between 'Pass by Value' and 'Pass by Reference'?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the difference between 'Pass by Value' and 'Pass by Reference'?",
    "answer": [
      "Primitive datatypes such as string, number, boolean, null, and undefined are passed by value.",
      "Non-primitive datatypes such as objects, arrays, or functions are passed by reference.",
      "In pass by value, changes inside the function donâ€™t affect the original value.",
      "In pass by reference, changes inside the function affect the original value."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-the-difference-between-pass-by-value-and-pass-by-reference"
  },
  {
    "id": 15,
    "title": "What is the difference between map and filter?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the difference between map and filter?",
    "answer": [
      "map transforms each element of an array and creates a new array containing the transformed elements.",
      "filter creates a new array with only those elements which satisfy the specified condition."
    ],
    "interview_tip": "(Frequently asked)",
    "references": [],
    "slug": "what-is-the-difference-between-map-and-filter"
  },
  {
    "id": 16,
    "title": "What is the difference between map() and forEach()?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the difference between map() and forEach()?",
    "answer": [
      "map transforms the elements of an array and returns a new array with the transformed values.",
      "forEach is used to loop through elements of an array but does not return a new array.",
      "map can be chained with other array methods because it returns an array, whereas forEach does not."
    ],
    "interview_tip": "(Frequently asked)",
    "references": [],
    "slug": "what-is-the-difference-between-map-and-foreach"
  },
  {
    "id": 17,
    "title": "What is the difference between for-in and for-of?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the difference between for-in and for-of?",
    "answer": [
      "for-in iterates over the enumerable property keys of an object.",
      "for-of iterates over the values of an iterable object like arrays, strings, NodeLists, etc.",
      "Using for-of on an object will result in an error because objects are not inherently iterable."
    ],
    "interview_tip": null,
    "references": [
      "https://stackoverflow.com/questions/29285897/difference-between-for-in-and-for-of-statements?answertab=scoredesc#tab-top"
    ],
    "slug": "what-is-the-difference-between-for-in-and-for-of"
  },
  {
    "id": 18,
    "title": "What is difference between find vs findIndex?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is difference between find vs findIndex?",
    "answer": [
      "find returns the first element of an array that passes the specified condition.",
      "findIndex returns the index of the first element that passes the specified condition."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-difference-between-find-vs-findindex"
  },
  {
    "id": 19,
    "title": "What is the difference between Pure and Impure functions?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the difference between Pure and Impure functions?",
    "answer": [
      "Pure functions return the same output for the same input.",
      "Pure functions have no side effects.",
      "Pure functions do not modify any non-local state.",
      "Impure functions may produce different outputs for the same inputs.",
      "Impure functions can have side effects.",
      "Impure functions can modify non-local state."
    ],
    "interview_tip": null,
    "references": [
      "https://www.scaler.com/topics/pure-function-in-javascript/"
    ],
    "slug": "what-is-the-difference-between-pure-and-impure-functions"
  },
  {
    "id": 20,
    "title": "What are the differences between call(), apply() and bind()?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What are the differences between call(), apply() and bind()?",
    "answer": [
      "call invokes the function immediately with the given this value and arguments passed one by one.",
      "apply invokes the function immediately with the given this value and arguments passed as an array.",
      "bind returns a new function with the given this value and arguments, which can be invoked later."
    ],
    "interview_tip": "Give examples and then execute the examples to explain the differences. This helps.",
    "references": [],
    "slug": "what-are-the-differences-between-call-apply-and-bind"
  },
  {
    "id": 21,
    "title": "Different ways to create object in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "Different ways to create object in JavaScript?",
    "answer": [
      "Object literal syntax: let userDetails = { name: \"Saikrishna\", city: \"Hyderabad\" };",
      "Object constructor: let userDetails = new Object(); userDetails.name = \"Saikrishna\";",
      "Object.create(): Used when we want to inherit properties from an existing object while creating a new object.",
      "Object.assign(): Used when we want to include properties from multiple other objects into a new object."
    ],
    "interview_tip": "Give examples and then explain them.",
    "references": [
      "https://www.scaler.com/topics/objects-in-javascript/"
    ],
    "slug": "different-ways-to-create-object-in-javascript"
  },
  {
    "id": 22,
    "title": "Whatâ€™s the difference between Object.keys, Object.values and Object.entries?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "Whatâ€™s the difference between Object.keys, Object.values and Object.entries?",
    "answer": [
      "Object.keys(): returns an array of keys.",
      "Object.values(): returns an array of values.",
      "Object.entries(): returns an array of [key, value] pairs."
    ],
    "interview_tip": "Practice examples for thisâ€”it might be asked.",
    "references": [],
    "slug": "what-s-the-difference-between-object-keys-object-values-and-object-entries"
  },
  {
    "id": 23,
    "title": "Whatâ€™s the difference between Object.freeze() and Object.seal()?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "Whatâ€™s the difference between Object.freeze() and Object.seal()?",
    "answer": [
      "Object.freeze(): Makes the object immutable, preventing addition of new properties and modification of existing ones.",
      "Object.seal(): Prevents the addition of new properties but allows modification of existing properties."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-s-the-difference-between-object-freeze-and-object-seal"
  },
  {
    "id": 24,
    "title": "What is a polyfill in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is a polyfill in JavaScript?",
    "answer": [
      "A polyfill is a piece of code which provides modern functionality to older browsers that do not natively support it."
    ],
    "interview_tip": "If polyfill is asked, then 99% they will ask you to write a polyfill. So practice at least 2-3 polyfills (map, forEach compulsory).",
    "references": [
      "https://dev.to/umerjaved178/polyfills-for-foreach-map-filter-reduce-in-javascript-1h13"
    ],
    "slug": "what-is-a-polyfill-in-javascript"
  },
  {
    "id": 25,
    "title": "What is prototype in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is prototype in JavaScript?",
    "answer": [
      "Prototype allows us to add properties to a function at a later stage which can be accessed across all its instances."
    ],
    "interview_tip": null,
    "references": [
      "https://www.tutorialsteacher.com/javascript/prototype-in-javascript"
    ],
    "slug": "what-is-prototype-in-javascript"
  },
  {
    "id": 26,
    "title": "What is generator function in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is generator function in JavaScript?",
    "answer": [
      "A generator function is a function which can be paused and resumed at any point during execution.",
      "They are defined using function* syntax and contain one or more yield expressions.",
      "The main method of a generator is next(), which returns an object with properties done and value."
    ],
    "interview_tip": null,
    "references": [
      "https://javascript.info/generators"
    ],
    "slug": "what-is-generator-function-in-javascript"
  },
  {
    "id": 27,
    "title": "What is IIFE?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is IIFE?",
    "answer": [
      "IIFE stands for Immediately Invoked Function Expression.",
      "These are functions which are executed immediately once they are mounted to the stack, without needing an explicit call."
    ],
    "interview_tip": null,
    "references": [
      "https://www.geeksforgeeks.org/immediately-invoked-function-expressions-iife-in-javascript/",
      "https://www.tutorialsteacher.com/javascript/immediately-invoked-function-expression-iife"
    ],
    "slug": "what-is-iife"
  },
  {
    "id": 28,
    "title": "What is CORS?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is CORS?",
    "answer": [
      "CORS stands for Cross-Origin Resource Sharing.",
      "It is a security feature that allows web applications from one domain to request resources like APIs/scripts from another domain.",
      "CORS works by adding specific HTTP headers to control which origins have access to the resources and under what conditions."
    ],
    "interview_tip": "This definition is more than enough, so prepare this answer well.",
    "references": [
      "https://dev.to/lydiahallie/cs-visualized-cors-5b8h"
    ],
    "slug": "what-is-cors"
  },
  {
    "id": 29,
    "title": "What are the differences between TypeScript and JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What are the differences between TypeScript and JavaScript?",
    "answer": [
      "TypeScript is a superset of JavaScript and has object-oriented features.",
      "JavaScript is dynamically typed, whereas TypeScript is statically typed.",
      "TypeScript is better suited for large-scale applications.",
      "TypeScript points out compilation errors during development, reducing runtime errors.",
      "TypeScript supports interfaces; JavaScript does not.",
      "Functions can have optional parameters in TypeScript, but not in JavaScript.",
      "TypeScript takes longer to compile."
    ],
    "interview_tip": "If your interview contains TypeScript then this is a 99% sure question. Prepare these differences blindly.",
    "references": [],
    "slug": "what-are-the-differences-between-typescript-and-javascript"
  },
  {
    "id": 30,
    "title": "What is authentication vs authorization?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is authentication vs authorization?",
    "answer": [
      "Authentication is the process of verifying who the user is.",
      "Authorization is the process of verifying what resources the user has access to."
    ],
    "interview_tip": "For this question, learn JWT token mechanism and mention that you have implemented it in your project. This helps a lot and can kill at least 3-4 minutes of interview time. ðŸ˜‰",
    "references": [
      "https://www.youtube.com/watch?v=7Q17ubqLfaM"
    ],
    "slug": "what-is-authentication-vs-authorization"
  },
  {
    "id": 31,
    "title": "What is the use of JSON.stringify() and JSON.parse()?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the use of JSON.stringify() and JSON.parse()?",
    "answer": [
      "JSON.stringify() is used to convert JavaScript objects into JSON strings.",
      "JSON.parse() is used to convert JSON strings back into JavaScript objects."
    ],
    "interview_tip": "They may ask you to implement deep clone logic using JSON methods.",
    "references": [],
    "slug": "what-is-the-use-of-json-stringify-and-json-parse"
  },
  {
    "id": 32,
    "title": "What are closures in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What are closures in JavaScript?",
    "answer": [
      "A closure is a combination of a function and the lexical environment within which that function was declared.",
      "It allows a function to access variables from an enclosing scope or environment even after that outer function has closed."
    ],
    "interview_tip": "This is one of the most asked questions. Make sure to explain with an example and try to explain it in your own words. ðŸ˜‰",
    "references": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures"
    ],
    "slug": "what-are-closures-in-javascript"
  },
  {
    "id": 33,
    "title": "What is the difference between synchronous and asynchronous programming?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the difference between synchronous and asynchronous programming?",
    "answer": [
      "In synchronous programming, statements are executed one after another and each statement waits for the previous one to finish.",
      "In asynchronous programming, statements do not wait for previous statements to complete and can execute independently, allowing tasks like network requests to happen without blocking code execution."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-the-difference-between-synchronous-and-asynchronous-programming"
  },
  {
    "id": 34,
    "title": "How do you handle asynchronous code in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "How do you handle asynchronous code in JavaScript?",
    "answer": [
      "Using callbacks",
      "Using Promises",
      "Using async/await syntax"
    ],
    "interview_tip": "Practice writing code snippets with each of these approaches and explain them with examples during interviews.",
    "references": [],
    "slug": "how-do-you-handle-asynchronous-code-in-javascript"
  },
  {
    "id": 35,
    "title": "What are Promises in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What are Promises in JavaScript?",
    "answer": [
      "A Promise is an object that represents the eventual completion (or failure) of an asynchronous operation and its resulting value.",
      "It has three states: pending, fulfilled, and rejected.",
      "Promises help avoid callback hell and make code more readable."
    ],
    "interview_tip": "Try to explain with an example showing resolve and reject usage.",
    "references": [],
    "slug": "what-are-promises-in-javascript"
  },
  {
    "id": 36,
    "title": "What is async/await in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is async/await in JavaScript?",
    "answer": [
      "async and await are used to handle asynchronous operations in a synchronous fashion.",
      "An async function always returns a Promise.",
      "await can be used inside async functions to pause the execution until the Promise is resolved or rejected."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-async-await-in-javascript"
  },
  {
    "id": 37,
    "title": "What is the event loop in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the event loop in JavaScript?",
    "answer": [
      "The event loop is a mechanism that allows JavaScript to perform non-blocking operations by offloading tasks to the browser or Node.js APIs and handling them via callbacks when complete.",
      "It manages the call stack and the task queue to process asynchronous operations efficiently."
    ],
    "interview_tip": "This is a highly asked concept. Be prepared with visuals and examples to explain how it works.",
    "references": [
      "https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif"
    ],
    "slug": "what-is-the-event-loop-in-javascript"
  },
  {
    "id": 38,
    "title": "What is the difference between microtasks and macrotasks?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the difference between microtasks and macrotasks?",
    "answer": [
      "Microtasks include Promises and MutationObservers, which are executed immediately after the current task and before the next macrotask.",
      "Macrotasks include setTimeout, setInterval, setImmediate, and I/O operations, which are executed after the microtasks queue is cleared."
    ],
    "interview_tip": "Understanding this is key to explaining the event loop properly.",
    "references": [],
    "slug": "what-is-the-difference-between-microtasks-and-macrotasks"
  },
  {
    "id": 39,
    "title": "What is throttling and debouncing?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is throttling and debouncing?",
    "answer": [
      "Throttling limits the number of times a function can be called over time. It ensures a function is executed at most once every X milliseconds.",
      "Debouncing delays the execution of a function until after a specified wait time has passed since the last time the function was invoked. It's useful for events like resize or keyup."
    ],
    "interview_tip": "They might ask you to implement throttle or debounce, so practice coding them.",
    "references": [
      "https://css-tricks.com/debouncing-throttling-explained-examples/"
    ],
    "slug": "what-is-throttling-and-debouncing"
  },
  {
    "id": 40,
    "title": "Explain deep copy vs shallow copy in JavaScript.",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "Explain deep copy vs shallow copy in JavaScript.",
    "answer": [
      "A shallow copy copies an objectâ€™s top-level properties only, and nested objects are shared between the original and the copy.",
      "A deep copy copies all levels of an object, creating entirely new nested objects, ensuring changes in the copy do not affect the original."
    ],
    "interview_tip": "They may ask you to implement deep copy logic.",
    "references": [],
    "slug": "explain-deep-copy-vs-shallow-copy-in-javascript"
  },
  {
    "id": 41,
    "title": "What is NaN in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What is NaN in JavaScript?",
    "answer": [
      "NaN stands for Not-a-Number.",
      "It is a special value representing a computational error or an invalid mathematical operation.",
      "It is of type number but cannot be compared directly using == or ===."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-nan-in-javascript"
  },
  {
    "id": 42,
    "title": "What is the typeof NaN?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What is the typeof NaN?",
    "answer": [
      "The typeof NaN is 'number'."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-the-typeof-nan"
  },
  {
    "id": 43,
    "title": "What is the difference between == and ===?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What is the difference between == and ===?",
    "answer": [
      "== checks for value equality after performing type coercion if necessary.",
      "=== checks for both value and type equality without performing type coercion."
    ],
    "interview_tip": "(Most asked)",
    "references": [],
    "slug": "what-is-the-difference-between-and"
  },
  {
    "id": 44,
    "title": "What is the difference between null and undefined?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What is the difference between null and undefined?",
    "answer": [
      "undefined means a variable has been declared but not yet assigned a value.",
      "null is an assignment value that represents no value or no object."
    ],
    "interview_tip": "(Frequently asked)",
    "references": [],
    "slug": "what-is-the-difference-between-null-and-undefined"
  },
  {
    "id": 45,
    "title": "What is the typeof null?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What is the typeof null?",
    "answer": [
      "typeof null is 'object'.",
      "It is a historical bug in JavaScript."
    ],
    "interview_tip": "Mention the historical bug. This impresses interviewers.",
    "references": [],
    "slug": "what-is-the-typeof-null"
  },
  {
    "id": 46,
    "title": "What is undefined + 1?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What is undefined + 1?",
    "answer": [
      "The result is NaN because undefined is converted to NaN in numeric operations."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-undefined-1"
  },
  {
    "id": 47,
    "title": "What is null + 1?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What is null + 1?",
    "answer": [
      "The result is 1 because null is converted to 0 in numeric operations."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-null-1"
  },
  {
    "id": 48,
    "title": "What is NaN === NaN?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is NaN === NaN?",
    "answer": [
      "NaN === NaN returns false.",
      "NaN is the only value in JavaScript that is not equal to itself."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-nan-nan"
  },
  {
    "id": 49,
    "title": "How can we check if a value is NaN?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "How can we check if a value is NaN?",
    "answer": [
      "We can use the built-in function Number.isNaN(value)."
    ],
    "interview_tip": "Be cautious of global isNaN which does coercion and may lead to unexpected results.",
    "references": [],
    "slug": "how-can-we-check-if-a-value-is-nan"
  },
  {
    "id": 50,
    "title": "What is the global object in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the global object in JavaScript?",
    "answer": [
      "The global object is a special object which is accessible from anywhere in your JavaScript code.",
      "In browsers, itâ€™s the window object.",
      "In Node.js, itâ€™s the global object."
    ],
    "interview_tip": "Remember to differentiate between browser and Node.js environments.",
    "references": [],
    "slug": "what-is-the-global-object-in-javascript"
  },
  {
    "id": 51,
    "title": "What is the difference between window and document objects?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the difference between window and document objects?",
    "answer": [
      "window object represents the browser window and provides methods to control the browser (like alert, confirm, etc.).",
      "document object represents the DOM of the web page loaded in the window.",
      "window.document points to the document object."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-the-difference-between-window-and-document-objects"
  },
  {
    "id": 52,
    "title": "What is the DOM?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What is the DOM?",
    "answer": [
      "DOM stands for Document Object Model.",
      "It is a programming interface for HTML and XML documents.",
      "It represents the structure of a document as a tree of nodes."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-the-dom"
  },
  {
    "id": 53,
    "title": "What are DOM manipulation methods?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What are DOM manipulation methods?",
    "answer": [
      "getElementById",
      "getElementsByClassName",
      "getElementsByTagName",
      "querySelector",
      "querySelectorAll",
      "createElement",
      "appendChild",
      "removeChild",
      "replaceChild",
      "innerHTML",
      "textContent"
    ],
    "interview_tip": "They may ask you to write examples using these methods.",
    "references": [],
    "slug": "what-are-dom-manipulation-methods"
  },
  {
    "id": 54,
    "title": "What is event bubbling?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is event bubbling?",
    "answer": [
      "Event bubbling is when an event triggered on a child element propagates up through its ancestors in the DOM tree.",
      "It allows event listeners on parent elements to respond to events fired on children."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-event-bubbling"
  },
  {
    "id": 55,
    "title": "What is event capturing?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is event capturing?",
    "answer": [
      "Event capturing is the opposite of bubbling.",
      "Events are first captured from the outermost ancestor down to the target element.",
      "Itâ€™s less commonly used than bubbling."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-event-capturing"
  },
  {
    "id": 56,
    "title": "How do you prevent event bubbling?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "How do you prevent event bubbling?",
    "answer": [
      "By using event.stopPropagation() method.",
      "This prevents the event from bubbling up the DOM tree."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "how-do-you-prevent-event-bubbling"
  },
  {
    "id": 57,
    "title": "What is the difference between stopPropagation() and stopImmediatePropagation()?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the difference between stopPropagation() and stopImmediatePropagation()?",
    "answer": [
      "stopPropagation() prevents further propagation of the event in the bubbling or capturing phase.",
      "stopImmediatePropagation() not only prevents further propagation but also prevents other handlers of the same event on the same element from being executed."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-the-difference-between-stoppropagation-and-stopimmediatepropagation"
  },
  {
    "id": 58,
    "title": "What is event delegation?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is event delegation?",
    "answer": [
      "Event delegation is a technique where a single event listener is added to a parent element to manage events on multiple child elements.",
      "It works by leveraging event bubbling.",
      "It improves performance by reducing the number of event listeners."
    ],
    "interview_tip": "They might ask you to write an event delegation example.",
    "references": [],
    "slug": "what-is-event-delegation"
  },
  {
    "id": 59,
    "title": "What is the use of addEventListener?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What is the use of addEventListener?",
    "answer": [
      "addEventListener allows us to attach multiple event handlers to the same element for the same event.",
      "It provides control over event bubbling and capturing phases."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-the-use-of-addeventlistener"
  },
  {
    "id": 60,
    "title": "What is the difference between innerHTML and textContent?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the difference between innerHTML and textContent?",
    "answer": [
      "innerHTML returns or sets the HTML markup inside an element, including tags.",
      "textContent returns or sets only the text content, ignoring HTML tags."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-the-difference-between-innerhtml-and-textcontent"
  },
  {
    "id": 61,
    "title": "How can you copy an object in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "How can you copy an object in JavaScript?",
    "answer": [
      "Using Object.assign({}, obj)",
      "Using the spread operator {...obj}",
      "Using JSON.parse(JSON.stringify(obj)) for deep cloning"
    ],
    "interview_tip": "Be aware of shallow vs deep copy differences.",
    "references": [],
    "slug": "how-can-you-copy-an-object-in-javascript"
  },
  {
    "id": 62,
    "title": "What is the purpose of the this keyword?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the purpose of the this keyword?",
    "answer": [
      "this refers to the object that is executing the current function.",
      "Its value depends on how the function was called.",
      "In global scope, this refers to window in browsers or global in Node.js."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-the-purpose-of-the-this-keyword"
  },
  {
    "id": 63,
    "title": "What does strict mode do in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What does strict mode do in JavaScript?",
    "answer": [
      "Strict mode makes JavaScript more secure and reduces silent errors.",
      "It prevents the use of undeclared variables.",
      "It changes the value of this in functions to undefined instead of window in non-method calls.",
      "It disallows duplicate parameter names."
    ],
    "interview_tip": null,
    "references": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode"
    ],
    "slug": "what-does-strict-mode-do-in-javascript"
  },
  {
    "id": 64,
    "title": "How can you check if a variable is an array?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "How can you check if a variable is an array?",
    "answer": [
      "Array.isArray(variable)",
      "variable instanceof Array"
    ],
    "interview_tip": null,
    "references": [],
    "slug": "how-can-you-check-if-a-variable-is-an-array"
  },
  {
    "id": 65,
    "title": "What is the difference between slice() and splice()?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the difference between slice() and splice()?",
    "answer": [
      "slice() returns a shallow copy of a portion of an array without modifying the original array.",
      "splice() changes the original array by adding or removing elements."
    ],
    "interview_tip": "(Frequently asked)",
    "references": [],
    "slug": "what-is-the-difference-between-slice-and-splice"
  },
  {
    "id": 66,
    "title": "What is the purpose of localStorage and sessionStorage?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the purpose of localStorage and sessionStorage?",
    "answer": [
      "Both are used to store key-value pairs in the browser.",
      "localStorage persists data even after the browser is closed.",
      "sessionStorage data is cleared when the browser tab is closed."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-the-purpose-of-localstorage-and-sessionstorage"
  },
  {
    "id": 67,
    "title": "What is memoization?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is memoization?",
    "answer": [
      "Memoization is a programming technique that stores the result of expensive function calls and returns the cached result when the same inputs occur again."
    ],
    "interview_tip": "They may ask you to implement a simple memoization function.",
    "references": [],
    "slug": "what-is-memoization"
  },
  {
    "id": 68,
    "title": "What is functional programming?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is functional programming?",
    "answer": [
      "A programming paradigm where functions are treated as first-class citizens.",
      "It avoids side effects and relies on pure functions.",
      "Immutability and composition are key concepts in functional programming."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-functional-programming"
  },
  {
    "id": 69,
    "title": "What is currying?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is currying?",
    "answer": [
      "Currying is a technique of converting a function with multiple arguments into a series of functions each taking one argument.",
      "For example: function sum(a)(b)(c) returns a + b + c."
    ],
    "interview_tip": "They might ask you to implement a curry function.",
    "references": [],
    "slug": "what-is-currying"
  },
  {
    "id": 70,
    "title": "What is composition in functional programming?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is composition in functional programming?",
    "answer": [
      "Composition is the process of combining two or more functions to produce a new function.",
      "The output of one function becomes the input of another."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-composition-in-functional-programming"
  },
  {
    "id": 71,
    "title": "What is the purpose of Object.create()?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the purpose of Object.create()?",
    "answer": [
      "It creates a new object with the specified prototype object.",
      "It allows for prototype-based inheritance."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-the-purpose-of-object-create"
  },
  {
    "id": 72,
    "title": "What is the use of Object.assign()?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the use of Object.assign()?",
    "answer": [
      "It copies the values of all enumerable properties from one or more source objects to a target object."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-the-use-of-object-assign"
  },
  {
    "id": 73,
    "title": "What are template literals?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What are template literals?",
    "answer": [
      "Template literals allow us to embed expressions in strings using backticks (`) instead of quotes.",
      "They support multi-line strings and string interpolation using ${} syntax."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-are-template-literals"
  },
  {
    "id": 74,
    "title": "What is destructuring assignment?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is destructuring assignment?",
    "answer": [
      "Destructuring assignment allows unpacking values from arrays or properties from objects into distinct variables in a single statement."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-destructuring-assignment"
  },
  {
    "id": 75,
    "title": "What is Symbol in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is Symbol in JavaScript?",
    "answer": [
      "Symbol is a primitive data type introduced in ES6.",
      "Symbols are unique and immutable and can be used as object property keys to avoid property name conflicts."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-symbol-in-javascript"
  },
  {
    "id": 76,
    "title": "What is Set in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is Set in JavaScript?",
    "answer": [
      "A Set is a collection of unique values.",
      "It does not allow duplicate elements.",
      "Set methods include add(), delete(), has(), and clear()."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-set-in-javascript"
  },
  {
    "id": 77,
    "title": "What is WeakMap in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is WeakMap in JavaScript?",
    "answer": [
      "WeakMap is a collection of key-value pairs where keys are objects.",
      "Keys in WeakMap are weakly referenced, allowing garbage collection.",
      "WeakMap does not prevent its keys from being garbage collected if there are no other references to them."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-weakmap-in-javascript"
  },
  {
    "id": 78,
    "title": "What is WeakSet in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is WeakSet in JavaScript?",
    "answer": [
      "WeakSet is similar to Set, but it only stores objects and does not prevent them from being garbage collected.",
      "WeakSet does not have methods to iterate over its elements."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-weakset-in-javascript"
  },
  {
    "id": 79,
    "title": "Explain the difference between == and === in JavaScript.",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "Explain the difference between == and === in JavaScript.",
    "answer": [
      "== checks for value equality after performing type coercion if necessary.",
      "=== checks for both value and type equality without performing type coercion."
    ],
    "interview_tip": "(Most asked)",
    "references": [],
    "slug": "explain-the-difference-between-and-in-javascript"
  },
  {
    "id": 80,
    "title": "What is typeof operator in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Beginner",
    "question": "What is typeof operator in JavaScript?",
    "answer": [
      "typeof is an operator used to determine the type of a given variable.",
      "It returns a string indicating the data type."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-typeof-operator-in-javascript"
  },
  {
    "id": 81,
    "title": "What is instanceOf operator?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is instanceOf operator?",
    "answer": [
      "instanceOf operator checks whether an object is an instance of a particular class or constructor function.",
      "It returns true or false."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-instanceof-operator"
  },
  {
    "id": 82,
    "title": "What is callback function in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is callback function in JavaScript?",
    "answer": [
      "A callback function is a function passed as an argument to another function, to be executed later.",
      "Callbacks are often used for handling asynchronous operations."
    ],
    "interview_tip": "Be prepared to write examples of callbacks in code.",
    "references": [],
    "slug": "what-is-callback-function-in-javascript"
  },
  {
    "id": 83,
    "title": "Explain event loop in Node.js.",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "Explain event loop in Node.js.",
    "answer": [
      "The event loop in Node.js allows non-blocking I/O by delegating operations to the system and handling callbacks when operations complete.",
      "Node.js processes tasks from the event queue, allowing asynchronous execution."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "explain-event-loop-in-node-js"
  },
  {
    "id": 84,
    "title": "What is process.nextTick() in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is process.nextTick() in Node.js?",
    "answer": [
      "process.nextTick() is used to schedule a callback function to be invoked after the current operation completes and before the event loop continues.",
      "It ensures a callback executes immediately after the current function completes execution."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-process-nexttick-in-node-js"
  },
  {
    "id": 85,
    "title": "What is Buffer in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is Buffer in Node.js?",
    "answer": [
      "Buffer is a global object in Node.js used to handle binary data.",
      "It allows reading and writing of binary streams such as files and network protocols."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-buffer-in-node-js"
  },
  {
    "id": 86,
    "title": "What is npm in Node.js?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is npm in Node.js?",
    "answer": [
      "npm stands for Node Package Manager.",
      "It is a tool used to manage dependencies in Node.js projects.",
      "It allows developers to install, update, and share reusable code packages."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-npm-in-node-js"
  },
  {
    "id": 87,
    "title": "What is package.json?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is package.json?",
    "answer": [
      "package.json is a file used to manage a Node.js project's metadata.",
      "It includes details such as project name, version, dependencies, scripts, and other configuration."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-package-json"
  },
  {
    "id": 88,
    "title": "What is the purpose of require() in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is the purpose of require() in Node.js?",
    "answer": [
      "require() is used to import modules, JSON files, or other JavaScript files into a Node.js application.",
      "It enables modular code organization."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-the-purpose-of-require-in-node-js"
  },
  {
    "id": 89,
    "title": "What is module.exports?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is module.exports?",
    "answer": [
      "module.exports is an object used to define what a module exports and makes available through require().",
      "It allows sharing functions, objects, or primitives from one file to another."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-module-exports"
  },
  {
    "id": 90,
    "title": "What is middleware in Express.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is middleware in Express.js?",
    "answer": [
      "Middleware in Express.js is a function that has access to the request, response, and next objects.",
      "It can modify the request/response, end the request-response cycle, or call the next middleware in the stack."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-middleware-in-express-js"
  },
  {
    "id": 91,
    "title": "What is routing in Express.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is routing in Express.js?",
    "answer": [
      "Routing in Express.js refers to defining endpoints that respond to client requests.",
      "It determines how an application responds to a particular HTTP method and URL."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-routing-in-express-js"
  },
  {
    "id": 92,
    "title": "What is CORS in Express.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is CORS in Express.js?",
    "answer": [
      "CORS stands for Cross-Origin Resource Sharing.",
      "In Express.js, CORS can be enabled to allow requests from different domains using middleware."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-cors-in-express-js"
  },
  {
    "id": 93,
    "title": "What is callback hell?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is callback hell?",
    "answer": [
      "Callback hell refers to the situation where callbacks are nested within other callbacks, leading to unreadable and hard-to-maintain code.",
      "Itâ€™s also known as pyramid of doom."
    ],
    "interview_tip": "Mention how Promises and async/await can help avoid callback hell.",
    "references": [],
    "slug": "what-is-callback-hell"
  },
  {
    "id": 94,
    "title": "What is error-first callback?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is error-first callback?",
    "answer": [
      "An error-first callback is a pattern where the first argument of the callback is reserved for an error object, and the second argument contains the result data.",
      "If thereâ€™s no error, the first argument is null."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-error-first-callback"
  },
  {
    "id": 95,
    "title": "What is process object in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is process object in Node.js?",
    "answer": [
      "The process object is a global object that provides information about and control over the current Node.js process.",
      "It allows access to environment variables, command-line arguments, and can be used to exit the process."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-process-object-in-node-js"
  },
  {
    "id": 96,
    "title": "What are streams in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What are streams in Node.js?",
    "answer": [
      "Streams are objects that allow reading or writing data piece by piece instead of loading the entire data into memory.",
      "Streams improve performance when working with large files or network operations."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-are-streams-in-node-js"
  },
  {
    "id": 97,
    "title": "What are the types of streams in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What are the types of streams in Node.js?",
    "answer": [
      "Readable streams",
      "Writable streams",
      "Duplex streams",
      "Transform streams"
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-are-the-types-of-streams-in-node-js"
  },
  {
    "id": 98,
    "title": "What is the cluster module in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is the cluster module in Node.js?",
    "answer": [
      "The cluster module allows creating child processes that share the same server port.",
      "It helps in scaling Node.js applications across multiple CPU cores."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-the-cluster-module-in-node-js"
  },
  {
    "id": 99,
    "title": "What is REPL in Node.js?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is REPL in Node.js?",
    "answer": [
      "REPL stands for Read-Eval-Print Loop.",
      "It is an interactive shell for executing Node.js code and testing snippets quickly."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-repl-in-node-js"
  },
  {
    "id": 100,
    "title": "What is event emitter in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is event emitter in Node.js?",
    "answer": [
      "The event emitter is a class in Node.js used to handle events.",
      "It allows an object to emit named events and register listener functions for those events."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-event-emitter-in-node-js"
  },
  {
    "id": 101,
    "title": "What is middleware chaining in Express.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is middleware chaining in Express.js?",
    "answer": [
      "Middleware chaining allows you to execute multiple middleware functions in sequence.",
      "Each middleware function can modify the request and response objects or end the request-response cycle.",
      "Calling next() passes control to the next middleware function in the stack."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-middleware-chaining-in-express-js"
  },
  {
    "id": 102,
    "title": "What is helmet in Express.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is helmet in Express.js?",
    "answer": [
      "helmet is a middleware for Express.js that helps secure your apps by setting various HTTP headers.",
      "It prevents common vulnerabilities like XSS, clickjacking, and more."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-helmet-in-express-js"
  },
  {
    "id": 103,
    "title": "What is morgan in Express.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is morgan in Express.js?",
    "answer": [
      "morgan is a middleware used for HTTP request logging in Express.js applications.",
      "It helps in debugging and logging requests in different formats."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-morgan-in-express-js"
  },
  {
    "id": 104,
    "title": "What is dotenv in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is dotenv in Node.js?",
    "answer": [
      "dotenv is a module that loads environment variables from a .env file into process.env.",
      "It helps manage environment-specific configuration securely."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-dotenv-in-node-js"
  },
  {
    "id": 105,
    "title": "What are environment variables?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What are environment variables?",
    "answer": [
      "Environment variables store configuration values outside of your codebase.",
      "They are used for sensitive data like API keys, database credentials, etc.",
      "They allow different settings between development, staging, and production."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-are-environment-variables"
  },
  {
    "id": 106,
    "title": "What is process.env in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is process.env in Node.js?",
    "answer": [
      "process.env is an object in Node.js that stores environment variables.",
      "It allows access to configuration values defined in the system or in .env files."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-process-env-in-node-js"
  },
  {
    "id": 107,
    "title": "What is the difference between res.send() and res.json() in Express.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is the difference between res.send() and res.json() in Express.js?",
    "answer": [
      "res.send() can send any type of data (string, buffer, object).",
      "res.json() specifically sends a JSON response and sets the Content-Type header to application/json."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-the-difference-between-res-send-and-res-json-in-express-js"
  },
  {
    "id": 108,
    "title": "What is body-parser in Express.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is body-parser in Express.js?",
    "answer": [
      "body-parser is a middleware used to parse incoming request bodies in a middleware before handlers.",
      "It parses JSON, URL-encoded data, and more."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-body-parser-in-express-js"
  },
  {
    "id": 109,
    "title": "What is cross-site scripting (XSS)?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is cross-site scripting (XSS)?",
    "answer": [
      "XSS is a security vulnerability where attackers inject malicious scripts into web pages viewed by other users.",
      "It can be used to steal cookies, session tokens, or sensitive data."
    ],
    "interview_tip": "Always mention sanitizing user input as a defense mechanism.",
    "references": [],
    "slug": "what-is-cross-site-scripting-xss"
  },
  {
    "id": 110,
    "title": "What is CSRF?",
        "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is CSRF?",
    "answer": [
      "CSRF stands for Cross-Site Request Forgery.",
      "It tricks users into executing unwanted actions on web applications where they are authenticated.",
      "Tokens are used to prevent CSRF attacks."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-csrf"
  },
  {
    "id": 111,
    "title": "What is JWT?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is JWT?",
    "answer": [
      "JWT stands for JSON Web Token.",
      "It is a compact, URL-safe way of representing claims between two parties.",
      "JWTs are commonly used for authentication and authorization."
    ],
    "interview_tip": "Mention that JWTs can be stored in localStorage or cookies, and the pros/cons of each.",
    "references": [],
    "slug": "what-is-jwt"
  },
  {
    "id": 112,
    "title": "What is bcrypt?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is bcrypt?",
    "answer": [
      "bcrypt is a hashing algorithm used to secure passwords.",
      "It incorporates salting to make hashes unique and computationally expensive to crack."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-bcrypt"
  },
  {
    "id": 113,
    "title": "What is hashing?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is hashing?",
    "answer": [
      "Hashing converts data into a fixed-length string of characters.",
      "It is a one-way function and cannot be reversed.",
      "Used for securing sensitive data like passwords."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-hashing"
  },
  {
    "id": 114,
    "title": "What is encryption?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is encryption?",
    "answer": [
      "Encryption converts data into an unreadable format.",
      "It can be reversed (decrypted) using a secret key.",
      "Used to protect data during transmission and storage."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-encryption"
  },
  {
    "id": 115,
    "title": "What is SSL?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is SSL?",
    "answer": [
      "SSL stands for Secure Sockets Layer.",
      "It is a standard technology for securing internet connections.",
      "SSL encrypts data sent between browsers and servers."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-ssl"
  },
  {
    "id": 116,
    "title": "What is HTTPS?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is HTTPS?",
    "answer": [
      "HTTPS stands for HyperText Transfer Protocol Secure.",
      "It uses SSL/TLS to encrypt communication between client and server.",
      "It secures sensitive data and protects against man-in-the-middle attacks."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-https"
  },
  {
    "id": 117,
    "title": "What is OAuth?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is OAuth?",
    "answer": [
      "OAuth is an open standard for token-based authentication and authorization.",
      "It allows applications to access user data from other services without sharing credentials."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-oauth"
  },
  {
    "id": 118,
    "title": "What is the purpose of MVC architecture?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is the purpose of MVC architecture?",
    "answer": [
      "MVC stands for Model-View-Controller.",
      "It separates the application into three interconnected components to improve organization and maintainability.",
      "Model handles data logic, View handles UI, and Controller manages interactions between them."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-the-purpose-of-mvc-architecture"
  },
  {
    "id": 119,
    "title": "What is REST API?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is REST API?",
    "answer": [
      "REST stands for Representational State Transfer.",
      "REST API is an architectural style that uses HTTP methods to perform CRUD operations.",
      "It is stateless and uses URLs to access resources."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-rest-api"
  },
  {
    "id": 120,
    "title": "What is GraphQL?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is GraphQL?",
    "answer": [
      "GraphQL is a query language for APIs.",
      "It allows clients to request exactly the data they need.",
      "GraphQL solves issues like over-fetching and under-fetching data."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-graphql"
  },
  {
    "id": 121,
    "title": "What is WebSocket?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is WebSocket?",
    "answer": [
      "WebSocket is a protocol for full-duplex communication between client and server.",
      "It enables real-time data transfer without repeatedly opening new HTTP connections."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-websocket"
  },
  {
    "id": 122,
    "title": "What is Server-Side Rendering (SSR)?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is Server-Side Rendering (SSR)?",
    "answer": [
      "SSR is rendering HTML on the server instead of in the browser.",
      "It improves SEO and reduces time to first paint."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-server-side-rendering-ssr"
  },
  {
    "id": 123,
    "title": "What is client-side rendering?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is client-side rendering?",
    "answer": [
      "Client-side rendering builds the user interface in the browser using JavaScript.",
      "The server sends a minimal HTML page with scripts that render the view."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-client-side-rendering"
  },
  {
    "id": 124,
    "title": "What is Next.js?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is Next.js?",
    "answer": [
      "Next.js is a React framework for building server-rendered or statically generated web applications.",
      "It provides features like file-based routing, API routes, and image optimization."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-next-js"
  },
  {
    "id": 125,
    "title": "What is Gatsby.js?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is Gatsby.js?",
    "answer": [
      "Gatsby.js is a static site generator for React.",
      "It builds fast websites by pre-rendering pages and using GraphQL for data fetching."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-gatsby-js"
  },
  {
    "id": 126,
    "title": "What is JAMstack?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is JAMstack?",
    "answer": [
      "JAMstack stands for JavaScript, APIs, and Markup.",
      "It is a modern web architecture focusing on decoupling the frontend from the backend.",
      "JAMstack sites are fast, secure, and scalable because they serve pre-built markup and use APIs for dynamic functionality."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-jamstack"
  },
  {
    "id": 127,
    "title": "What is the Virtual DOM in React?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is the Virtual DOM in React?",
    "answer": [
      "The Virtual DOM is a lightweight in-memory representation of the real DOM.",
      "React updates the Virtual DOM first, compares it with the previous version (diffing), and updates only the changed parts in the real DOM.",
      "This improves performance and efficiency."
    ],
    "interview_tip": "Explain the diffing algorithm briefly to impress the interviewer.",
    "references": [],
    "slug": "what-is-the-virtual-dom-in-react"
  },
  {
    "id": 128,
    "title": "What is JSX?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is JSX?",
    "answer": [
      "JSX stands for JavaScript XML.",
      "It is a syntax extension that allows writing HTML-like syntax inside JavaScript code.",
      "JSX is compiled into React.createElement calls by Babel."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-jsx"
  },
  {
    "id": 129,
    "title": "What are components in React?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What are components in React?",
    "answer": [
      "Components are reusable, independent building blocks of a React application UI.",
      "They can be functional or class-based components."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-are-components-in-react"
  },
  {
    "id": 130,
    "title": "What is the difference between functional and class components?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is the difference between functional and class components?",
    "answer": [
      "Functional components are plain JavaScript functions that return JSX.",
      "Class components extend React.Component and have lifecycle methods.",
      "Since React 16.8, Hooks allow functional components to manage state and side effects, making them as powerful as class components."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-the-difference-between-functional-and-class-components"
  },
  {
    "id": 131,
    "title": "What are props in React?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What are props in React?",
    "answer": [
      "Props are inputs to React components.",
      "They are passed from parent components to children.",
      "Props are read-only and help make components reusable."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-are-props-in-react"
  },
  {
    "id": 132,
    "title": "What is state in React?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is state in React?",
    "answer": [
      "State is a built-in object in React used to store data about a component that can change over time.",
      "State changes trigger re-renders of the component."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-state-in-react"
  },
  {
    "id": 133,
    "title": "What is useState Hook?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is useState Hook?",
    "answer": [
      "useState is a Hook that lets functional components manage state.",
      "It returns a state variable and a function to update it."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-usestate-hook"
  },
  {
    "id": 134,
    "title": "What is useEffect Hook?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is useEffect Hook?",
    "answer": [
      "useEffect is a Hook used for managing side effects like data fetching, subscriptions, or manual DOM changes.",
      "It runs after every render unless dependencies are provided to limit its execution."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-useeffect-hook"
  },
  {
    "id": 135,
    "title": "What is React Router?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is React Router?",
    "answer": [
      "React Router is a library used for routing in React applications.",
      "It enables navigation between views and manages browser history."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-react-router"
  },
  {
    "id": 136,
    "title": "What is Redux?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is Redux?",
    "answer": [
      "Redux is a state management library for JavaScript applications.",
      "It uses a single store to hold application state and allows predictable state updates via actions and reducers."
    ],
    "interview_tip": "Know how to write reducers and actions.",
    "references": [],
    "slug": "what-is-redux"
  },
  {
    "id": 137,
    "title": "What is the use of Provider in Redux?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is the use of Provider in Redux?",
    "answer": [
      "Provider is a component from react-redux library.",
      "It makes the Redux store available to nested components through Reactâ€™s context mechanism."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-the-use-of-provider-in-redux"
  },
  {
    "id": 138,
    "title": "What are actions in Redux?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What are actions in Redux?",
    "answer": [
      "Actions are plain JavaScript objects that describe an intention to change the state.",
      "They must have a type property and can carry additional data."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-are-actions-in-redux"
  },
  {
    "id": 139,
    "title": "What are reducers in Redux?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What are reducers in Redux?",
    "answer": [
      "Reducers are pure functions that take the current state and an action as arguments and return a new state.",
      "They determine how the application state changes in response to actions."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-are-reducers-in-redux"
  },
  {
    "id": 140,
    "title": "What is the store in Redux?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is the store in Redux?",
    "answer": [
      "The store is a single JavaScript object that holds the state of the entire Redux application.",
      "It provides methods like getState(), dispatch(), and subscribe()."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-the-store-in-redux"
  },
  {
    "id": 141,
    "title": "What is the connect function in react-redux?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is the connect function in react-redux?",
    "answer": [
      "connect is a higher-order function from react-redux.",
      "It connects React components to the Redux store and allows them to read state and dispatch actions."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-the-connect-function-in-react-redux"
  },
  {
    "id": 142,
    "title": "What is middleware in Redux?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is middleware in Redux?",
    "answer": [
      "Middleware in Redux intercepts actions before they reach the reducer.",
      "It can be used for logging, asynchronous calls, and more."
    ],
    "interview_tip": "Know how to write custom middleware.",
    "references": [],
    "slug": "what-is-middleware-in-redux"
  },
  {
    "id": 143,
    "title": "What is Redux Thunk?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is Redux Thunk?",
    "answer": [
      "Redux Thunk is a middleware that allows action creators to return functions instead of plain objects.",
      "These functions can perform asynchronous operations and dispatch multiple actions."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-redux-thunk"
  },
  {
    "id": 144,
    "title": "What is the purpose of React DevTools?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is the purpose of React DevTools?",
    "answer": [
      "React DevTools is a browser extension for inspecting React component hierarchies.",
      "It helps developers debug props, state, and performance issues."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-the-purpose-of-react-devtools"
  },
  {
    "id": 145,
    "title": "What is React Context API?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is React Context API?",
    "answer": [
      "The Context API allows sharing values like props between components without explicitly passing them through every level of the tree.",
      "Itâ€™s useful for global state like themes, user authentication, etc."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-react-context-api"
  },
  {
    "id": 146,
    "title": "What is Suspense in React?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is Suspense in React?",
    "answer": [
      "Suspense is a component that lets you wait for some code to load and declaratively specify a loading UI.",
      "Itâ€™s used with code-splitting and data-fetching libraries like React.lazy."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-suspense-in-react"
  },
  {
    "id": 147,
    "title": "What is React.lazy()?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is React.lazy()?",
    "answer": [
      "React.lazy() allows dynamic import of components for code splitting.",
      "It loads components only when theyâ€™re needed to improve performance."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-react-lazy"
  },
  {
    "id": 148,
    "title": "What is Reconciliation in React?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is Reconciliation in React?",
    "answer": [
      "Reconciliation is the process React uses to update the DOM efficiently.",
      "It compares the new Virtual DOM tree with the previous one and updates only the changed elements."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-reconciliation-in-react"
  },
  {
    "id": 149,
    "title": "What are keys in React and why are they important?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What are keys in React and why are they important?",
    "answer": [
      "Keys are unique identifiers given to list elements in React.",
      "They help React identify which items have changed, been added, or removed, improving rendering performance."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-are-keys-in-react-and-why-are-they-important"
  },
  {
    "id": 150,
    "title": "What is Prop Drilling in React?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is Prop Drilling in React?",
    "answer": [
      "Prop Drilling occurs when props are passed through multiple layers of components to reach a deeply nested component.",
      "It can make the component tree harder to manage.",
      "Context API can help avoid prop drilling."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-prop-drilling-in-react"
  },
  {
    "id": 151,
    "title": "Two Sum",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.",
    "answer": [
      "function twoSum(nums, target) {",
      "    const map = new Map();",
      "    for (let i = 0; i < nums.length; i++) {",
      "        const complement = target - nums[i];",
      "        if (map.has(complement)) {",
      "            return [map.get(complement), i];",
      "        }",
      "        map.set(nums[i], i);",
      "    }",
      "    return [];",
      "}"
    ],
    "references": [],
    "slug": "two-sum",
    "example": "Input: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1]."
  },
  {
    "id": 152,
    "title": "Valid Parentheses",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
    "answer": [
      "function isValid(s) {",
      "    const stack = [];",
      "    const map = {",
      "        '(': ')',",
      "        '{': '}',",
      "        '[': ']'",
      "    };",
      "    for (let c of s) {",
      "        if (map[c]) {",
      "            stack.push(map[c]);",
      "        } else {",
      "            if (stack.pop() !== c) return false;",
      "        }",
      "    }",
      "    return stack.length === 0;",
      "}"
    ],
    "references": [],
    "slug": "valid-parentheses",
    "example": "Input: s = \"()\"\nOutput: true\nExplanation: The string is a valid parentheses string because it can be split into two non-empty parts that are both valid parentheses strings."
  },
  {
    "id": 153,
    "title": "Merge Two Sorted Lists",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Merge two sorted linked lists and return it as a sorted list.",
    "answer": [
      "function mergeTwoLists(l1, l2) {",
      "    if (!l1) return l2;",
      "    if (!l2) return l1;",
      "    if (l1.val < l2.val) {",
      "        l1.next = mergeTwoLists(l1.next, l2);",
      "        return l1;",
      "    } else {",
      "        l2.next = mergeTwoLists(l1, l2.next);",
      "        return l2;",
      "    }",
      "}"
    ],
    "references": [],
    "slug": "merge-two-sorted-lists",
    "example": "Input: list1 = [1,2,4], list2 = [1,3,4]\nOutput: [1,1,2,3,4,4]\nExplanation: The two lists are merged into one sorted list."
  },
  {
    "id": 154,
    "title": "Remove Duplicates from Sorted Array",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Given a sorted array, remove the duplicates in-place such that each element appears only once and return the new length.",
    "answer": [
      "function removeDuplicates(nums) {",
      "    let i = 0;",
      "    for (let j = 1; j < nums.length; j++) {",
      "        if (nums[j] !== nums[i]) {",
      "            i++;",
      "            nums[i] = nums[j];",
      "        }",
      "    }",
      "    return i + 1;",
      "}"
    ],
    "references": [],
    "slug": "remove-duplicates-from-sorted-array",
    "example": "Input: nums = [1,1,2]\nOutput: 2, nums = [1,2,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively. It does not matter what you leave beyond the returned k (hence they are underscores)."
  },
  {
    "id": 155,
    "title": "Remove Element",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Given an array nums and a value val, remove all instances of that value in-place and return the new length.",
    "answer": [
      "function removeElement(nums, val) {",
      "    let i = 0;",
      "    for (let j = 0; j < nums.length; j++) {",
      "        if (nums[j] !== val) {",
      "            nums[i] = nums[j];",
      "            i++;",
      "        }",
      "    }",
      "    return i;",
      "}"
    ],
    "references": [],
    "slug": "remove-element",
    "example": "Input: nums = [3,2,2,3], val = 3\nOutput: 2, nums = [2,2,_,_]\nExplanation: Your function should return k = 2, with the first two elements of nums being 2. It does not matter what you leave beyond the returned k (hence they are underscores)."
  },
  {
    "id": 156,
    "title": "Implement strStr()",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.",
    "answer": [
      "function strStr(haystack, needle) {",
      "    if (needle === \"\") return 0;",
      "    for (let i = 0; i <= haystack.length - needle.length; i++) {",
      "        if (haystack.substr(i, needle.length) === needle) {",
      "            return i;",
      "        }",
      "    }",
      "    return -1;",
      "}"
    ],
    "references": [],
    "slug": "implement-strstr",
    "example": "Input: haystack = \"hello\", needle = \"ll\"\nOutput: 2\nExplanation: The first occurrence of \"ll\" starts at index 2."
  },
  {
    "id": 157,
    "title": "Search Insert Position",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.",
    "answer": [
      "function searchInsert(nums, target) {",
      "    let left = 0, right = nums.length - 1;",
      "    while (left <= right) {",
      "        let mid = Math.floor((left + right) / 2);",
      "        if (nums[mid] === target) return mid;",
      "        else if (nums[mid] < target) left = mid + 1;",
      "        else right = mid - 1;",
      "    }",
      "    return left;",
      "}"
    ],
    "references": [],
    "slug": "search-insert-position",
    "example": "Input: nums = [1,3,5,6], target = 5\nOutput: 2\nExplanation: 5 is present at index 2."
  },
  {
    "id": 158,
    "title": "Maximum Subarray",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Find the contiguous subarray with the largest sum and return its sum.",
    "answer": [
      "function maxSubArray(nums) {",
      "    let maxSum = nums[0];",
      "    let currentSum = nums[0];",
      "    for (let i = 1; i < nums.length; i++) {",
      "        currentSum = Math.max(nums[i], currentSum + nums[i]);",
      "        maxSum = Math.max(maxSum, currentSum);",
      "    }",
      "    return maxSum;",
      "}"
    ],
    "references": [],
    "slug": "maximum-subarray",
    "example": "Input: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: The contiguous subarray [4,-1,2,1] has the largest sum 6."
  },
  {
    "id": 159,
    "title": "What is the difference between '==' and 'Object.is()' in JavaScript?",
    "category": "JavaScript",
    "difficulty": "Intermediate",
    "question": "What is the difference between '==' and 'Object.is()' in JavaScript?",
    "answer": [
      "'==' is the loose equality operator, which performs type coercion before comparing two values.",
      "'Object.is()' is a method that determines whether two values are the same value, similar to '===', but with some differences (e.g., it treats NaN as equal to NaN, and +0 and -0 as not equal)."
    ],
    "interview_tip": "Use 'Object.is()' for precise value comparison, especially when dealing with special cases like NaN.",
    "references": [
      "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is"
    ],
    "slug": "difference-between-equality-and-object-is"
  },
  {
    "id": 160,
    "title": "Plus One",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Given a non-empty array of digits representing a non-negative integer, increment one to the integer.",
    "answer": [
      "function plusOne(digits) {",
      "    for (let i = digits.length - 1; i >= 0; i--) {",
      "        if (digits[i] < 9) {",
      "            digits[i]++;",
      "            return digits;",
      "        }",
      "        digits[i] = 0;",
      "    }",
      "    digits.unshift(1);",
      "    return digits;",
      "}"
    ],
    "references": [],
    "slug": "plus-one",
    "example": "Input: digits = [1,2,3]\nOutput: [1,2,4]\nExplanation: The array represents the integer 123. Incrementing by one gives 124."
  },
  {
    "id": 161,
    "title": "Add Binary",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Given two binary strings a and b, return their sum as a binary string.",
    "answer": [
      "function addBinary(a, b) {",
      "    let result = '';",
      "    let carry = 0;",
      "    let i = a.length - 1;",
      "    let j = b.length - 1;",
      "    while (i >= 0 || j >= 0 || carry) {",
      "        let sum = carry;",
      "        if (i >= 0) sum += Number(a[i--]);",
      "        if (j >= 0) sum += Number(b[j--]);",
      "        carry = Math.floor(sum / 2);",
      "        result = (sum % 2) + result;",
      "    }",
      "    return result;",
      "}"
    ],
    "references": [],
    "slug": "add-binary",
    "example": "Input: a = \"11\", b = \"1\"\nOutput: \"100\"\nExplanation: The sum of 11 and 1 is 100 in binary."
  },
  {
    "id": 162,
    "title": "Climbing Stairs",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "You are climbing a staircase. It takes n steps to reach the top. Each time you can climb 1 or 2 steps. Return the number of distinct ways to climb to the top.",
    "answer": [
      "function climbStairs(n) {",
      "    if (n <= 2) return n;",
      "    let first = 1;",
      "    let second = 2;",
      "    for (let i = 3; i <= n; i++) {",
      "        let third = first + second;",
      "        first = second;",
      "        second = third;",
      "    }",
      "    return second;",
      "}"
    ],
    "references": [],
    "slug": "climbing-stairs",
    "example": "Input: n = 2\nOutput: 2\nExplanation: There are two ways to climb to the top. 1. 1 step + 1 step 2. 2 steps"
  },
  {
    "id": 163,
    "title": "Sqrt(x)",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Given a non-negative integer x, compute and return the square root of x.",
    "answer": [
      "function mySqrt(x) {",
      "    if (x < 2) return x;",
      "    let left = 1, right = x;",
      "    while (left <= right) {",
      "        let mid = Math.floor((left + right) / 2);",
      "        if (mid * mid === x) return mid;",
      "        if (mid * mid < x) left = mid + 1;",
      "        else right = mid - 1;",
      "    }",
      "    return right;",
      "}"
    ],
    "references": [],
    "slug": "sqrt-x",
    "example": "Input: x = 4\nOutput: 2\nExplanation: The square root of 4 is 2."
  },
  {
    "id": 164,
    "title": "Roman to Integer",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Convert a Roman numeral to an integer.",
    "answer": [
      "function romanToInt(s) {",
      "    const map = {",
      "        'I': 1, 'V': 5, 'X': 10, 'L': 50,",
      "        'C': 100, 'D': 500, 'M': 1000",
      "    };",
      "    let total = 0;",
      "    for (let i = 0; i < s.length; i++) {",
      "        let current = map[s[i]];",
      "        let next = map[s[i + 1]];",
      "        if (next > current) {",
      "            total += next - current;",
      "            i++;",
      "        } else {",
      "            total += current;",
      "        }",
      "    }",
      "    return total;",
      "}"
    ],
    "references": [],
    "slug": "roman-to-integer",
    "example": "Input: s = \"III\"\nOutput: 3\nExplanation: III is 3 in Roman numerals."
  },
  {
    "id": 165,
    "title": "Palindrome Number",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.",
    "answer": [
      "function isPalindrome(x) {",
      "    if (x < 0) return false;",
      "    const str = x.toString();",
      "    return str === str.split('').reverse().join('');",
      "}"
    ],
    "references": [],
    "slug": "palindrome-number",
    "example": "Input: x = 121\nOutput: true\nExplanation: 121 reads the same backward as forward."
  },
  {
    "id": 166,
    "title": "Fizz Buzz",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Given an integer n, return a string array answer where answer[i] is: \"FizzBuzz\" if i is divisible by 3 and 5, \"Fizz\" if divisible by 3, \"Buzz\" if divisible by 5, or i itself.",
    "answer": [
      "function fizzBuzz(n) {",
      "    const result = [];",
      "    for (let i = 1; i <= n; i++) {",
      "        if (i % 15 === 0) result.push(\"FizzBuzz\");",
      "        else if (i % 3 === 0) result.push(\"Fizz\");",
      "        else if (i % 5 === 0) result.push(\"Buzz\");",
      "        else result.push(i.toString());",
      "    }",
      "    return result;",
      "}"
    ],
    "references": [],
    "slug": "fizz-buzz",
    "example": "Input: n = 5\nOutput: [\"1\",\"2\",\"Fizz\",\"4\",\"Buzz\"]\nExplanation: 1, 2, Fizz, 4, Buzz."
  },
  {
    "id": 167,
    "title": "Count and Say",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Given an integer n, generate the nth term of the count-and-say sequence.",
    "answer": [
      "function countAndSay(n) {",
      "    if (n === 1) return \"1\";",
      "    let prev = countAndSay(n - 1);",
      "    let result = \"\";",
      "    let count = 1;",
      "    for (let i = 0; i < prev.length; i++) {",
      "        if (prev[i] === prev[i + 1]) {",
      "            count++;",
      "        } else {",
      "            result += count + prev[i];",
      "            count = 1;",
      "        }",
      "    }",
      "    return result;",
      "}"
    ],
    "references": [],
    "slug": "count-and-say",
    "example": "Input: n = 4\nOutput: \"121312311\"\nExplanation: countAndSay(1) = \"1\" countAndSay(2) = \"11\" countAndSay(3) = \"21\" countAndSay(4) = \"121312311\""
  },
  {
    "id": 168,
    "title": "Length of Last Word",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Given a string s consisting of words and spaces, return the length of the last word in the string.",
    "answer": [
      "function lengthOfLastWord(s) {",
      "    s = s.trim();",
      "    return s.length - s.lastIndexOf(\" \") - 1;",
      "}"
    ],
    "references": [],
    "slug": "length-of-last-word",
    "example": "Input: s = \"Hello World\"\nOutput: 5\nExplanation: The last word is \"World\" with length 5."
  },
  {
    "id": 169,
    "title": "Single Number",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Given a non-empty array of integers, every element appears twice except for one. Find that single one.",
    "answer": [
      "function singleNumber(nums) {",
      "    let result = 0;",
      "    for (let num of nums) {",
      "        result ^= num;",
      "    }",
      "    return result;",
      "}"
    ],
    "references": [],
    "slug": "single-number",
    "example": "Input: nums = [2,2,1]\nOutput: 1\nExplanation: 1 is the single number in the array."
  },
  {
    "id": 170,
    "title": "Missing Number",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.",
    "answer": [
      "function missingNumber(nums) {",
      "    let sum = (nums.length * (nums.length + 1)) / 2;",
      "    for (let num of nums) {",
      "        sum -= num;",
      "    }",
      "    return sum;",
      "}"
    ],
    "references": [],
    "slug": "missing-number",
    "example": "Input: nums = [3,0,1]\nOutput: 2\nExplanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums."
  },
  {
    "id": 171,
    "title": "Intersection of Two Arrays II",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result should appear as many times as it shows in both arrays.",
    "answer": [
      "function intersect(nums1, nums2) {",
      "    const map = {};",
      "    const result = [];",
      "    for (let num of nums1) {",
      "        map[num] = (map[num] || 0) + 1;",
      "    }",
      "    for (let num of nums2) {",
      "        if (map[num] > 0) {",
      "            result.push(num);",
      "            map[num]--;",
      "        }",
      "    }",
      "    return result;",
      "}"
    ],
    "references": [],
    "slug": "intersection-of-two-arrays-ii",
    "example": "Input: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2,2]\nExplanation: The intersection of nums1 and nums2 is [2,2]."
  },
  {
    "id": 172,
    "title": "Valid Anagram",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Given two strings s and t, return true if t is an anagram of s, and false otherwise.",
    "answer": [
      "function isAnagram(s, t) {",
      "    if (s.length !== t.length) return false;",
      "    const count = {};",
      "    for (let char of s) {",
      "        count[char] = (count[char] || 0) + 1;",
      "    }",
      "    for (let char of t) {",
      "        if (!count[char]) return false;",
      "        count[char]--;",
      "    }",
      "    return true;",
      "}"
    ],
    "references": [],
    "slug": "valid-anagram",
    "example": "Input: s = \"anagram\", t = \"nagaram\"\nOutput: true\nExplanation: The string s can be rearranged to form t."
  },
  {
    "id": 173,
    "title": "First Unique Character in a String",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Given a string s, find the first non-repeating character and return its index. If it does not exist, return -1.",
    "answer": [
      "function firstUniqChar(s) {",
      "    const count = {};",
      "    for (let char of s) {",
      "        count[char] = (count[char] || 0) + 1;",
      "    }",
      "    for (let i = 0; i < s.length; i++) {",
      "        if (count[s[i]] === 1) return i;",
      "    }",
      "    return -1;",
      "}"
    ],
    "references": [],
    "slug": "first-unique-character-in-a-string",
    "example": "Input: s = \"leetcode\"\nOutput: 0\nExplanation: The first unique character is \"l\" and is at index 0."
  },
  {
    "id": 174,
    "title": "Reverse String",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Write a function that reverses a string. The input string is given as an array of characters.",
    "answer": [
      "function reverseString(s) {",
      "    let left = 0, right = s.length - 1;",
      "    while (left < right) {",
      "        [s[left], s[right]] = [s[right], s[left]];",
      "        left++;",
      "        right--;",
      "    }",
      "}"
    ],
    "references": [],
    "slug": "reverse-string",
    "example": "Input: s = [\"h\",\"e\",\"l\",\"l\",\"o\"]\nOutput: [\"o\",\"l\",\"l\",\"e\",\"h\"]\nExplanation: The reversed string is \"olleh\"."
  },
  {
    "id": 175,
    "title": "Ransom Note",
    "category": "DSA",
    "difficulty": "Beginner",
    "question": "Given two strings ransomNote and magazine, return true if ransomNote can be constructed from magazine and false otherwise.",
    "answer": [
      "function canConstruct(ransomNote, magazine) {",
      "    const map = {};",
      "    for (let char of magazine) {",
      "        map[char] = (map[char] || 0) + 1;",
      "    }",
      "    for (let char of ransomNote) {",
      "        if (!map[char]) return false;",
      "        map[char]--;",
      "    }",
      "    return true;",
      "}"
    ],
    "references": [],
    "slug": "ransom-note",
    "example": "Input: ransomNote = \"a\", magazine = \"b\"\nOutput: false\nExplanation: magazine does not have enough characters to construct ransomNote."   
  },
  {
    "id": 176,
    "title": "3Sum",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i â‰  j â‰  k and nums[i] + nums[j] + nums[k] == 0.",
    "answer": [
      "function threeSum(nums) {",
      "    nums.sort((a, b) => a - b);",
      "    const result = [];",
      "    for (let i = 0; i < nums.length - 2; i++) {",
      "        if (i > 0 && nums[i] === nums[i - 1]) continue;",
      "        let left = i + 1, right = nums.length - 1;",
      "        while (left < right) {",
      "            const sum = nums[i] + nums[left] + nums[right];",
      "            if (sum === 0) {",
      "                result.push([nums[i], nums[left], nums[right]]);",
      "                while (left < right && nums[left] === nums[left + 1]) left++;",
      "                while (left < right && nums[right] === nums[right - 1]) right--;",
      "                left++;",
      "                right--;",
      "            } else if (sum < 0) {",
      "                left++;",
      "            } else {",
      "                right--;",
      "            }",
      "        }",
      "    }",
      "    return result;",
      "}"
    ],
    "references": [],
    "slug": "3sum",
    "example": "Input: nums = [-1,0,1,2,-1,-4]\nOutput: [[-1,-1,2],[-1,0,1]]\nExplanation: The triplets that sum to 0 are [-1,-1,2] and [-1,0,1]."
  },
  {
    "id": 177,
    "title": "Container With Most Water",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given n non-negative integers a1, a2, ..., an, where each represents a point at coordinate (i, ai). n vertical lines are drawn. Find two lines that together with the x-axis form a container, such that the container contains the most water.",
    "answer": [
      "function maxArea(height) {",
      "    let left = 0, right = height.length - 1;",
      "    let max = 0;",
      "    while (left < right) {",
      "        max = Math.max(max, (right - left) * Math.min(height[left], height[right]));",
      "        if (height[left] < height[right]) left++;",
      "        else right--;",
      "    }",
      "    return max;",
      "}"
    ],
    "references": [],
    "slug": "container-with-most-water",
    "example": "Input: height = [1,8,6,2,5,4,8,3,7]\nOutput: 49\nExplanation: The max area is obtained by the pair (8, 7) at index 1 and 8."
  },
  {
    "id": 178,
    "title": "Longest Substring Without Repeating Characters",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given a string s, find the length of the longest substring without repeating characters.",
    "answer": [
      "function lengthOfLongestSubstring(s) {",
      "    let set = new Set();",
      "    let left = 0, maxLen = 0;",
      "    for (let right = 0; right < s.length; right++) {",
      "        while (set.has(s[right])) {",
      "            set.delete(s[left]);",
      "            left++;",
      "        }",
      "        set.add(s[right]);",
      "        maxLen = Math.max(maxLen, right - left + 1);",
      "    }",
      "    return maxLen;",
      "}"
    ],
    "references": [],
    "slug": "longest-substring-without-repeating-characters",
    "example": "Input: s = \"abcabcbb\"\nOutput: 3\nExplanation: The longest substring without repeating characters is \"abc\"."
  },
  {
    "id": 179,
    "title": "Group Anagrams",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given an array of strings strs, group the anagrams together.",
    "answer": [
      "function groupAnagrams(strs) {",
      "    const map = new Map();",
      "    for (let str of strs) {",
      "        const key = str.split('').sort().join('');",
      "        if (!map.has(key)) map.set(key, []);",
      "        map.get(key).push(str);",
      "    }",
      "    return Array.from(map.values());",
      "}"
    ],
    "references": [],
    "slug": "group-anagrams",
    "example": "Input: strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\nOutput: [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\nExplanation: The anagrams are grouped together."
  },
  {
    "id": 180,
    "title": "Top K Frequent Elements",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given a non-empty array of integers, return the k most frequent elements.",
    "answer": [
      "function topKFrequent(nums, k) {",
      "    const map = {};",
      "    for (let num of nums) {",
      "        map[num] = (map[num] || 0) + 1;",
      "    }",
      "    return Object.keys(map)",
      "        .sort((a, b) => map[b] - map[a])",
      "        .slice(0, k);",
      "}"
    ],
    "references": [],
    "slug": "top-k-frequent-elements",
    "example": "Input: nums = [1,1,1,2,2,3], k = 2\nOutput: [1,2]\nExplanation: 1 and 2 are the most frequent elements."
  },
  {
    "id": 181,
    "title": "Product of Array Except Self",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given an array nums of n integers where n > 1, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].",
    "answer": [
      "function productExceptSelf(nums) {",
      "    let res = Array(nums.length).fill(1);",
      "    let left = 1;",
      "    for (let i = 0; i < nums.length; i++) {",
      "        res[i] = left;",
      "        left *= nums[i];",
      "    }",
      "    let right = 1;",
      "    for (let i = nums.length - 1; i >= 0; i--) {",
      "        res[i] *= right;",
      "        right *= nums[i];",
      "    }",
      "    return res;",
      "}"
    ],
    "references": [],
    "slug": "product-of-array-except-self",
    "example": "Input: nums = [1,2,3,4]\nOutput: [24,12,8,6]\nExplanation: output[0] = 2*3*4 = 24, output[1] = 1*3*4 = 12, output[2] = 1*2*4 = 8, output[3] = 1*2*3 = 6."
  },
  {
    "id": 182,
    "title": "Minimum Window Substring",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given strings s and t, return the minimum window substring of s such that every character in t appears at least once.",
    "answer": [
      "function minWindow(s, t) {",
      "    if (t === \"\") return \"\";",
      "    const map = {};",
      "    for (let char of t) map[char] = (map[char] || 0) + 1;",
      "    let left = 0, right = 0;",
      "    let count = Object.keys(map).length;",
      "    let minLen = Infinity, minStart = 0;",
      "    while (right < s.length) {",
      "        const rightChar = s[right];",
      "        if (rightChar in map) {",
      "            map[rightChar]--;",
      "            if (map[rightChar] === 0) count--;",
      "        }",
      "        right++;",
      "        while (count === 0) {",
      "            if (right - left < minLen) {",
      "                minLen = right - left;",
      "                minStart = left;",
      "            }",
      "            const leftChar = s[left];",
      "            if (leftChar in map) {",
      "                map[leftChar]++;",
      "                if (map[leftChar] > 0) count++;",
      "            }",
      "            left++;",
      "        }",
      "    }",
      "    return minLen === Infinity ? \"\" : s.substr(minStart, minLen);",
      "}"
    ],
    "references": [],
    "slug": "minimum-window-substring",
    "example": "Input: s = \"ADOBECODEBANC\", t = \"ABC\"\nOutput: \"BANC\"\nExplanation: The minimum window substring is \"BANC\"."
  },
  {
    "id": 183,
    "title": "Binary Search",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given a sorted array of integers, implement binary search to find the target index or return -1 if not found.",
    "answer": [
      "function binarySearch(nums, target) {",
      "    let left = 0, right = nums.length - 1;",
      "    while (left <= right) {",
      "        let mid = Math.floor((left + right) / 2);",
      "        if (nums[mid] === target) return mid;",
      "        else if (nums[mid] < target) left = mid + 1;",
      "        else right = mid - 1;",
      "    }",
      "    return -1;",
      "}"
    ],
    "references": [],
    "slug": "binary-search",
    "example": "Input: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4\nExplanation: 9 exists in nums and its index is 4."
  },
  {
    "id": 184,
    "title": "Search in Rotated Sorted Array",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "You are given an integer array nums sorted in ascending order (possibly rotated). Search for a target value in O(log n) time.",
    "answer": [
      "function search(nums, target) {",
      "    let left = 0, right = nums.length - 1;",
      "    while (left <= right) {",
      "        let mid = Math.floor((left + right) / 2);",
      "        if (nums[mid] === target) return mid;",
      "        if (nums[left] <= nums[mid]) {",
      "            if (target >= nums[left] && target < nums[mid]) right = mid - 1;",
      "            else left = mid + 1;",
      "        } else {",
      "            if (target > nums[mid] && target <= nums[right]) left = mid + 1;",
      "            else right = mid - 1;",
      "        }",
      "    }",
      "    return -1;",
      "}"
    ],
    "references": [],
    "slug": "search-in-rotated-sorted-array",
    "example": "Input: nums = [4,5,6,7,0,1,2], target = 0\nOutput: 4\nExplanation: 0 is present at index 4."
  },
  {
    "id": 185,
    "title": "Combination Sum",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations where the numbers sum to target.",
    "answer": [
      "function combinationSum(candidates, target) {",
      "    const res = [];",
      "    function backtrack(remain, path, start) {",
      "        if (remain === 0) {",
      "            res.push([...path]);",
      "            return;",
      "        }",
      "        for (let i = start; i < candidates.length; i++) {",
      "            if (candidates[i] > remain) continue;",
      "            path.push(candidates[i]);",
      "            backtrack(remain - candidates[i], path, i);",
      "            path.pop();",
      "        }",
      "    }",
      "    backtrack(target, [], 0);",
      "    return res;",
      "}"
    ],
    "references": [],
    "slug": "combination-sum",
    "example": "Input: candidates = [2,3,6,7], target = 7\nOutput: [[2,2,3],[7]]\nExplanation: 2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times."
  },
  {
    "id": 186,
    "title": "Letter Combinations of a Phone Number",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given a string containing digits from 2-9, return all possible letter combinations that the number could represent.",
    "answer": [
      "function letterCombinations(digits) {",
      "    if (!digits) return [];",
      "    const map = {",
      "        '2': 'abc', '3': 'def', '4': 'ghi', '5': 'jkl',",
      "        '6': 'mno', '7': 'pqrs', '8': 'tuv', '9': 'wxyz'",
      "    };",
      "    const result = [];",
      "    function backtrack(index, path) {",
      "        if (index === digits.length) {",
      "            result.push(path);",
      "            return;",
      "        }",
      "        for (let char of map[digits[index]]) {",
      "            backtrack(index + 1, path + char);",
      "        }",
      "    }",
      "    backtrack(0, '');",
      "    return result;",
      "}"
    ],
    "references": [],
    "slug": "letter-combinations-of-a-phone-number",
    "example": "Input: digits = \"23\"\nOutput: [\"ad\",\"ae\",\"af\",\"bd\",\"be\",\"bf\",\"cd\",\"ce\",\"cf\"]\nExplanation: There are 9 possible letter combinations."
  },
  {
    "id": 187,
    "title": "Permutations",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given an array nums of distinct integers, return all possible permutations.",
    "answer": [
      "function permute(nums) {",
      "    const res = [];",
      "    function backtrack(path, used) {",
      "        if (path.length === nums.length) {",
      "            res.push([...path]);",
      "            return;",
      "        }",
      "        for (let i = 0; i < nums.length; i++) {",
      "            if (used[i]) continue;",
      "            path.push(nums[i]);",
      "            used[i] = true;",
      "            backtrack(path, used);",
      "            path.pop();",
      "            used[i] = false;",
      "        }",
      "    }",
      "    backtrack([], Array(nums.length).fill(false));",
      "    return res;",
      "}"
    ],
    "references": [],
    "slug": "permutations",
    "example": "Input: nums = [1,2,3]\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\nExplanation: There are 6 permutations of the array."
  },
  {
    "id": 188,
    "title": "Unique Paths",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "A robot is located at the top-left corner of an m x n grid. The robot can only move either down or right at any point. How many possible unique paths are there to reach the bottom-right corner?",
    "answer": [
      "function uniquePaths(m, n) {",
      "    const dp = Array(m).fill().map(() => Array(n).fill(1));",
      "    for (let i = 1; i < m; i++) {",
      "        for (let j = 1; j < n; j++) {",
      "            dp[i][j] = dp[i-1][j] + dp[i][j-1];",
      "        }",
      "    }",
      "    return dp[m-1][n-1];",
      "}"
    ],
    "references": [],
    "slug": "unique-paths",
    "example": "Input: m = 3, n = 2\nOutput: 3\nExplanation: From the top-left corner, there are a total of 3 ways to reach the bottom-right corner."
  },
  {
    "id": 189,
    "title": "Rotate Image",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given an n x n 2D matrix, rotate it 90 degrees clockwise in-place.",
    "answer": [
      "function rotate(matrix) {",
      "    const n = matrix.length;",
      "    for (let i = 0; i < n; i++) {",
      "        for (let j = i; j < n; j++) {",
      "            [matrix[i][j], matrix[j][i]] = [matrix[j][i], matrix[i][j]];",
      "        }",
      "    }",
      "    for (let row of matrix) {",
      "        row.reverse();",
      "    }",
      "}"
    ],
    "references": [],
    "slug": "rotate-image",
    "example": "Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\nExplanation: Rotate the matrix by 90 degrees clockwise."
  },
  {
    "id": 190,
    "title": "Set Matrix Zeroes",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given an m x n matrix, if an element is 0, set its entire row and column to 0.",
    "answer": [
      "function setZeroes(matrix) {",
      "    const m = matrix.length, n = matrix[0].length;",
      "    let rows = new Set(), cols = new Set();",
      "    for (let i = 0; i < m; i++) {",
      "        for (let j = 0; j < n; j++) {",
      "            if (matrix[i][j] === 0) {",
      "                rows.add(i);",
      "                cols.add(j);",
      "            }",
      "        }",
      "    }",
      "    for (let i of rows) {",
      "        for (let j = 0; j < n; j++) {",
      "            matrix[i][j] = 0;",
      "        }",
      "    }",
      "    for (let j of cols) {",
      "        for (let i = 0; i < m; i++) {",
      "            matrix[i][j] = 0;",
      "        }",
      "    }",
      "}"
    ],
    "references": [],
    "slug": "set-matrix-zeroes",
    "example": "Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]\nOutput: [[1,0,1],[0,0,0],[1,0,1]]\nExplanation: The matrix is modified in-place."
  },
  {
    "id": 191,
    "title": "Subsets",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given an integer array nums of unique elements, return all possible subsets (the power set).",
    "answer": [
      "function subsets(nums) {",
      "    const res = [];",
      "    function backtrack(path, index) {",
      "        res.push([...path]);",
      "        for (let i = index; i < nums.length; i++) {",
      "            path.push(nums[i]);",
      "            backtrack(path, i + 1);",
      "            path.pop();",
      "        }",
      "    }",
      "    backtrack([], 0);",
      "    return res;",
      "}"
    ],
    "references": [],
    "slug": "subsets",
    "example": "Input: nums = [1,2,3]\nOutput: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\nExplanation: The power set of [1,2,3] is [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]."
  },
  {
    "id": 192,
    "title": "Search a 2D Matrix",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Write an efficient algorithm to search for a target value in an m x n matrix. This matrix has properties where each row and each column are sorted.",
    "answer": [
      "function searchMatrix(matrix, target) {",
      "    if (!matrix.length) return false;",
      "    let row = 0, col = matrix[0].length - 1;",
      "    while (row < matrix.length && col >= 0) {",
      "        if (matrix[row][col] === target) return true;",
      "        if (matrix[row][col] < target) row++;",
      "        else col--;",
      "    }",
      "    return false;",
      "}"
    ],
    "references": [],
    "slug": "search-a-2d-matrix",
    "example": "Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\nOutput: true\nExplanation: 3 is present in the matrix."
  },
  {
    "id": 193,
    "title": "Sort Colors",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent.",
    "answer": [
      "function sortColors(nums) {",
      "    let low = 0, mid = 0, high = nums.length - 1;",
      "    while (mid <= high) {",
      "        if (nums[mid] === 0) {",
      "            [nums[low], nums[mid]] = [nums[mid], nums[low]];",
      "            low++; mid++;",
      "        } else if (nums[mid] === 1) {",
      "            mid++;",
      "        } else {",
      "            [nums[mid], nums[high]] = [nums[high], nums[mid]];",
      "            high--;",
      "        }",
      "    }",
      "}"
    ],
    "references": [],
    "slug": "sort-colors",
    "example": "Input: nums = [2,0,2,1,1,0]\nOutput: [0,0,1,1,2,2]\nExplanation: The colors are sorted in-place."
  },
  {
    "id": 194,
    "title": "Find the Duplicate Number",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given an array nums containing n + 1 integers where each integer is between 1 and n inclusive, return the duplicate number.",
    "answer": [
      "function findDuplicate(nums) {",
      "    let slow = nums[0];",
      "    let fast = nums[0];",
      "    do {",
      "        slow = nums[slow];",
      "        fast = nums[nums[fast]];",
      "    } while (slow !== fast);",
      "    slow = nums[0];",
      "    while (slow !== fast) {",
      "        slow = nums[slow];",
      "        fast = nums[fast];",
      "    }",
      "    return slow;",
      "}"
    ],
    "references": [],
    "slug": "find-the-duplicate-number",
    "example": "Input: nums = [1,3,4,2,2]\nOutput: 2\nExplanation: 2 is the duplicate number."
  },
  {
    "id": 195,
    "title": "Majority Element",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given an array nums of size n, return the majority element.",
    "answer": [
      "function majorityElement(nums) {",
      "    let count = 0, candidate = null;",
      "    for (let num of nums) {",
      "        if (count === 0) candidate = num;",
      "        count += (num === candidate) ? 1 : -1;",
      "    }",
      "    return candidate;",
      "}"
    ],
    "references": [],
    "slug": "majority-element",
    "example": "Input: nums = [3,2,3]\nOutput: 3\nExplanation: 3 is the majority element."
  },
  {
    "id": 196,
    "title": "Find Peak Element",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "A peak element is an element strictly greater than its neighbors. Find a peak element and return its index.",
    "answer": [
      "function findPeakElement(nums) {",
      "    let left = 0, right = nums.length - 1;",
      "    while (left < right) {",
      "        let mid = Math.floor((left + right) / 2);",
      "        if (nums[mid] > nums[mid + 1]) right = mid;",
      "        else left = mid + 1;",
      "    }",
      "    return left;",
      "}"
    ],
    "references": [],
    "slug": "find-peak-element",
    "example": "Input: nums = [1,2,3,1]\nOutput: 2\nExplanation: 3 is a peak element and your function should return the index number 2."
  },
  {
    "id": 197,
    "title": "Rotate Array",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given an array, rotate the array to the right by k steps.",
    "answer": [
      "function rotate(nums, k) {",
      "    k %= nums.length;",
      "    reverse(nums, 0, nums.length - 1);",
      "    reverse(nums, 0, k - 1);",
      "    reverse(nums, k, nums.length - 1);",
      "}",
      "function reverse(nums, start, end) {",
      "    while (start < end) {",
      "        [nums[start], nums[end]] = [nums[end], nums[start]];",
      "        start++; end--;",
      "    }",
      "}"
    ],
    "references": [],
    "slug": "rotate-array",
    "example": "Input: nums = [1,2,3,4,5,6,7], k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation: Rotate the array to the right by 3 steps."
  },
  {
    "id": 198,
    "title": "Kth Largest Element in an Array",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Find the kth largest element in an unsorted array.",
    "answer": [
      "function findKthLargest(nums, k) {",
      "    nums.sort((a, b) => b - a);",
      "    return nums[k - 1];",
      "}"
    ],
    "references": [],
    "slug": "kth-largest-element-in-an-array",
    "example": "Input: nums = [3,2,1,5,6,4], k = 2\nOutput: 5\nExplanation: The 2nd largest element is 5."
  },
  {
    "id": 199,
    "title": "Longest Palindromic Substring",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given a string s, return the longest palindromic substring in s.",
    "answer": [
      "function longestPalindrome(s) {",
      "    let start = 0, end = 0;",
      "    for (let i = 0; i < s.length; i++) {",
      "        let len1 = expandAroundCenter(s, i, i);",
      "        let len2 = expandAroundCenter(s, i, i + 1);",
      "        let len = Math.max(len1, len2);",
      "        if (len > end - start) {",
      "            start = i - Math.floor((len - 1) / 2);",
      "            end = i + Math.floor(len / 2);",
      "        }",
      "    }",
      "    return s.substring(start, end + 1);",
      "}",
      "function expandAroundCenter(s, left, right) {",
      "    while (left >= 0 && right < s.length && s[left] === s[right]) {",
      "        left--; right++;",
      "    }",
      "    return right - left - 1;",
      "}"
    ],
    "references": [],
    "slug": "longest-palindromic-substring",
    "example": "Input: s = \"babad\"\nOutput: \"bab\"\nExplanation: \"aba\" is also a valid answer."
  },
  {
    "id": 200,
    "title": "Minimum Path Sum",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.",
    "answer": [
      "function minPathSum(grid) {",
      "    const m = grid.length, n = grid[0].length;",
      "    for (let i = 1; i < m; i++) grid[i][0] += grid[i - 1][0];",
      "    for (let j = 1; j < n; j++) grid[0][j] += grid[0][j - 1];",
      "    for (let i = 1; i < m; i++) {",
      "        for (let j = 1; j < n; j++) {",
      "            grid[i][j] += Math.min(grid[i - 1][j], grid[i][j - 1]);",
      "        }",
      "    }",
      "    return grid[m - 1][n - 1];",
      "}"
    ],
    "references": [],
    "slug": "minimum-path-sum",
    "example": "Input: grid = [[1,3,1],[1,5,1],[4,2,1]]\nOutput: 7\nExplanation: The path with the minimum sum is [1,3,1,1,1]."
  },
  {
    "id": 201,
    "title": "Combination Sum II",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target. Each number in candidates may only be used once in the combination.",
    "answer": [
      "function combinationSum2(candidates, target) {",
      "    candidates.sort((a, b) => a - b);",
      "    const res = [];",
      "    function backtrack(start, remain, path) {",
      "        if (remain === 0) {",
      "            res.push([...path]);",
      "            return;",
      "        }",
      "        for (let i = start; i < candidates.length; i++) {",
      "            if (i > start && candidates[i] === candidates[i - 1]) continue;",
      "            if (candidates[i] > remain) break;",
      "            path.push(candidates[i]);",
      "            backtrack(i + 1, remain - candidates[i], path);",
      "            path.pop();",
      "        }",
      "    }",
      "    backtrack(0, target, []);",
      "    return res;",
      "}"
    ],
    "references": [],
    "slug": "combination-sum-ii",
    "example": "Input: candidates = [10,1,2,7,6,1,5], target = 8\nOutput: [[1,1,6],[1,2,5],[1,7],[2,6]]\nExplanation: There are 4 unique combinations."
  },
  {
    "id": 202,
    "title": "Word Search",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given an m x n grid of characters board and a string word, return true if word exists in the grid.",
    "answer": [
      "function exist(board, word) {",
      "    const m = board.length, n = board[0].length;",
      "    function dfs(i, j, k) {",
      "        if (i < 0 || j < 0 || i >= m || j >= n || board[i][j] !== word[k]) return false;",
      "        if (k === word.length - 1) return true;",
      "        let temp = board[i][j];",
      "        board[i][j] = '#';",
      "        const res = dfs(i+1, j, k+1) || dfs(i-1, j, k+1) || dfs(i, j+1, k+1) || dfs(i, j-1, k+1);",
      "        board[i][j] = temp;",
      "        return res;",
      "    }",
      "    for (let i = 0; i < m; i++) {",
      "        for (let j = 0; j < n; j++) {",
      "            if (dfs(i, j, 0)) return true;",
      "        }",
      "    }",
      "    return false;",
      "}"
    ],
    "references": [],
    "slug": "word-search",
    "example": "Input: board = [[\"A\",\"B\",\"C\",\"E\"],[\"S\",\"F\",\"C\",\"S\"],[\"A\",\"D\",\"E\",\"E\"]], word = \"ABCCED\"\nOutput: true\nExplanation: The word \"ABCCED\" can be constructed from letters of the board."
  },
  {
    "id": 203,
    "title": "Insert Interval",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).",
    "answer": [
      "function insert(intervals, newInterval) {",
      "    const res = [];",
      "    let i = 0;",
      "    while (i < intervals.length && intervals[i][1] < newInterval[0]) {",
      "        res.push(intervals[i]);",
      "        i++;",
      "    }",
      "    while (i < intervals.length && intervals[i][0] <= newInterval[1]) {",
      "        newInterval[0] = Math.min(newInterval[0], intervals[i][0]);",
      "        newInterval[1] = Math.max(newInterval[1], intervals[i][1]);",
      "        i++;",
      "    }",
      "    res.push(newInterval);",
      "    while (i < intervals.length) {",
      "        res.push(intervals[i]);",
      "        i++;",
      "    }",
      "    return res;",
      "}"
    ],
    "references": [],
    "slug": "insert-interval",
    "example": "Input: intervals = [[1,3],[6,9]], newInterval = [2,5]\nOutput: [[1,5],[6,9]]\nExplanation: The new interval [2,5] is merged with [1,3] to form [1,5]."
  },
  {
    "id": 204,
    "title": "Minimum Size Subarray Sum",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray whose sum is greater than or equal to target.",
    "answer": [
      "function minSubArrayLen(target, nums) {",
      "    let left = 0, sum = 0, minLen = Infinity;",
      "    for (let right = 0; right < nums.length; right++) {",
      "        sum += nums[right];",
      "        while (sum >= target) {",
      "            minLen = Math.min(minLen, right - left + 1);",
      "            sum -= nums[left++];",
      "        }",
      "    }",
      "    return minLen === Infinity ? 0 : minLen;",
      "}"
    ],
    "references": [],
    "slug": "minimum-size-subarray-sum",
    "example": "Input: target = 7, nums = [2,3,1,2,4,3]\nOutput: 2\nExplanation: The subarray [4,3] has the minimal length under the problem constraint."
  },
  {
    "id": 205,
    "title": "Find All Anagrams in a String",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.",
    "answer": [
      "function findAnagrams(s, p) {",
      "    const result = [];",
      "    if (s.length < p.length) return result;",
      "    const pCount = new Array(26).fill(0);",
      "    const sCount = new Array(26).fill(0);",
      "    for (let i = 0; i < p.length; i++) {",
      "        pCount[p.charCodeAt(i) - 97]++;",
      "        sCount[s.charCodeAt(i) - 97]++;",
      "    }",
      "    if (arraysEqual(pCount, sCount)) result.push(0);",
      "    for (let i = p.length; i < s.length; i++) {",
      "        sCount[s.charCodeAt(i) - 97]++;",
      "        sCount[s.charCodeAt(i - p.length) - 97]--;",
      "        if (arraysEqual(pCount, sCount)) result.push(i - p.length + 1);",
      "    }",
      "    return result;",
      "}",
      "function arraysEqual(a, b) {",
      "    for (let i = 0; i < a.length; i++) {",
      "        if (a[i] !== b[i]) return false;",
      "    }",
      "    return true;",
      "}"
    ],
    "references": [],
    "slug": "find-all-anagrams-in-a-string",
    "example": "Input: s = \"cbaebabacd\", p = \"abc\"\nOutput: [0,6]\nExplanation: The substring with start index 0 is \"cba\", which is an anagram of \"abc\". The substring with start index 6 is \"bac\", which is also an anagram of \"abc\"."
  },
  {
    "id": 206,
    "title": "Partition Labels",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "You are given a string s. Partition it into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.",
    "answer": [
      "function partitionLabels(s) {",
      "    const last = {};",
      "    for (let i = 0; i < s.length; i++) {",
      "        last[s[i]] = i;",
      "    }",
      "    let res = [], start = 0, end = 0;",
      "    for (let i = 0; i < s.length; i++) {",
      "        end = Math.max(end, last[s[i]]);",
      "        if (i === end) {",
      "            res.push(end - start + 1);",
      "            start = i + 1;",
      "        }",
      "    }",
      "    return res;",
      "}"
    ],
    "references": [],
    "slug": "partition-labels",
    "example": "Input: s = \"ababcbacadefegdehijhklij\"\nOutput: [9,7,8]\nExplanation: The partition is \"ababcbaca\", \"defegde\", \"hijhklij\"."
  },
  {
    "id": 207,
    "title": "Subarray Sum Equals K",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given an array of integers and an integer k, find the total number of continuous subarrays whose sum equals to k.",
    "answer": [
      "function subarraySum(nums, k) {",
      "    let count = 0, sum = 0;",
      "    const map = {0: 1};",
      "    for (let num of nums) {",
      "        sum += num;",
      "        if (map[sum - k]) count += map[sum - k];",
      "        map[sum] = (map[sum] || 0) + 1;",
      "    }",
      "    return count;",
      "}"
    ],
    "references": [],
    "slug": "subarray-sum-equals-k",
    "example": "Input: nums = [1,1,1], k = 2\nOutput: 2\nExplanation: The subarray [1,1] occurs twice."
  },
  {
    "id": 208,
    "title": "Daily Temperatures",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given an array of integers temperatures, return an array answer such that answer[i] is the number of days you would have to wait after the i-th day to get a warmer temperature.",
    "answer": [
      "function dailyTemperatures(T) {",
      "    const res = new Array(T.length).fill(0);",
      "    const stack = [];",
      "    for (let i = 0; i < T.length; i++) {",
      "        while (stack.length && T[i] > T[stack[stack.length - 1]]) {",
      "            let idx = stack.pop();",
      "            res[idx] = i - idx;",
      "        }",
      "        stack.push(i);",
      "    }",
      "    return res;",
      "}"
    ],
    "references": [],
    "slug": "daily-temperatures",
    "example": "Input: temperatures = [73,74,75,71,69,72,76,73]\nOutput: [1,1,4,2,1,1,0,0]\nExplanation: The answer is [1,1,4,2,1,1,0,0]."
  },
  {
    "id": 209,
    "title": "Number of Islands",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given a 2D grid of '1's (land) and '0's (water), count the number of islands.",
    "answer": [
      "function numIslands(grid) {",
      "    if (!grid.length) return 0;",
      "    let count = 0;",
      "    const m = grid.length, n = grid[0].length;",
      "    function dfs(i, j) {",
      "        if (i < 0 || j < 0 || i >= m || j >= n || grid[i][j] === '0') return;",
      "        grid[i][j] = '0';",
      "        dfs(i+1, j);",
      "        dfs(i-1, j);",
      "        dfs(i, j+1);",
      "        dfs(i, j-1);",
      "    }",
      "    for (let i = 0; i < m; i++) {",
      "        for (let j = 0; j < n; j++) {",
      "            if (grid[i][j] === '1') {",
      "                dfs(i, j);",
      "                count++;",
      "            }",
      "        }",
      "    }",
      "    return count;",
      "}"
    ],
    "references": [],
    "slug": "number-of-islands",
    "example": "Input: grid = [[\"1\",\"1\",\"1\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"1\",\"0\"],[\"1\",\"1\",\"0\",\"0\",\"0\"],[\"0\",\"0\",\"0\",\"0\",\"0\"]]\nOutput: 1\nExplanation: The grid is filled with 1's except for the top-left corner where grid[0][0] = '0'."
  },
  {
    "id": 210,
    "title": "Course Schedule",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "There are a total of numCourses courses you have to take. Some courses have prerequisites. Determine if you can finish all courses.",
    "answer": [
      "function canFinish(numCourses, prerequisites) {",
      "    const graph = Array.from({ length: numCourses }, () => []);",
      "    for (let [a, b] of prerequisites) {",
      "        graph[a].push(b);",
      "    }",
      "    const visited = new Array(numCourses).fill(0);",
      "    function dfs(course) {",
      "        if (visited[course] === 1) return false;",
      "        if (visited[course] === 2) return true;",
      "        visited[course] = 1;",
      "        for (let prereq of graph[course]) {",
      "            if (!dfs(prereq)) return false;",
      "        }",
      "        visited[course] = 2;",
      "        return true;",
      "    }",
      "    for (let i = 0; i < numCourses; i++) {",
      "        if (!dfs(i)) return false;",
      "    }",
      "    return true;",
      "}"
    ],
    "references": [],
    "slug": "course-schedule",
    "example": "Input: numCourses = 2, prerequisites = [[1,0]]\nOutput: true\nExplanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So it is possible."
  },
  {
    "id": 211,
    "title": "Graph Valid Tree",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given n nodes labeled from 0 to n-1 and a list of edges, determine if the graph is a valid tree.",
    "answer": [
      "function validTree(n, edges) {",
      "    if (edges.length !== n - 1) return false;",
      "    const graph = {};",
      "    for (let [a, b] of edges) {",
      "        if (!graph[a]) graph[a] = [];",
      "        if (!graph[b]) graph[b] = [];",
      "        graph[a].push(b);",
      "        graph[b].push(a);",
      "    }",
      "    const visited = new Set();",
      "    function dfs(node, prev) {",
      "        if (visited.has(node)) return false;",
      "        visited.add(node);",
      "        for (let neighbor of graph[node]) {",
      "            if (neighbor === prev) continue;",
      "            if (!dfs(neighbor, node)) return false;",
      "        }",
      "        return true;",
      "    }",
      "    return dfs(0, -1) && visited.size === n;",
      "}"
    ],
    "references": [],
    "slug": "graph-valid-tree",
    "example": "Input: n = 5, edges = [[0,1],[0,2],[0,3],[1,4]]\nOutput: true\nExplanation: The graph is a valid tree because it is connected and has no cycles."
  },
  {
    "id": 212,
    "title": "Evaluate Reverse Polish Notation",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Evaluate the value of an arithmetic expression in Reverse Polish Notation.",
    "answer": [
      "function evalRPN(tokens) {",
      "    const stack = [];",
      "    for (let token of tokens) {",
      "        if (['+', '-', '*', '/'].includes(token)) {",
      "            let b = stack.pop();",
      "            let a = stack.pop();",
      "            let res;",
      "            if (token === '+') res = a + b;",
      "            else if (token === '-') res = a - b;",
      "            else if (token === '*') res = a * b;",
      "            else res = Math.trunc(a / b);",
      "            stack.push(res);",
      "        } else {",
      "            stack.push(Number(token));",
      "        }",
      "    }",
      "    return stack[0];",
      "}"
    ],
    "references": [],
    "slug": "evaluate-reverse-polish-notation",
    "example": "Input: tokens = [\"2\",\"1\",\"+\",\"3\",\"*\"]\nOutput: 9\nExplanation: ((2 + 1) * 3) = 9."
  },
  {
    "id": 213,
    "title": "Largest Rectangle in Histogram",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given an array of integers heights representing histogram bar heights, find the area of the largest rectangle in the histogram.",
    "answer": [
      "function largestRectangleArea(heights) {",
      "    heights.push(0);",
      "    const stack = [];",
      "    let maxArea = 0;",
      "    for (let i = 0; i < heights.length; i++) {",
      "        while (stack.length && heights[i] < heights[stack[stack.length - 1]]) {",
      "            let h = heights[stack.pop()];",
      "            let w = stack.length === 0 ? i : i - stack[stack.length - 1] - 1;",
      "            maxArea = Math.max(maxArea, h * w);",
      "        }",
      "        stack.push(i);",
      "    }",
      "    return maxArea;",
      "}"
    ],
    "references": [],
    "slug": "largest-rectangle-in-histogram",
    "example": "Input: heights = [2,1,5,6,2,3]\nOutput: 10\nExplanation: The largest rectangle is shown in the above picture."
  },
  {
    "id": 214,
    "title": "Maximal Square",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given a 2D binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.",
    "answer": [
      "function maximalSquare(matrix) {",
      "    if (!matrix.length) return 0;",
      "    let maxSide = 0;",
      "    const dp = Array(matrix.length+1).fill().map(() => Array(matrix[0].length+1).fill(0));",
      "    for (let i = 1; i <= matrix.length; i++) {",
      "        for (let j = 1; j <= matrix[0].length; j++) {",
      "            if (matrix[i-1][j-1] === '1') {",
      "                dp[i][j] = Math.min(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1;",
      "                maxSide = Math.max(maxSide, dp[i][j]);",
      "            }",
      "        }",
      "    }",
      "    return maxSide * maxSide;",
      "}"
    ],
    "references": [],
    "slug": "maximal-square",
    "example": "Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 4\nExplanation: The largest square is formed by the bottom-right corner."
  },
  {
    "id": 215,
    "title": "Coin Change",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given an integer array coins and an integer amount, return the fewest number of coins needed to make up that amount.",
    "answer": [
      "function coinChange(coins, amount) {",
      "    const dp = new Array(amount + 1).fill(Infinity);",
      "    dp[0] = 0;",
      "    for (let i = 1; i <= amount; i++) {",
      "        for (let coin of coins) {",
      "            if (i - coin >= 0) {",
      "                dp[i] = Math.min(dp[i], dp[i - coin] + 1);",
      "            }",
      "        }",
      "    }",
      "    return dp[amount] === Infinity ? -1 : dp[amount];",
      "}"
    ],
    "references": [],
    "slug": "coin-change",
    "example": "Input: coins = [1,2,5], amount = 11\nOutput: 3\nExplanation: 11 = 5 + 5 + 1."
  },
  {
    "id": 216,
    "title": "Number of 1 Bits",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Write a function that takes an unsigned integer and returns the number of '1' bits it has (Hamming weight).",
    "answer": [
      "function hammingWeight(n) {",
      "    let count = 0;",
      "    while (n !== 0) {",
      "        n &= (n - 1);",
      "        count++;",
      "    }",
      "    return count;",
      "}"
    ],
    "references": [],
    "slug": "number-of-1-bits",
    "example": "Input: n = 00000000000000000000000000001011\nOutput: 3\nExplanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits."
  },
  {
    "id": 217,
    "title": "Power of Two",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given an integer n, return true if it is a power of two. Otherwise, return false.",
    "answer": [
      "function isPowerOfTwo(n) {",
      "    return n > 0 && (n & (n - 1)) === 0;",
      "}"
    ],
    "references": [],
    "slug": "power-of-two",
    "example": "Input: n = 1\nOutput: true\nExplanation: 2^0 = 1."
  },
  {
    "id": 218,
    "title": "Reverse Bits",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Reverse bits of a given 32 bits unsigned integer.",
    "answer": [
      "function reverseBits(n) {",
      "    let res = 0;",
      "    for (let i = 0; i < 32; i++) {",
      "        res = (res << 1) | (n & 1);",
      "        n >>>= 1;",
      "    }",
      "    return res >>> 0;",
      "}"
    ],
    "references": [],
    "slug": "reverse-bits",
    "example": "Input: n = 00000010100101000001111010011100\nOutput: 964176192 (00111001011110000010100101000000)\nExplanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000."
  },
  {
    "id": 219,
    "title": "House Robber",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "You are a professional robber planning to rob houses along a street. Each house has a certain amount of money. Find the maximum amount of money you can rob without alerting the police.",
    "answer": [
      "function rob(nums) {",
      "    if (nums.length === 0) return 0;",
      "    let prev1 = 0, prev2 = 0;",
      "    for (let num of nums) {",
      "        let temp = prev1;",
      "        prev1 = Math.max(prev2 + num, prev1);",
      "        prev2 = temp;",
      "    }",
      "    return prev1;",
      "}"
    ],
    "references": [],
    "slug": "house-robber",
    "example": "Input: nums = [1,2,3,1]\nOutput: 4\nExplanation: Rob house 1 (money = 1) and then rob house 3 (money = 3). Total amount you can rob = 1 + 3 = 4."
  },
  {
    "id": 220,
    "title": "Bitwise AND of Numbers Range",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given two integers left and right, return the bitwise AND of all numbers in this range.",
    "answer": [
      "function rangeBitwiseAnd(left, right) {",
      "    let shift = 0;",
      "    while (left < right) {",
      "        left >>= 1;",
      "        right >>= 1;",
      "        shift++;",
      "    }",
      "    return left << shift;",
      "}"
    ],
    "references": [],
    "slug": "bitwise-and-of-numbers-range",
    "example": "Input: left = 5, right = 7\nOutput: 4\nExplanation: 5 = 101, 6 = 110, 7 = 111. The bitwise AND of all numbers in this range is 4."
  },
  {
    "id": 221,
    "title": "Happy Number",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Write an algorithm to determine if a number n is happy.",
    "answer": [
      "function isHappy(n) {",
      "    const seen = new Set();",
      "    while (n !== 1 && !seen.has(n)) {",
      "        seen.add(n);",
      "        n = sumOfSquares(n);",
      "    }",
      "    return n === 1;",
      "}",
      "function sumOfSquares(num) {",
      "    let sum = 0;",
      "    while (num > 0) {",
      "        let digit = num % 10;",
      "        sum += digit * digit;",
      "        num = Math.floor(num / 10);",
      "    }",
      "    return sum;",
      "}"
    ],
    "references": [],
    "slug": "happy-number",
    "example": "Input: n = 19\nOutput: true\nExplanation: 1^2 + 9^2 = 82, 8^2 + 2^2 = 68, 6^2 + 8^2 = 100, 1^2 + 0^2 + 0^2 = 1."
  },
  {
    "id": 222,
    "title": "Implement Trie (Prefix Tree)",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Implement a trie with insert, search, and startsWith methods.",
    "answer": [
      "class TrieNode {",
      "    constructor() {",
      "        this.children = {};",
      "        this.isEnd = false;",
      "    }",
      "}",
      "class Trie {",
      "    constructor() {",
      "        this.root = new TrieNode();",
      "    }",
      "    insert(word) {",
      "        let node = this.root;",
      "        for (let char of word) {",
      "            if (!node.children[char]) node.children[char] = new TrieNode();",
      "            node = node.children[char];",
      "        }",
      "        node.isEnd = true;",
      "    }",
      "    search(word) {",
      "        let node = this.root;",
      "        for (let char of word) {",
      "            if (!node.children[char]) return false;",
      "            node = node.children[char];",
      "        }",
      "        return node.isEnd;",
      "    }",
      "    startsWith(prefix) {",
      "        let node = this.root;",
      "        for (let char of prefix) {",
      "            if (!node.children[char]) return false;",
      "            node = node.children[char];",
      "        }",
      "        return true;",
      "    }",
      "}"
    ],
    "references": [],
    "slug": "implement-trie-prefix-tree",
    "example": "Input: [\"Trie\", \"insert\", \"search\", \"search\", \"startsWith\", \"insert\", \"search\"]\n       [[], [\"apple\"], [\"apple\"], [\"app\"], [\"app\"], [\"app\"], [\"app\"]]\nOutput: [null, null, true, false, true, null, true]\nExplanation: Trie initializes the data structure. insert(\"apple\") stores the word \"apple\". search(\"apple\") returns true. search(\"app\") returns false because \"app\" is not a complete word yet. startsWith(\"app\") returns true because a word starts with \"app\". insert(\"app\") inserts the word \"app\". search(\"app\") returns true after insertion."
  },
  {
    "id": 223,
    "title": "Add and Search Word - Data Structure Design",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Design a data structure that supports adding new words and finding if a word matches any previously added word, where . can represent any letter.",
    "answer": [
      "class WordDictionary {",
      "    constructor() {",
      "        this.root = new TrieNode();",
      "    }",
      "    addWord(word) {",
      "        let node = this.root;",
      "        for (let char of word) {",
      "            if (!node.children[char]) node.children[char] = new TrieNode();",
      "            node = node.children[char];",
      "        }",
      "        node.isEnd = true;",
      "    }",
      "    search(word) {",
      "        return this.dfs(word, 0, this.root);",
      "    }",
      "    dfs(word, index, node) {",
      "        if (index === word.length) return node.isEnd;",
      "        let char = word[index];",
      "        if (char === '.') {",
      "            for (let child in node.children) {",
      "                if (this.dfs(word, index + 1, node.children[child])) return true;",
      "            }",
      "            return false;",
      "        } else {",
      "            if (!node.children[char]) return false;",
      "            return this.dfs(word, index + 1, node.children[char]);",
      "        }",
      "    }",
      "}",
      "class TrieNode {",
      "    constructor() {",
      "        this.children = {};",
      "        this.isEnd = false;",
      "    }",
      "}"
    ],
    "references": [],
    "slug": "add-and-search-word-data-structure-design",
"example": "Input: [\"WordDictionary\",\"addWord\",\"addWord\",\"search\",\"search\",\"search\",\"search\"]\n       [[],[\"bad\"],[\"dad\"],[\"pad\"],[\"bad\"],[\".ad\"],[\"b..\"]]\nOutput: [null,null,null,false,true,true,true]\nExplanation: WordDictionary initializes the data structure. addWord(\"bad\") adds the word. addWord(\"dad\") adds another. search(\"pad\") returns false. search(\"bad\") returns true. search(\".ad\") returns true because \".\" matches any letter. search(\"b..\") returns true because \"b..\" matches \"bad\"."
  },
  {
    "id": 224,
    "title": "Largest Number",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Given a list of non-negative integers, arrange them such that they form the largest number.",
    "answer": [
      "function largestNumber(nums) {",
      "    const res = nums.map(String).sort((a, b) => (b + a) - (a + b)).join('');",
      "    return res[0] === '0' ? '0' : res;",
      "}"
    ],
    "references": [],
    "slug": "largest-number",
"example": "Input: [10,2]\nOutput: \"210\"\nExplanation: The largest formed number is \"210\" by arranging numbers as strings."
  },
  {
    "id": 225,
    "title": "Basic Calculator II",
    "category": "DSA",
    "difficulty": "Intermediate",
    "question": "Implement a basic calculator to evaluate a simple expression string containing non-negative integers, +, -, *, / operators.",
    "answer": [
      "function calculate(s) {",
      "    s = s.trim().replace(/\\s+/g, '');",
      "    const stack = [];",
      "    let num = 0, sign = '+';",
      "    for (let i = 0; i < s.length; i++) {",
      "        if (!isNaN(s[i])) {",
      "            num = num * 10 + Number(s[i]);",
      "        }",
      "        if (isNaN(s[i]) || i === s.length - 1) {",
      "            if (sign === '+') stack.push(num);",
      "            else if (sign === '-') stack.push(-num);",
      "            else if (sign === '*') stack.push(stack.pop() * num);",
      "            else if (sign === '/') stack.push(Math.trunc(stack.pop() / num));",
      "            sign = s[i];",
      "            num = 0;",
      "        }",
      "    }",
      "    return stack.reduce((a, b) => a + b, 0);",
      "}"
    ],
    "references": [],
    "slug": "basic-calculator-ii",
"example": "Input: \"3+2*2\"\nOutput: 7\nExplanation: Expression evaluates as 3 + (2 * 2) = 7."
  },
  {
    "id": 226,
    "title": "Trapping Rain Water",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given n non-negative integers representing an elevation map, compute how much water it can trap after raining.",
    "answer": [
      "function trap(height) {",
      "    let left = 0, right = height.length - 1;",
      "    let leftMax = 0, rightMax = 0, water = 0;",
      "    while (left < right) {",
      "        if (height[left] < height[right]) {",
      "            if (height[left] >= leftMax) leftMax = height[left];",
      "            else water += leftMax - height[left];",
      "            left++;",
      "        } else {",
      "            if (height[right] >= rightMax) rightMax = height[right];",
      "            else water += rightMax - height[right];",
      "            right--;",
      "        }",
      "    }",
      "    return water;",
      "}"
    ],
    "references": [],
    "slug": "trapping-rain-water",
"example": "Input: [0,1,0,2,1,0,1,3,2,1,2,1]\nOutput: 6\nExplanation: Trapped water is 6 units between the bars."
  },
  {
    "id": 227,
    "title": "Longest Consecutive Sequence",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given an unsorted array of integers, find the length of the longest consecutive elements sequence.",
    "answer": [
      "function longestConsecutive(nums) {",
      "    const set = new Set(nums);",
      "    let maxLen = 0;",
      "    for (let num of set) {",
      "        if (!set.has(num - 1)) {",
      "            let currentNum = num;",
      "            let streak = 1;",
      "            while (set.has(currentNum + 1)) {",
      "                currentNum++;",
      "                streak++;",
      "            }",
      "            maxLen = Math.max(maxLen, streak);",
      "        }",
      "    }",
      "    return maxLen;",
      "}"
    ],
    "references": [],
    "slug": "longest-consecutive-sequence",
      "example": "Input: ...\nOutput: ...\nExplanation: ..."
  },
  {
    "id": 228,
    "title": "Edit Distance",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.",
    "answer": [
      "function minDistance(word1, word2) {",
      "    const m = word1.length, n = word2.length;",
      "    const dp = Array(m+1).fill().map(() => Array(n+1).fill(0));",
      "    for (let i = 0; i <= m; i++) dp[i][0] = i;",
      "    for (let j = 0; j <= n; j++) dp[0][j] = j;",
      "    for (let i = 1; i <= m; i++) {",
      "        for (let j = 1; j <= n; j++) {",
      "            if (word1[i-1] === word2[j-1]) {",
      "                dp[i][j] = dp[i-1][j-1];",
      "            } else {",
      "                dp[i][j] = 1 + Math.min(dp[i-1][j-1], dp[i][j-1], dp[i-1][j]);",
      "            }",
      "        }",
      "    }",
      "    return dp[m][n];",
      "}"
    ],
    "references": [],
    "slug": "edit-distance",
      "example": "Input: ...\nOutput: ...\nExplanation: ..."
  },
  {
    "id": 229,
    "title": "Merge k Sorted Lists",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Merge k sorted linked lists and return it as one sorted list.",
    "answer": [
      "function mergeKLists(lists) {",
      "    if (!lists.length) return null;",
      "    while (lists.length > 1) {",
      "        let l1 = lists.shift();",
      "        let l2 = lists.shift();",
      "        const merged = mergeTwoLists(l1, l2);",
      "        lists.push(merged);",
      "    }",
      "    return lists[0];",
      "}",
      "function mergeTwoLists(l1, l2) {",
      "    const dummy = new ListNode(0);",
      "    let current = dummy;",
      "    while (l1 && l2) {",
      "        if (l1.val < l2.val) {",
      "            current.next = l1;",
      "            l1 = l1.next;",
      "        } else {",
      "            current.next = l2;",
      "            l2 = l2.next;",
      "        }",
      "        current = current.next;",
      "    }",
      "    current.next = l1 || l2;",
      "    return dummy.next;",
      "}"
    ],
    "references": [],
    "slug": "merge-k-sorted-lists",
    "example": "Input: [[1,4,5],[1,3,4],[2,6]]\nOutput: [1,1,2,3,4,4,5,6]\nExplanation: Merged lists in sorted order."
  },
  {
    "id": 230,
    "title": "Word Ladder",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given two words and a dictionary, find the length of the shortest transformation sequence from beginWord to endWord.",
    "answer": [
      "function ladderLength(beginWord, endWord, wordList) {",
      "    const wordSet = new Set(wordList);",
      "    if (!wordSet.has(endWord)) return 0;",
      "    let queue = [[beginWord, 1]];",
      "    while (queue.length) {",
      "        let [word, level] = queue.shift();",
      "        for (let i = 0; i < word.length; i++) {",
      "            for (let c of 'abcdefghijklmnopqrstuvwxyz') {",
      "                const newWord = word.slice(0, i) + c + word.slice(i+1);",
      "                if (newWord === endWord) return level + 1;",
      "                if (wordSet.has(newWord)) {",
      "                    wordSet.delete(newWord);",
      "                    queue.push([newWord, level + 1]);",
      "                }",
      "            }",
      "        }",
      "    }",
      "    return 0;",
      "}"
    ],
    "references": [],
    "slug": "word-ladder",
    "example": "Input: beginWord = \"hit\", endWord = \"cog\", wordList = [\"hot\",\"dot\",\"dog\",\"lot\",\"log\",\"cog\"]\nOutput: 5\nExplanation: The shortest transformation sequence is \"hit\" -> \"hot\" -> \"dot\" -> \"dog\" -> \"cog\", which is 5 words long."
  },
  {
    "id": 231,
    "title": "Largest Rectangle in Histogram",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given an array of heights representing histogram bars, find the area of the largest rectangle in the histogram.",
    "answer": [
      "function largestRectangleArea(heights) {",
      "    heights.push(0);",
      "    const stack = [];",
      "    let maxArea = 0;",
      "    for (let i = 0; i < heights.length; i++) {",
      "        while (stack.length && heights[i] < heights[stack[stack.length - 1]]) {",
      "            const height = heights[stack.pop()];",
      "            const width = stack.length === 0 ? i : i - stack[stack.length - 1] - 1;",
      "            maxArea = Math.max(maxArea, height * width);",
      "        }",
      "        stack.push(i);",
      "    }",
      "    return maxArea;",
      "}"
    ],
    "references": [],
    "slug": "largest-rectangle-in-histogram-231",
    "example": "Input: heights = [2,1,5,6,2,3]\nOutput: 10\nExplanation: The largest rectangle is shown in the above picture."
  },
  {
    "id": 232,
    "title": "Maximal Rectangle",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.",
    "answer": [
      "function maximalRectangle(matrix) {",
      "    if (!matrix.length) return 0;",
      "    let maxArea = 0;",
      "    let heights = Array(matrix[0].length).fill(0);",
      "    for (let row of matrix) {",
      "        for (let i = 0; i < row.length; i++) {",
      "            heights[i] = row[i] === '1' ? heights[i] + 1 : 0;",
      "        }",
      "        maxArea = Math.max(maxArea, largestRectangleArea(heights));",
      "    }",
      "    return maxArea;",
      "}",
      "function largestRectangleArea(heights) {",
      "    heights.push(0);",
      "    const stack = [];",
      "    let max = 0;",
      "    for (let i = 0; i < heights.length; i++) {",
      "        while (stack.length && heights[i] < heights[stack[stack.length - 1]]) {",
      "            let h = heights[stack.pop()];",
      "            let w = stack.length === 0 ? i : i - stack[stack.length - 1] - 1;",
      "            max = Math.max(max, h * w);",
      "        }",
      "        stack.push(i);",
      "    }",
      "    return max;",
      "}"
    ],
    "references": [],
    "slug": "maximal-rectangle",
    "example": "Input: matrix = [[\"1\",\"0\",\"1\",\"0\",\"0\"],[\"1\",\"0\",\"1\",\"1\",\"1\"],[\"1\",\"1\",\"1\",\"1\",\"1\"],[\"1\",\"0\",\"0\",\"1\",\"0\"]]\nOutput: 6\nExplanation: The largest rectangle is formed by the bottom-right corner."
  },
  {
    "id": 233,
    "title": "Longest Valid Parentheses",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.",
    "answer": [
      "function longestValidParentheses(s) {",
      "    let maxLen = 0;",
      "    const stack = [-1];",
      "    for (let i = 0; i < s.length; i++) {",
      "        if (s[i] === '(') {",
      "            stack.push(i);",
      "        } else {",
      "            stack.pop();",
      "            if (stack.length) {",
      "                maxLen = Math.max(maxLen, i - stack[stack.length - 1]);",
      "            } else {",
      "                stack.push(i);",
      "            }",
      "        }",
      "    }",
      "    return maxLen;",
      "}"
    ],
    "references": [],
    "slug": "longest-valid-parentheses",
    "example": "Input: s = \"(()\"\nOutput: 2\nExplanation: The longest valid parentheses substring is \"()\"."
  },
  {
    "id": 234,
    "title": "Minimum Window Substring",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given strings s and t, return the minimum window in s which contains all the characters of t.",
    "answer": [
      "function minWindow(s, t) {",
      "    const map = {};",
      "    for (let c of t) map[c] = (map[c] || 0) + 1;",
      "    let left = 0, right = 0;",
      "    let count = t.length;",
      "    let minLen = Infinity, minStart = 0;",
      "    while (right < s.length) {",
      "        if (map[s[right]] > 0) count--;",
      "        map[s[right]] = (map[s[right]] || 0) - 1;",
      "        right++;",
      "        while (count === 0) {",
      "            if (right - left < minLen) {",
      "                minLen = right - left;",
      "                minStart = left;",
      "            }",
      "            map[s[left]]++;",
      "            if (map[s[left]] > 0) count++;",
      "            left++;",
      "        }",
      "    }",
      "    return minLen === Infinity ? \"\" : s.substr(minStart, minLen);",
      "}"
    ],
    "references": [],
    "slug": "minimum-window-substring-234",
    "example": "Input: s = \"ADOBECODEBANC\", t = \"ABC\"\nOutput: \"BANC\"\nExplanation: The minimum window substring is \"BANC\"."
  },
  {
    "id": 235,
    "title": "Sudoku Solver",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Write a program to solve a Sudoku puzzle by filling the empty cells.",
    "answer": [
      "function solveSudoku(board) {",
      "    function isValid(board, row, col, char) {",
      "        for (let i = 0; i < 9; i++) {",
      "            if (board[i][col] === char) return false;",
      "            if (board[row][i] === char) return false;",
      "            const r = 3 * Math.floor(row / 3) + Math.floor(i / 3);",
      "            const c = 3 * Math.floor(col / 3) + i % 3;",
      "            if (board[r][c] === char) return false;",
      "        }",
      "        return true;",
      "    }",
      "    function backtrack() {",
      "        for (let i = 0; i < 9; i++) {",
      "            for (let j = 0; j < 9; j++) {",
      "                if (board[i][j] === '.') {",
      "                    for (let c of '123456789') {",
      "                        if (isValid(board, i, j, c)) {",
      "                            board[i][j] = c;",
      "                            if (backtrack()) return true;",
      "                            board[i][j] = '.';",
      "                        }",
      "                    }",
      "                    return false;",
      "                }",
      "            }",
      "        }",
      "        return true;",
      "    }",
      "    backtrack();",
      "}"
    ],
    "references": [],
    "slug": "sudoku-solver",
    "example": "Input: board = [[\"5\",\"3\",\".\",\".\",\"7\",\".\",\".\",\".\",\".\"],[\"6\",\".\",\".\",\"1\",\"9\",\"5\",\".\",\".\",\".\"],[\".\",\"9\",\"8\",\".\",\".\",\".\",\".\",\"6\",\".\"],[\"8\",\".\",\".\",\".\",\"6\",\".\",\".\",\".\",\"3\"],[\"4\",\".\",\".\",\"8\",\".\",\"3\",\".\",\".\",\"1\"],[\"7\",\".\",\".\",\".\",\"2\",\".\",\".\",\".\",\"6\"],[\".\",\"6\",\".\",\".\",\".\",\".\",\"2\",\"8\",\".\"],[\".\",\".\",\".\",\"4\",\"1\",\"9\",\".\",\".\",\"5\"],[\".\",\".\",\".\",\".\",\"8\",\".\",\".\",\"7\",\"9\"]]\nOutput: true\nExplanation: The Sudoku board is valid."
  },
  {
    "id": 236,
    "title": "Word Search II",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given a 2D board and a list of words, find all words in the board.",
    "answer": [
      "function findWords(board, words) {",
      "    const res = [];",
      "    const trie = buildTrie(words);",
      "    const m = board.length, n = board[0].length;",
      "    function dfs(i, j, node, path) {",
      "        if (node.end) {",
      "            res.push(path);",
      "            node.end = null;",
      "        }",
      "        if (i < 0 || j < 0 || i >= m || j >= n || !node[board[i][j]]) return;",
      "        const char = board[i][j];",
      "        board[i][j] = '#';",
      "        for (let [dx, dy] of [[1,0], [-1,0], [0,1], [0,-1]]) {",
      "            dfs(i+dx, j+dy, node[char], path+char);",
      "        }",
      "        board[i][j] = char;",
      "    }",
      "    for (let i = 0; i < m; i++) {",
      "        for (let j = 0; j < n; j++) {",
      "            dfs(i, j, trie, '');",
      "        }",
      "    }",
      "    return res;",
      "}",
      "function buildTrie(words) {",
      "    const root = {};",
      "    for (let word of words) {",
      "        let node = root;",
      "        for (let char of word) {",
      "            if (!node[char]) node[char] = {};",
      "            node = node[char];",
      "        }",
      "        node.end = word;",
      "    }",
      "    return root;",
      "}"
    ],
    "references": [],
    "slug": "word-search-ii",
    "example": "Input: board = [[\"o\",\"a\",\"a\",\"n\"],[\"e\",\"t\",\"a\",\"e\"],[\"i\",\"h\",\"k\",\"r\"],[\"i\",\"f\",\"l\",\"v\"]], words = [\"oath\",\"pea\",\"eat\",\"rain\"]\nOutput: [\"eat\",\"oath\"]\nExplanation: The words \"eat\" and \"oath\" can be formed by \"o\" -> \"a\" -> \"t\" -> \"h\" -> \"a\" -> \"n\" and \"o\" -> \"a\" -> \"e\" -> \"t\" -> \"h\" -> \"a\" -> \"n\" respectively."
  },
  {
    "id": 237,
    "title": "Burst Balloons",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given n balloons, each with a number on it, burst them all to maximize coins.",
    "answer": [
      "function maxCoins(nums) {",
      "    nums = [1, ...nums, 1];",
      "    const n = nums.length;",
      "    const dp = Array.from({ length: n }, () => Array(n).fill(0));",
      "    for (let len = 2; len < n; len++) {",
      "        for (let left = 0; left < n - len; left++) {",
      "            let right = left + len;",
      "            for (let i = left + 1; i < right; i++) {",
      "                dp[left][right] = Math.max(dp[left][right],",
      "                    nums[left] * nums[i] * nums[right] + dp[left][i] + dp[i][right]",
      "                );",
      "            }",
      "        }",
      "    }",
      "    return dp[0][n - 1];",
      "}"
    ],
    "references": [],
    "slug": "burst-balloons",
    "example": "Input: nums = [3,1,5,8]\nOutput: 167\nExplanation: nums = [3,1,5,8] -> [3,5,8] -> [3,8] -> [8] -> [] coins = 3*1*5 + 3*5*8 + 1*3*8 + 1*8*1 = 167"
  },
  {
    "id": 238,
    "title": "Longest Increasing Path in a Matrix",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given an m x n matrix of integers, find the length of the longest increasing path.",
    "answer": [
      "function longestIncreasingPath(matrix) {",
      "    if (!matrix.length) return 0;",
      "    const m = matrix.length, n = matrix[0].length;",
      "    const dp = Array.from({ length: m }, () => Array(n).fill(0));",
      "    let max = 0;",
      "    function dfs(i, j, prev) {",
      "        if (i < 0 || j < 0 || i >= m || j >= n || matrix[i][j] <= prev) return 0;",
      "        if (dp[i][j]) return dp[i][j];",
      "        let val = matrix[i][j];",
      "        let res = 1 + Math.max(",
      "            dfs(i+1, j, val),",
      "            dfs(i-1, j, val),",
      "            dfs(i, j+1, val),",
      "            dfs(i, j-1, val)",
      "        );",
      "        dp[i][j] = res;",
      "        return res;",
      "    }",
      "    for (let i = 0; i < m; i++) {",
      "        for (let j = 0; j < n; j++) {",
      "            max = Math.max(max, dfs(i, j, -Infinity));",
      "        }",
      "    }",
      "    return max;",
      "}"
    ],
    "references": [],
    "slug": "longest-increasing-path-in-a-matrix",
    "example": "Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]\nOutput: 4\nExplanation: The longest increasing path is [1, 2, 6, 9]."
  },
  {
    "id": 239,
    "title": "Basic Calculator",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Implement a basic calculator to evaluate a simple expression string containing only non-negative integers, '+', '-', '(', ')' and spaces.",
    "answer": [
      "function calculate(s) {",
      "    let stack = [], num = 0, sign = 1, result = 0;",
      "    for (let i = 0; i < s.length; i++) {",
      "        const c = s[i];",
      "        if (!isNaN(c) && c !== ' ') {",
      "            num = num * 10 + parseInt(c);",
      "        } else if (c === '+') {",
      "            result += sign * num;",
      "            num = 0;",
      "            sign = 1;",
      "        } else if (c === '-') {",
      "            result += sign * num;",
      "            num = 0;",
      "            sign = -1;",
      "        } else if (c === '(') {",
      "            stack.push(result);",
      "            stack.push(sign);",
      "            result = 0;",
      "            sign = 1;",
      "        } else if (c === ')') {",
      "            result += sign * num;",
      "            num = 0;",
      "            result *= stack.pop();",
      "            result += stack.pop();",
      "        }",
      "    }",
      "    return result + sign * num;",
      "}"
    ],
    "references": [],
    "slug": "basic-calculator",
    "example": "Input: s = \"1 + 1\"\nOutput: 2\nExplanation: The expression evaluates to 2."
  },
  {
    "id": 240,
    "title": "Palindrome Pairs",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given a list of unique words, return all pairs of distinct indices such that the concatenation of the two words is a palindrome.",
    "answer": [
      "function palindromePairs(words) {",
      "    const map = new Map();",
      "    const res = [];",
      "    words.forEach((word, i) => map.set(word, i));",
      "    for (let i = 0; i < words.length; i++) {",
      "        let word = words[i];",
      "        for (let j = 0; j <= word.length; j++) {",
      "            let prefix = word.substring(0, j);",
      "            let suffix = word.substring(j);",
      "            if (isPalindrome(prefix)) {",
      "                let reversed = suffix.split('').reverse().join('');",
      "                if (map.has(reversed) && map.get(reversed) !== i) {",
      "                    res.push([map.get(reversed), i]);",
      "                }",
      "            }",
      "            if (j !== word.length && isPalindrome(suffix)) {",
      "                let reversed = prefix.split('').reverse().join('');",
      "                if (map.has(reversed) && map.get(reversed) !== i) {",
      "                    res.push([i, map.get(reversed)]);",
      "                }",
      "            }",
      "        }",
      "    }",
      "    return res;",
      "}",
      "function isPalindrome(str) {",
      "    let left = 0, right = str.length - 1;",
      "    while (left < right) {",
      "        if (str[left++] !== str[right--]) return false;",
      "    }",
      "    return true;",
      "}"
    ],
    "references": [],
    "slug": "palindrome-pairs",
    "example": "Input: words = [\"abcd\",\"dcba\",\"lls\",\"s\",\"sssll\"]\nOutput: [[0,1],[1,0],[3,2],[2,4]]\nExplanation: The palindrome pairs are: [0,1] (words[0] + words[1] = \"abcd\" + \"dcba\"), [1,0] (words[1] + words[0] = \"dcba\" + \"abcd\"), [3,2] (words[3] + words[2] = \"s\" + \"lls\"), [2,4] (words[2] + words[4] = \"lls\" + \"sssll\")."
  },
  {
    "id": 241,
    "title": "Serialize and Deserialize Binary Tree",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Design an algorithm to serialize and deserialize a binary tree.",
    "answer": [
      "function serialize(root) {",
      "    if (!root) return '#';",
      "    return root.val + ',' + serialize(root.left) + ',' + serialize(root.right);",
      "}",
      "function deserialize(data) {",
      "    const list = data.split(',');",
      "    function build() {",
      "        const val = list.shift();",
      "        if (val === '#') return null;",
      "        const node = new TreeNode(parseInt(val));",
      "        node.left = build();",
      "        node.right = build();",
      "        return node;",
      "    }",
      "    return build();",
      "}"
    ],
    "references": [],
    "slug": "serialize-and-deserialize-binary-tree",
    "example": "Input: root = [1,2,3,null,null,4,5]\nOutput: [1,2,3,null,null,4,5]\nExplanation: The tree is serialized as [1,2,3,null,null,4,5] where null represents a null node."
  },
  {
    "id": 242,
    "title": "LFU Cache",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Design and implement a data structure for Least Frequently Used (LFU) cache.",
    "answer": [
      "// Advanced solution omitted for brevity",
      "// Typically involves linked hash maps and frequency counters",
      "// Code omitted due to length constraints"
    ],
    "references": [],
    "slug": "lfu-cache",
    "example": "Input: [\"LFUCache\",\"put\",\"put\",\"get\",\"put\",\"get\",\"get\",\"put\",\"get\",\"get\",\"get\"]\n       [[2],[1,1],[2,2],[1],[3,3],[2],[3],[4,4],[1],[3],[4]]\nOutput: [null,null,null,1,null,-1,3,null,-1,3,4]\nExplanation: LFU cache operations with eviction based on frequency."
  },
  {
    "id": 243,
    "title": "Alien Dictionary",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given a list of words sorted lexicographically in an alien language, derive the order of letters in the language.",
    "answer": [
      "function alienOrder(words) {",
      "    const graph = {};",
      "    const indegree = {};",
      "    for (let word of words) {",
      "        for (let c of word) {",
      "            if (!graph[c]) graph[c] = new Set();",
      "            indegree[c] = 0;",
      "        }",
      "    }",
      "    for (let i = 0; i < words.length - 1; i++) {",
      "        let w1 = words[i], w2 = words[i+1];",
      "        for (let j = 0; j < Math.min(w1.length, w2.length); j++) {",
      "            if (w1[j] !== w2[j]) {",
      "                if (!graph[w1[j]].has(w2[j])) {",
      "                    graph[w1[j]].add(w2[j]);",
      "                    indegree[w2[j]]++;",
      "                }",
      "                break;",
      "            }",
      "        }",
      "    }",
      "    const queue = [];",
      "    for (let c in indegree) if (indegree[c] === 0) queue.push(c);",
      "    let result = '';",
      "    while (queue.length) {",
      "        const c = queue.shift();",
      "        result += c;",
      "        for (let nei of graph[c]) {",
      "            indegree[nei]--;",
      "            if (indegree[nei] === 0) queue.push(nei);",
      "        }",
      "    }",
      "    return result.length === Object.keys(indegree).length ? result : '';",
      "}"
    ],
    "references": [],
    "slug": "alien-dictionary",
    "example": "Input: words = [\"wrt\",\"wrf\",\"er\",\"ett\",\"rftt\"]\nOutput: \"wertf\"\nExplanation: The order of letters is: \"wertf\"."
  },
  {
    "id": 244,
    "title": "Range Sum Query 2D - Mutable",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Implement a 2D matrix supporting updates and sumRegion queries efficiently.",
    "answer": [
      "class NumMatrix {",
      "    constructor(matrix) {",
      "        if (!matrix.length || !matrix[0].length) return;",
      "        this.m = matrix.length;",
      "        this.n = matrix[0].length;",
      "        this.tree = Array.from({ length: this.m + 1 }, () => Array(this.n + 1).fill(0));",
      "        this.nums = Array.from({ length: this.m }, () => Array(this.n).fill(0));",
      "        for (let i = 0; i < this.m; i++) {",
      "            for (let j = 0; j < this.n; j++) {",
      "                this.update(i, j, matrix[i][j]);",
      "            }",
      "        }",
      "    }",
      "    update(row, col, val) {",
      "        let delta = val - this.nums[row][col];",
      "        this.nums[row][col] = val;",
      "        for (let i = row + 1; i <= this.m; i += i & -i) {",
      "            for (let j = col + 1; j <= this.n; j += j & -j) {",
      "                this.tree[i][j] += delta;",
      "            }",
      "        }",
      "    }",
      "    sumRegion(row1, col1, row2, col2) {",
      "        return this._sum(row2 + 1, col2 + 1) - this._sum(row1, col2 + 1) - this._sum(row2 + 1, col1) + this._sum(row1, col1);",
      "    }",
      "    _sum(row, col) {",
      "        let res = 0;",
      "        for (let i = row; i > 0; i -= i & -i) {",
      "            for (let j = col; j > 0; j -= j & -j) {",
      "                res += this.tree[i][j];",
      "            }",
      "        }",
      "        return res;",
      "    }",
      "}"
    ],
    "references": [],
    "slug": "range-sum-query-2d-mutable",
    "example": "Input: matrix = [[3,0,1,4,2],[5,6,3,2,1],[1,2,0,1,5],[4,1,0,1,7],[1,0,3,0,5]]\nOutput: [null,null,null,8,5,4,8]\nExplanation: NumMatrix numMatrix = new NumMatrix([[3,0,1,4,2],[5,6,3,2,1],[1,2,0,1,5],[4,1,0,1,7],[1,0,3,0,5]]); numMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangle) numMatrix.update(3, 2, 2); numMatrix.sumRegion(2, 1, 4, 3); // return 10 (i.e sum of the red rectangle)"
  },
  {
    "id": 245,
    "title": "Sliding Window Maximum",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given an array and integer k, find the maximum in each sliding window of size k.",
    "answer": [
      "function maxSlidingWindow(nums, k) {",
      "    const result = [];",
      "    const deque = [];",
      "    for (let i = 0; i < nums.length; i++) {",
      "        while (deque.length && deque[0] <= i - k) deque.shift();",
      "        while (deque.length && nums[deque[deque.length - 1]] < nums[i]) {",
      "            deque.pop();",
      "        }",
      "        deque.push(i);",
      "        if (i >= k - 1) result.push(nums[deque[0]]);",
      "    }",
      "    return result;",
      "}"
    ],
    "references": [],
    "slug": "sliding-window-maximum",
    "example": "Input: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [3,3,5,5,6,7]\nExplanation: Sliding window maximum for each window."
  },
  {
    "id": 246,
    "title": "Count of Smaller Numbers After Self",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given an integer array, return a list of counts of smaller numbers after each element.",
    "answer": [
      "function countSmaller(nums) {",
      "    const res = Array(nums.length).fill(0);",
      "    const arr = nums.map((val, idx) => [val, idx]);",
      "    function mergeSort(start, end) {",
      "        if (end - start <= 1) return;",
      "        let mid = Math.floor((start + end) / 2);",
      "        mergeSort(start, mid);",
      "        mergeSort(mid, end);",
      "        let temp = [];",
      "        let i = start, j = mid, count = 0;",
      "        while (i < mid && j < end) {",
      "            if (arr[i][0] > arr[j][0]) {",
      "                count++;",
      "                temp.push(arr[j++]);",
      "            } else {",
      "                res[arr[i][1]] += count;",
      "                temp.push(arr[i++]);",
      "            }",
      "        }",
      "        while (i < mid) {",
      "            res[arr[i][1]] += count;",
      "            temp.push(arr[i++]);",
      "        }",
      "        while (j < end) temp.push(arr[j++]);",
      "        for (let k = start; k < end; k++) arr[k] = temp[k - start];",
      "    }",
      "    mergeSort(0, nums.length);",
      "    return res;",
      "}"
    ],
    "references": [],
    "slug": "count-of-smaller-numbers-after-self",
    "example": "Input: nums = [5,2,6,1]\nOutput: [2,1,1,0]\nExplanation: The counts of smaller numbers after each element are: [2,1,1,0] respectively."
  },
  {
    "id": 247,
    "title": "Binary Tree Maximum Path Sum",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Find the maximum path sum in a binary tree. A path may start and end at any node.",
    "answer": [
      "function maxPathSum(root) {",
      "    let maxSum = -Infinity;",
      "    function dfs(node) {",
      "        if (!node) return 0;",
      "        let left = Math.max(0, dfs(node.left));",
      "        let right = Math.max(0, dfs(node.right));",
      "        maxSum = Math.max(maxSum, left + right + node.val);",
      "        return node.val + Math.max(left, right);",
      "    }",
      "    dfs(root);",
      "    return maxSum;",
      "}"
    ],
    "references": [],
    "slug": "binary-tree-maximum-path-sum",
    "example": "Input: root = [1,2,3]\nOutput: 6\nExplanation: The maximum path sum is 2 + 1 + 3 = 6."
  },
  {
    "id": 248,
    "title": "Regular Expression Matching",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Implement regular expression matching with support for '.' and '*'.",
    "answer": [
      "function isMatch(s, p) {",
      "    const dp = Array(s.length + 1).fill(null).map(() => Array(p.length + 1).fill(false));",
      "    dp[0][0] = true;",
      "    for (let j = 1; j <= p.length; j++) {",
      "        if (p[j - 1] === '*') dp[0][j] = dp[0][j - 2];",
      "    }",
      "    for (let i = 1; i <= s.length; i++) {",
      "        for (let j = 1; j <= p.length; j++) {",
      "            if (p[j - 1] === '.' || p[j - 1] === s[i - 1]) {",
      "                dp[i][j] = dp[i - 1][j - 1];",
      "            } else if (p[j - 1] === '*') {",
      "                dp[i][j] = dp[i][j - 2];",
      "                if (p[j - 2] === '.' || p[j - 2] === s[i - 1]) {",
      "                    dp[i][j] = dp[i][j] || dp[i - 1][j];",
      "                }",
      "            }",
      "        }",
      "    }",
      "    return dp[s.length][p.length];",
      "}"
    ],
    "references": [],
    "slug": "regular-expression-matching",
    "example": "Input: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: The pattern does not match the string."
  },
  {
    "id": 249,
    "title": "Wildcard Matching",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Implement wildcard pattern matching with support for '?' and '*'.",
    "answer": [
      "function isMatch(s, p) {",
      "    const m = s.length, n = p.length;",
      "    const dp = Array(m + 1).fill(null).map(() => Array(n + 1).fill(false));",
      "    dp[0][0] = true;",
      "    for (let j = 1; j <= n; j++) {",
      "        if (p[j - 1] === '*') {",
      "            dp[0][j] = dp[0][j - 1];",
      "        }",
      "    }",
      "    for (let i = 1; i <= m; i++) {",
      "        for (let j = 1; j <= n; j++) {",
      "            if (p[j - 1] === '?' || s[i - 1] === p[j - 1]) {",
      "                dp[i][j] = dp[i - 1][j - 1];",
      "            } else if (p[j - 1] === '*') {",
      "                dp[i][j] = dp[i][j - 1] || dp[i - 1][j];",
      "            }",
      "        }",
      "    }",
      "    return dp[m][n];",
      "}"
    ],
    "references": [],
    "slug": "wildcard-matching",
    "example": "Input: s = \"aa\", p = \"a\"\nOutput: false\nExplanation: The pattern does not match the string."
  },
  {
    "id": 250,
    "title": "Median of Two Sorted Arrays",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given two sorted arrays nums1 and nums2, find the median of the two sorted arrays. The overall run time complexity should be O(log(min(m,n))).",
    "answer": [
      "function findMedianSortedArrays(nums1, nums2) {",
      "    if (nums1.length > nums2.length) {",
      "        [nums1, nums2] = [nums2, nums1];",
      "    }",
      "    let m = nums1.length, n = nums2.length;",
      "    let left = 0, right = m;",
      "    while (left <= right) {",
      "        let i = Math.floor((left + right) / 2);",
      "        let j = Math.floor((m + n + 1) / 2) - i;",
      "        let maxLeftA = (i === 0) ? -Infinity : nums1[i - 1];",
      "        let minRightA = (i === m) ? Infinity : nums1[i];",
      "        let maxLeftB = (j === 0) ? -Infinity : nums2[j - 1];",
      "        let minRightB = (j === n) ? Infinity : nums2[j];",
      "        if (maxLeftA <= minRightB && maxLeftB <= minRightA) {",
      "            if ((m + n) % 2 === 0) {",
      "                return (Math.max(maxLeftA, maxLeftB) + Math.min(minRightA, minRightB)) / 2;",
      "            } else {",
      "                return Math.max(maxLeftA, maxLeftB);",
      "            }",
      "        } else if (maxLeftA > minRightB) {",
      "            right = i - 1;",
      "        } else {",
      "            left = i + 1;",
      "        }",
      "    }",
      "    return 0;",
      "}"
    ],
    "references": [],
    "slug": "median-of-two-sorted-arrays",
    "example": "Input: nums1 = [1,3], nums2 = [2]\nOutput: 2.0\nExplanation: The median is 2."
  },
  {
    "id": 251,
    "title": "Max Points on a Line",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given an array of points where points[i] = [xi, yi], return the maximum number of points that lie on the same straight line.",
    "answer": [
      "function maxPoints(points) {",
      "    if (points.length <= 2) return points.length;",
      "    let max = 0;",
      "    for (let i = 0; i < points.length; i++) {",
      "        const slopes = new Map();",
      "        let duplicates = 1;",
      "        for (let j = i + 1; j < points.length; j++) {",
      "            let dx = points[j][0] - points[i][0];",
      "            let dy = points[j][1] - points[i][1];",
      "            if (dx === 0 && dy === 0) {",
      "                duplicates++;",
      "                continue;",
      "            }",
      "            const gcdVal = gcd(dx, dy);",
      "            dx /= gcdVal;",
      "            dy /= gcdVal;",
      "            const slope = `${dy}/${dx}`;",
      "            slopes.set(slope, (slopes.get(slope) || 0) + 1);",
      "        }",
      "        max = Math.max(max, duplicates);",
      "        for (let count of slopes.values()) {",
      "            max = Math.max(max, count + duplicates);",
      "        }",
      "    }",
      "    return max;",
      "}",
      "function gcd(a, b) {",
      "    return b === 0 ? a : gcd(b, a % b);",
      "}"
    ],
    "references": [],
    "slug": "max-points-on-a-line",
    "example": "Input: points = [[1,1],[2,2],[3,3]]\nOutput: 3\nExplanation: The maximum number of points on a line is 3."
  },
  {
    "id": 252,
    "title": "Word Break II",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given a non-empty string s and a dictionary wordDict, add spaces in s to construct all possible sentences where each word is a valid dictionary word.",
    "answer": [
      "function wordBreak(s, wordDict) {",
      "    const memo = {};",
      "    function dfs(start) {",
      "        if (start === s.length) return [''];",
      "        if (memo[start]) return memo[start];",
      "        const res = [];",
      "        for (let end = start + 1; end <= s.length; end++) {",
      "            const word = s.slice(start, end);",
      "            if (wordDict.includes(word)) {",
      "                const rest = dfs(end);",
      "                for (let sentence of rest) {",
      "                    res.push(word + (sentence ? ' ' + sentence : ''));",
      "                }",
      "            }",
      "        }",
      "        memo[start] = res;",
      "        return res;",
      "    }",
      "    return dfs(0);",
      "}"
    ],
    "references": [],
    "slug": "word-break-ii",
    "example": "Input: s = \"catsanddog\", wordDict = [\"cat\",\"cats\",\"and\",\"sand\",\"dog\"]\nOutput: [\"cat sand dog\",\"cats and dog\"]\nExplanation: The word \"cat\" can be split into \"cat\" and \"sand\", \"dog\" can be split into \"dog\". The word \"cats\" can be split into \"cats\" and \"and\", \"dog\" can be split into \"dog\". The word \"and\" can be split into \"and\", \"dog\" can be split into \"dog\"."
  },
  {
    "id": 253,
    "title": "Largest Divisible Subset",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given a set of distinct positive integers, find the largest subset such that every pair (Si, Sj) satisfies: Si % Sj == 0 or Sj % Si == 0.",
    "answer": [
      "function largestDivisibleSubset(nums) {",
      "    if (nums.length === 0) return [];",
      "    nums.sort((a, b) => a - b);",
      "    const dp = Array(nums.length).fill(1);",
      "    const prev = Array(nums.length).fill(-1);",
      "    let maxIndex = 0;",
      "    for (let i = 1; i < nums.length; i++) {",
      "        for (let j = 0; j < i; j++) {",
      "            if (nums[i] % nums[j] === 0 && dp[j] + 1 > dp[i]) {",
      "                dp[i] = dp[j] + 1;",
      "                prev[i] = j;",
      "            }",
      "        }",
      "        if (dp[i] > dp[maxIndex]) maxIndex = i;",
      "    }",
      "    const res = [];",
      "    let k = maxIndex;",
      "    while (k >= 0) {",
      "        res.push(nums[k]);",
      "        k = prev[k];",
      "    }",
      "    return res.reverse();",
      "}"
    ],
    "references": [],
    "slug": "largest-divisible-subset",
    "example": "Input: nums = [1,2,3,4]\nOutput: [1,2]\nExplanation: The largest divisible subset is [1,2]."
  },
  {
    "id": 254,
    "title": "Russian Doll Envelopes",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given envelopes with width and height, find the maximum number of envelopes you can Russian doll.",
    "answer": [
      "function maxEnvelopes(envelopes) {",
      "    envelopes.sort((a, b) => a[0] === b[0] ? b[1] - a[1] : a[0] - b[0]);",
      "    const heights = envelopes.map(env => env[1]);",
      "    const tails = [];",
      "    for (let h of heights) {",
      "        let left = 0, right = tails.length;",
      "        while (left < right) {",
      "            let mid = Math.floor((left + right) / 2);",
      "            if (tails[mid] < h) left = mid + 1;",
      "            else right = mid;",
      "        }",
      "        tails[left] = h;",
      "    }",
      "    return tails.length;",
      "}"
    ],
    "references": [],
    "slug": "russian-doll-envelopes",
    "example": "Input: envelopes = [[5,4],[6,4],[6,7],[2,3]]\nOutput: 3\nExplanation: The maximum number of envelopes that can be Russian doll is 3 ([2,3] => [5,4] => [6,7])."
  },
  {
    "id": 255,
    "title": "Count of Range Sum",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given an integer array nums and two integers lower and upper, return the number of range sums that lie in [lower, upper].",
    "answer": [
      "function countRangeSum(nums, lower, upper) {",
      "    const sums = [0];",
      "    for (let num of nums) sums.push(sums[sums.length - 1] + num);",
      "    function count(lo, hi) {",
      "        if (hi - lo <= 1) return 0;",
      "        let mid = Math.floor((lo + hi) / 2);",
      "        let cnt = count(lo, mid) + count(mid, hi);",
      "        let j = mid, k = mid, t = mid;",
      "        const cache = [];",
      "        for (let i = lo, r = 0; i < mid; i++) {",
      "            while (k < hi && sums[k] - sums[i] < lower) k++;",
      "            while (j < hi && sums[j] - sums[i] <= upper) j++;",
      "            while (t < hi && sums[t] < sums[i]) cache[r++] = sums[t++];",
      "            cache[r++] = sums[i];",
      "            cnt += j - k;",
      "        }",
      "        for (let i = 0; i < t - lo; i++) sums[lo + i] = cache[i];",
      "        return cnt;",
      "    }",
      "    return count(0, sums.length);",
      "}"
    ],
    "references": [],
    "slug": "count-of-range-sum",
    "example": "Input: nums = [-2,5,-1], lower = -2, upper = 2\nOutput: 3\nExplanation: The number of range sums that lie in the range [lower, upper] is 3. The ranges are: [0,0], [2,2], and [0,2]."
  },
  {
    "id": 256,
    "title": "Sliding Window Median",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given an array and a sliding window size k, return the median of each window.",
    "answer": [
      "function medianSlidingWindow(nums, k) {",
      "    const result = [];",
      "    const window = [];",
      "    for (let i = 0; i < nums.length; i++) {",
      "        // Insert current number and keep window sorted",
      "        insert(window, nums[i]);",
      "        if (window.length > k) {",
      "            remove(window, nums[i - k]);",
      "        }",
      "        if (window.length === k) {",
      "            result.push(getMedian(window));",
      "        }",
      "    }",
      "    return result;",
      "}",
      "",
      "// Insert val into sorted array window",
      "function insert(window, val) {",
      "    let left = 0, right = window.length;",
      "    while (left < right) {",
      "        let mid = Math.floor((left + right) / 2);",
      "        if (window[mid] < val) left = mid + 1;",
      "        else right = mid;",
      "    }",
      "    window.splice(left, 0, val);",
      "}",
      "",
      "// Remove val from sorted array window",
      "function remove(window, val) {",
      "    let left = 0, right = window.length;",
      "    while (left < right) {",
      "        let mid = Math.floor((left + right) / 2);",
      "        if (window[mid] < val) left = mid + 1;",
      "        else right = mid;",
      "    }",
      "    window.splice(left, 1);",
      "}",
      "",
      "function getMedian(window) {",
      "    const mid = Math.floor(window.length / 2);",
      "    if (window.length % 2 === 1) {",
      "        return window[mid];",
      "    } else {",
      "        return (window[mid - 1] + window[mid]) / 2;",
      "    }",
      "}"
    ],
    "references": [],
    "slug": "sliding-window-median",
    "example": "Input: nums = [1,3,-1,-3,5,3,6,7], k = 3\nOutput: [1,-1,-1,3,5,6]\nExplanation: The median for each window of size 3 is: [1,-1,-1,3,5,6]."
  },
  {
    "id": 257,
    "title": "The Skyline Problem",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given buildings represented by [Li, Ri, Hi], compute the skyline formed.",
    "answer": [
      "function getSkyline(buildings) {",
      "    const events = [];",
      "    for (let [L, R, H] of buildings) {",
      "        events.push([L, -H]); // start of building",
      "        events.push([R, H]);  // end of building",
      "    }",
      "    events.sort((a, b) => {",
      "        if (a[0] !== b[0]) return a[0] - b[0];",
      "        return a[1] - b[1];",
      "    });",
      "    const result = [];",
      "    const heights = [0];",
      "    const heightMap = new Map();",
      "    for (let [x, h] of events) {",
      "        if (h < 0) {",
      "            // start of building",
      "            heights.push(-h);",
      "            heights.sort((a, b) => b - a);",
      "        } else {",
      "            // end of building",
      "            const idx = heights.indexOf(h);",
      "            if (idx !== -1) heights.splice(idx, 1);",
      "        }",
      "        const currMax = heights[0];",
      "        if (result.length === 0 || result[result.length - 1][1] !== currMax) {",
      "            result.push([x, currMax]);",
      "        }",
      "    }",
      "    return result;",
      "}"
    ],
    "references": [],
    "slug": "the-skyline-problem",
    "example": "Input: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]\nOutput: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]\nExplanation: The skyline is formed by the edges of the buildings."
  },
  {
    "id": 258,
    "title": "Longest Increasing Subsequence",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given an unsorted array of integers, find the length of the longest increasing subsequence.",
    "answer": [
      "function lengthOfLIS(nums) {",
      "    const tails = [];",
      "    for (let num of nums) {",
      "        let left = 0, right = tails.length;",
      "        while (left < right) {",
      "            let mid = Math.floor((left + right) / 2);",
      "            if (tails[mid] < num) left = mid + 1;",
      "            else right = mid;",
      "        }",
      "        tails[left] = num;",
      "    }",
      "    return tails.length;",
      "}"
    ],
    "references": [],
    "slug": "longest-increasing-subsequence",
    "example": "Input: nums = [10,9,2,5,3,7,101,18]\nOutput: 4\nExplanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4."
  },
  {
    "id": 259,
    "title": "Find K-th Smallest Pair Distance",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given an integer array nums and an integer k, return the k-th smallest distance among all the pairs in the array.",
    "answer": [
      "function smallestDistancePair(nums, k) {",
      "    nums.sort((a, b) => a - b);",
      "    let left = 0, right = nums[nums.length - 1] - nums[0];",
      "    while (left < right) {",
      "        let mid = Math.floor((left + right) / 2);",
      "        let count = 0, j = 0;",
      "        for (let i = 0; i < nums.length; i++) {",
      "            while (j < nums.length && nums[j] - nums[i] <= mid) j++;",
      "            count += j - i - 1;",
      "        }",
      "        if (count < k) left = mid + 1;",
      "        else right = mid;",
      "    }",
      "    return left;",
      "}"
    ],
    "references": [],
    "slug": "find-k-th-smallest-pair-distance",
    "example": "Input: nums = [1,3,1], k = 1\nOutput: 0\nExplanation: The smallest distance pair is (1,1)."
  },
  {
    "id": 260,
    "title": "Number of Digit One",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.",
    "answer": [
      "function countDigitOne(n) {",
      "    let count = 0;",
      "    for (let i = 1; i <= n; i *= 10) {",
      "        let divider = i * 10;",
      "        count += Math.floor(n / divider) * i + Math.min(Math.max(n % divider - i + 1, 0), i);",
      "    }",
      "    return count;",
      "}"
    ],
    "references": [],
    "slug": "number-of-digit-one",
    "example": "Input: n = 13\nOutput: 6\nExplanation: The number of digit 1 appearing in all non-negative integers less than or equal to 13 is 6."
  },
  {
    "id": 261,
    "title": "Maximum Gap",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given an unsorted array, find the maximum difference between the successive elements in its sorted form.",
    "answer": [
      "function maximumGap(nums) {",
      "    if (nums.length < 2) return 0;",
      "    let min = Math.min(...nums);",
      "    let max = Math.max(...nums);",
      "    let bucketSize = Math.max(1, Math.floor((max - min) / (nums.length - 1)));",
      "    let bucketCount = Math.floor((max - min) / bucketSize) + 1;",
      "    let buckets = Array.from({ length: bucketCount }, () => [Infinity, -Infinity]);",
      "    for (let num of nums) {",
      "        let idx = Math.floor((num - min) / bucketSize);",
      "        buckets[idx][0] = Math.min(buckets[idx][0], num);",
      "        buckets[idx][1] = Math.max(buckets[idx][1], num);",
      "    }",
      "    let prevMax = min, maxGap = 0;",
      "    for (let [bucketMin, bucketMax] of buckets) {",
      "        if (bucketMin === Infinity) continue;",
      "        maxGap = Math.max(maxGap, bucketMin - prevMax);",
      "        prevMax = bucketMax;",
      "    }",
      "    return maxGap;",
      "}"
    ],
    "references": [],
    "slug": "maximum-gap",
    "example": "Input: nums = [3,6,9,1]\nOutput: 3\nExplanation: The sorted form of the array is [1,3,6,9], the maximum gap is 3."
  },
  {
    "id": 262,
    "title": "Perfect Squares",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given an integer n, return the least number of perfect square numbers that sum to n.",
    "answer": [
      "function numSquares(n) {",
      "    const dp = new Array(n + 1).fill(Infinity);",
      "    dp[0] = 0;",
      "    for (let i = 1; i <= n; i++) {",
      "        for (let j = 1; j * j <= i; j++) {",
      "            dp[i] = Math.min(dp[i], dp[i - j * j] + 1);",
      "        }",
      "    }",
      "    return dp[n];",
      "}"
    ],
    "references": [],
    "slug": "perfect-squares",
    "example": "Input: n = 12\nOutput: 3\nExplanation: 12 = 4 + 4 + 4."
  },
  {
    "id": 263,
    "title": "Sparse Matrix Multiplication",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given two sparse matrices, return their product.",
    "answer": [
      "function multiply(A, B) {",
      "    const m = A.length, n = B[0].length, kLen = A[0].length;",
      "    const result = Array.from({ length: m }, () => Array(n).fill(0));",
      "    for (let i = 0; i < m; i++) {",
      "        for (let k = 0; k < kLen; k++) {",
      "            if (A[i][k] === 0) continue;",
      "            for (let j = 0; j < n; j++) {",
      "                result[i][j] += A[i][k] * B[k][j];",
      "            }",
      "        }",
      "    }",
      "    return result;",
      "}"
    ],
    "references": [],
    "slug": "sparse-matrix-multiplication",
    "example": "Input: A = [[1,0,0],[-1,0,3]], B = [[7,0,0],[0,0,0],[0,0,1]]\nOutput: [[7,0,0],[-7,0,3]]\nExplanation: A * B = [[1*7+0*0+0*0, 1*0+0*0+0*0, 1*0+0*0+0*0],[(-1)*7+0*0+3*0, (-1)*0+0*0+3*0, (-1)*0+0*0+3*0]] = [[7,0,0],[-7,0,3]]."
  },
  {
    "id": 264,
    "title": "Integer to English Words",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Convert a non-negative integer num to its English words representation.",
    "answer": [
      "function numberToWords(num) {",
      "    if (num === 0) return 'Zero';",
      "    const below20 = ['', 'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten',",
      "                     'Eleven', 'Twelve', 'Thirteen', 'Fourteen', 'Fifteen', 'Sixteen',",
      "                     'Seventeen', 'Eighteen', 'Nineteen'];",
      "    const tens = ['', '', 'Twenty', 'Thirty', 'Forty', 'Fifty', 'Sixty', 'Seventy', 'Eighty', 'Ninety'];",
      "    const thousands = ['', 'Thousand', 'Million', 'Billion'];",
      "    function helper(n) {",
      "        if (n === 0) return '';",
      "        else if (n < 20) return below20[n] + ' ';",
      "        else if (n < 100) return tens[Math.floor(n / 10)] + ' ' + helper(n % 10);",
      "        else return below20[Math.floor(n / 100)] + ' Hundred ' + helper(n % 100);",
      "    }",
      "    let res = '', i = 0;",
      "    while (num > 0) {",
      "        if (num % 1000 !== 0) {",
      "            res = helper(num % 1000) + thousands[i] + ' ' + res;",
      "        }",
      "        num = Math.floor(num / 1000);",
      "        i++;",
      "    }",
      "    return res.trim();",
      "}"
    ],
    "references": [],
    "slug": "integer-to-english-words",
      "example": "Input: num = 123\nOutput: \"One Hundred Twenty Three\"\nExplanation: The English words for 123 are \"One Hundred Twenty Three\"."
  },
  {
    "id": 265,
    "title": "Basic Calculator III",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Implement a calculator to evaluate a basic mathematical expression string which may contain parentheses, integers, '+', '-', '*', '/'.",
    "answer": [
      "function calculate(s) {",
      "    let stack = [], num = 0, sign = '+';",
      "    const n = s.length;",
      "    const evaluate = (op, val) => {",
      "        if (op === '+') stack.push(val);",
      "        else if (op === '-') stack.push(-val);",
      "        else if (op === '*') stack.push(stack.pop() * val);",
      "        else if (op === '/') stack.push(Math.trunc(stack.pop() / val));",
      "    };",
      "    const helper = (i) => {",
      "        while (i < n) {",
      "            let c = s[i];",
      "            if (!isNaN(c) && c !== ' ') {",
      "                num = num * 10 + parseInt(c);",
      "            } else if (c === '(') {",
      "                [num, i] = helper(i + 1);",
      "            } else if (['+', '-', '*', '/'].includes(c) || c === ')' || i === n - 1) {",
      "                evaluate(sign, num);",
      "                if (c === ')') return [stack.reduce((a, b) => a + b, 0), i];",
      "                sign = c;",
      "                num = 0;",
      "            }",
      "            i++;",
      "        }",
      "        return [stack.reduce((a, b) => a + b, 0), i];",
      "    };",
      "    return helper(0)[0];",
      "}"
    ],
    "references": [],
    "slug": "basic-calculator-iii",
    "example": "Input: s = \"2*(5+5*2)/3+(6/2+8)\"\nOutput: 21\nExplanation: The expression evaluates to 21."
  },
  {
    "id": 266,
    "title": "Expression Add Operators",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given a string num and an integer target, return all expressions that evaluate to target by adding binary operators +, -, or * between digits.",
    "answer": [
      "function addOperators(num, target) {",
      "    const res = [];",
      "    function backtrack(index, path, value, last) {",
      "        if (index === num.length) {",
      "            if (value === target) res.push(path);",
      "            return;",
      "        }",
      "        for (let i = index + 1; i <= num.length; i++) {",
      "            const str = num.substring(index, i);",
      "            if (str.length > 1 && str[0] === '0') break;",
      "            const n = Number(str);",
      "            if (index === 0) {",
      "                backtrack(i, str, n, n);",
      "            } else {",
      "                backtrack(i, path + '+' + n, value + n, n);",
      "                backtrack(i, path + '-' + n, value - n, -n);",
      "                backtrack(i, path + '*' + n, value - last + last * n, last * n);",
      "            }",
      "        }",
      "    }",
      "    backtrack(0, '', 0, 0);",
      "    return res;",
      "}"
    ],
    "references": [],
    "slug": "expression-add-operators",
    "example": "Input: num = \"123\", target = 6\nOutput: [\"1+2+3\", \"1*2*3\"]\nExplanation: The expressions that evaluate to 6 are \"1+2+3\" and \"1*2*3\"."
  },
  {
    "id": 267,
    "title": "Minimum Height Trees",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given a tree with n nodes, return all the nodes that could be roots of Minimum Height Trees.",
    "answer": [
      "function findMinHeightTrees(n, edges) {",
      "    if (n <= 2) return Array.from({ length: n }, (_, i) => i);",
      "    const adj = Array.from({ length: n }, () => []);",
      "    for (let [u, v] of edges) {",
      "        adj[u].push(v);",
      "        adj[v].push(u);",
      "    }",
      "    let leaves = [];",
      "    for (let i = 0; i < n; i++) {",
      "        if (adj[i].length === 1) leaves.push(i);",
      "    }",
      "    let remaining = n;",
      "    while (remaining > 2) {",
      "        remaining -= leaves.length;",
      "        const newLeaves = [];",
      "        for (let leaf of leaves) {",
      "            let neighbor = adj[leaf].pop();",
      "            adj[neighbor] = adj[neighbor].filter(v => v !== leaf);",
      "            if (adj[neighbor].length === 1) newLeaves.push(neighbor);",
      "        }",
      "        leaves = newLeaves;",
      "    }",
      "    return leaves;",
      "}"
    ],
    "references": [],
    "slug": "minimum-height-trees",
    "example": "Input: n = 4, edges = [[1,0],[1,2],[1,3]]\nOutput: [1]\nExplanation: The minimum height trees are [1] with height 1, and [0,2,3] with height 2."
  },
  {
    "id": 268,
    "title": "N-Queens II",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Return the total number of distinct solutions to the n-queens puzzle.",
    "answer": [
      "function totalNQueens(n) {",
      "    let count = 0;",
      "    const cols = new Set();",
      "    const diag1 = new Set();",
      "    const diag2 = new Set();",
      "    function backtrack(row) {",
      "        if (row === n) {",
      "            count++;",
      "            return;",
      "        }",
      "        for (let col = 0; col < n; col++) {",
      "            if (cols.has(col) || diag1.has(row - col) || diag2.has(row + col)) continue;",
      "            cols.add(col);",
      "            diag1.add(row - col);",
      "            diag2.add(row + col);",
      "            backtrack(row + 1);",
      "            cols.delete(col);",
      "            diag1.delete(row - col);",
      "            diag2.delete(row + col);",
      "        }",
      "    }",
      "    backtrack(0);",
      "    return count;",
      "}"
    ],
    "references": [],
    "slug": "n-queens-ii",
    "example": "Input: n = 4\nOutput: 2\nExplanation: There are 2 distinct solutions to the 4-queens puzzle."
  },
  {
    "id": 269,
    "title": "Minimum Genetic Mutation",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "A gene string can mutate by changing one letter at a time. Return the minimum number of mutations needed to transform start to end, using only genes from bank.",
    "answer": [
      "function minMutation(start, end, bank) {",
      "    const bankSet = new Set(bank);",
      "    if (!bankSet.has(end)) return -1;",
      "    const chars = ['A', 'C', 'G', 'T'];",
      "    let queue = [[start, 0]];",
      "    const visited = new Set();",
      "    while (queue.length) {",
      "        const [gene, steps] = queue.shift();",
      "        if (gene === end) return steps;",
      "        for (let i = 0; i < gene.length; i++) {",
      "            for (let c of chars) {",
      "                if (c === gene[i]) continue;",
      "                const next = gene.slice(0, i) + c + gene.slice(i + 1);",
      "                if (bankSet.has(next) && !visited.has(next)) {",
      "                    visited.add(next);",
      "                    queue.push([next, steps + 1]);",
      "                }",
      "            }",
      "        }",
      "    }",
      "    return -1;",
      "}"
    ],
    "references": [],
    "slug": "minimum-genetic-mutation",
    "example": "Input: start = \"AACCGGTT\", end = \"AACCGGTA\", bank = [\"AACCGGTA\"]\nOutput: 1\nExplanation: The minimum number of mutations to transform \"AACCGGTT\" to \"AACCGGTA\" is 1."
  },
  {
    "id": 270,
    "title": "Palindrome Partitioning II",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given a string s, partition s such that every substring is a palindrome. Return the minimum cuts needed.",
    "answer": [
      "function minCut(s) {",
      "    const n = s.length;",
      "    const dp = Array(n).fill(0).map((_, i) => i);",
      "    const isPal = Array(n).fill(null).map(() => Array(n).fill(false));",
      "    for (let end = 0; end < n; end++) {",
      "        for (let start = 0; start <= end; start++) {",
      "            if (s[start] === s[end] && (end - start <= 2 || isPal[start + 1][end - 1])) {",
      "                isPal[start][end] = true;",
      "                if (start === 0) dp[end] = 0;",
      "                else dp[end] = Math.min(dp[end], dp[start - 1] + 1);",
      "            }",
      "        }",
      "    }",
      "    return dp[n - 1];",
      "}"
    ],
    "references": [],
    "slug": "palindrome-partitioning-ii",
    "example": "Input: s = \"aab\"\nOutput: 1\nExplanation: The minimum cuts needed to partition the string into palindromes are: [\"a\",\"a\",\"b\"]."
  },
  {
    "id": 271,
    "title": "Largest BST Subtree",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Find the size of the largest subtree which is also a BST.",
    "answer": [
      "function largestBSTSubtree(root) {",
      "    let maxSize = 0;",
      "    function dfs(node) {",
      "        if (!node) return [true, 0, Infinity, -Infinity];",
      "        const [leftIsBST, leftSize, leftMin, leftMax] = dfs(node.left);",
      "        const [rightIsBST, rightSize, rightMin, rightMax] = dfs(node.right);",
      "        if (leftIsBST && rightIsBST && node.val > leftMax && node.val < rightMin) {",
      "            let size = leftSize + rightSize + 1;",
      "            maxSize = Math.max(maxSize, size);",
      "            return [true, size, Math.min(leftMin, node.val), Math.max(rightMax, node.val)];",
      "        } else {",
      "            return [false, 0, 0, 0];",
      "        }",
      "    }",
      "    dfs(root);",
      "    return maxSize;",
      "}"
    ],
    "references": [],
    "slug": "largest-bst-subtree",
    "example": "Input: root = [10,5,15,1,8,null,7]\nOutput: 3\nExplanation: The largest BST subtree is the one with root value 10."
  },
  {
    "id": 272,
    "title": "Paint House II",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "There are a row of n houses, each can be painted one of k colors. No two adjacent houses can have the same color. Find the minimum cost.",
    "answer": [
      "function minCostII(costs) {",
      "    if (!costs.length) return 0;",
      "    const n = costs.length, k = costs[0].length;",
      "    let prev = [...costs[0]];",
      "    for (let i = 1; i < n; i++) {",
      "        const curr = Array(k).fill(0);",
      "        for (let j = 0; j < k; j++) {",
      "            let min = Infinity;",
      "            for (let l = 0; l < k; l++) {",
      "                if (l !== j) min = Math.min(min, prev[l]);",
      "            }",
      "            curr[j] = costs[i][j] + min;",
      "        }",
      "        prev = curr;",
      "    }",
      "    return Math.min(...prev);",
      "}"
    ],
    "references": [],
    "slug": "paint-house-ii",
    "example": "Input: costs = [[1,5,3],[2,9,4]]\nOutput: 5\nExplanation: The minimum cost to paint the houses is 5."
  },
  {
    "id": 273,
    "title": "Remove Duplicate Letters",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given a string s, remove duplicate letters so that every letter appears once and the result is the smallest in lexicographical order.",
    "answer": [
      "function removeDuplicateLetters(s) {",
      "    const lastIndex = {};",
      "    for (let i = 0; i < s.length; i++) lastIndex[s[i]] = i;",
      "    const stack = [];",
      "    const seen = new Set();",
      "    for (let i = 0; i < s.length; i++) {",
      "        const c = s[i];",
      "        if (seen.has(c)) continue;",
      "        while (stack.length && c < stack[stack.length - 1] && lastIndex[stack[stack.length - 1]] > i) {",
      "            seen.delete(stack.pop());",
      "        }",
      "        stack.push(c);",
      "        seen.add(c);",
      "    }",
      "    return stack.join('');",
      "}"
    ],
    "references": [],
    "slug": "remove-duplicate-letters",
    "example": "Input: s = \"bcabc\"\nOutput: \"abc\"\nExplanation: The result can be \"abc\" or \"bca\" or \"cab\"."
  },
  {
    "id": 274,
    "title": "Binary Tree Cameras",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "Given a binary tree, install the minimum number of cameras needed to monitor all nodes.",
    "answer": [
      "function minCameraCover(root) {",
      "    let res = 0;",
      "    function dfs(node) {",
      "        if (!node) return 1;",
      "        const left = dfs(node.left);",
      "        const right = dfs(node.right);",
      "        if (left === 0 || right === 0) {",
      "            res++;",
      "            return 2;",
      "        }",
      "        return (left === 2 || right === 2) ? 1 : 0;",
      "    }",
      "    return dfs(root) === 0 ? res + 1 : res;",
      "}"
    ],
    "references": [],
    "slug": "binary-tree-cameras",
    "example": "Input: root = [0,0,null,0,0]\nOutput: 1\nExplanation: One camera is enough to monitor all nodes if placed as shown."
  },
  {
    "id": 275,
    "title": "Best Meeting Point",
    "category": "DSA",
    "difficulty": "Advanced",
    "question": "A group of people are located on a 2D grid. Find the minimal total travel distance to meet.",
    "answer": [
      "function minTotalDistance(grid) {",
      "    const rows = [], cols = [];",
      "    for (let i = 0; i < grid.length; i++) {",
      "        for (let j = 0; j < grid[0].length; j++) {",
      "            if (grid[i][j] === 1) {",
      "                rows.push(i);",
      "                cols.push(j);",
      "            }",
      "        }",
      "    }",
      "    rows.sort((a, b) => a - b);",
      "    cols.sort((a, b) => a - b);",
      "    const midRow = rows[Math.floor(rows.length / 2)];",
      "    const midCol = cols[Math.floor(cols.length / 2)];",
      "    let dist = 0;",
      "    for (let r of rows) dist += Math.abs(r - midRow);",
      "    for (let c of cols) dist += Math.abs(c - midCol);",
      "    return dist;",
      "}"
    ],
    "references": [],
    "slug": "best-meeting-point",
    "example": "Input: grid = [[1,0,0,0,1],[0,0,0,0,0],[0,0,1,0,0]]\nOutput: 6\nExplanation: The optimal meeting point is at (1,2) with a total distance of 6."
  },
  {
    "id": 276,
    "title": "What is React?",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "What is React?",
    "answer": [
      "React is a JavaScript library developed by Facebook for building user interfaces, especially single-page applications.",
      "It lets developers build reusable UI components that efficiently update when data changes.",
      "React uses a virtual DOM to improve performance by minimizing real DOM updates."
    ],
    "references": [],
    "slug": "what-is-react"
  },
  {
    "id": 277,
    "title": "What is JSX?",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "What is JSX in React?",
    "answer": [
      "JSX stands for JavaScript XML. Itâ€™s a syntax extension that allows you to write HTML-like code inside JavaScript files.",
      "Browsers canâ€™t directly understand JSX, so itâ€™s transpiled (often via Babel) into plain JavaScript function calls like React.createElement.",
      "JSX makes writing React components more readable and expressive."
    ],
    "references": [],
    "slug": "what-is-jsx-277"
  },
  {
    "id": 278,
    "title": "What is Virtual DOM?",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "What is Virtual DOM in React?",
    "answer": [
      "The Virtual DOM is a lightweight in-memory representation of the real DOM.",
      "When state or props change, React creates a virtual DOM tree and compares it to the previous version (diffing).",
      "It calculates the minimal set of changes needed and updates the real DOM efficiently."
    ],
    "references": [],
    "slug": "what-is-virtual-dom"
  },
  {
    "id": 279,
    "title": "Difference between props and state?",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "What is the difference between props and state in React?",
    "answer": [
      "Props are inputs passed to a component from its parent, making components reusable and configurable.",
      "Props are immutable within the component receiving them.",
      "State is data managed within the component that can change over time, usually via setState or hooks like useState.",
      "Changes in state trigger re-renders, while props changes depend on parent re-rendering."
    ],
    "references": [],
    "slug": "difference-between-props-and-state"
  },
  {
    "id": 280,
    "title": "What is useState?",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "What is the useState hook in React?",
    "answer": [
      "`useState` is a Hook that lets you add state to functional components.",
      "It returns an array with the current state value and a function to update it."
    ],
    "references": [],
    "slug": "what-is-usestate"
  },
  {
    "id": 281,
    "title": "Example of useState usage?",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "Provide a basic example of how to use the useState hook.",
    "answer": [
      "Example:",
      "```js",
      "import React, { useState } from 'react';",
      "",
      "function Counter() {",
      "  const [count, setCount] = useState(0);",
      "  return (",
      "    <div>",
      "      <p>You clicked {count} times</p>",
      "      <button onClick={() => setCount(count + 1)}>Click Me</button>",
      "    </div>",
      "  );",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-usestate-usage"
  },
  {
    "id": 282,
    "title": "What is useEffect?",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "What is the useEffect hook in React?",
    "answer": [
      "`useEffect` is a hook for performing side effects in functional components, like data fetching, subscriptions, or manually changing the DOM.",
      "It replaces lifecycle methods like componentDidMount, componentDidUpdate, and componentWillUnmount."
    ],
    "references": [],
    "slug": "what-is-useeffect"
  },
  {
    "id": 283,
    "title": "Example of useEffect?",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "Provide a simple example of using useEffect in React.",
    "answer": [
      "Example:",
      "```js",
      "import React, { useState, useEffect } from 'react';",
      "",
      "function Timer() {",
      "  const [seconds, setSeconds] = useState(0);",
      "  useEffect(() => {",
      "    const interval = setInterval(() => {",
      "      setSeconds(s => s + 1);",
      "    }, 1000);",
      "    return () => clearInterval(interval);",
      "  }, []);",
      "  return <div>{seconds} seconds elapsed.</div>;",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-useeffect"
  },
  {
    "id": 284,
    "title": "What are controlled components?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is a controlled component in React?",
    "answer": [
      "A controlled component is a form input element whose value is controlled by React state rather than the DOM.",
      "For example, a controlled `<input>` uses value and onChange props tied to state."
    ],
    "references": [],
    "slug": "what-are-controlled-components"
  },
  {
    "id": 285,
    "title": "Example of controlled component?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Provide an example of a controlled component in React.",
    "answer": [
      "Example:",
      "```js",
      "import React, { useState } from 'react';",
      "",
      "function Form() {",
      "  const [text, setText] = useState('');",
      "  return (",
      "    <input",
      "      value={text}",
      "      onChange={e => setText(e.target.value)}",
      "    />",
      "  );",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-controlled-component"
  },
  {
    "id": 286,
    "title": "What is React Fragment?",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "What is a React Fragment?",
    "answer": [
      "A React Fragment lets you group multiple elements without adding extra nodes to the DOM.",
      "Instead of returning a single div, you can wrap JSX elements in `<></>` or `<React.Fragment></React.Fragment>`."
    ],
    "references": [],
    "slug": "what-is-react-fragment"
  },
  {
    "id": 287,
    "title": "Example of React Fragment?",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "Provide an example of using a React Fragment.",
    "answer": [
      "Example:",
      "```js",
      "import React from 'react';",
      "",
      "function List() {",
      "  return (",
      "    <>",
      "      <li>Item 1</li>",
      "      <li>Item 2</li>",
      "    </>",
      "  );",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-react-fragment"
  },
  {
    "id": 288,
    "title": "What are keys in React?",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "What are keys in React lists?",
    "answer": [
      "Keys help React identify which items have changed, are added, or are removed when rendering lists.",
      "A unique key should be assigned to each list item to improve performance and avoid unexpected behavior."
    ],
    "references": [],
    "slug": "what-are-keys-in-react"
  },
  {
    "id": 289,
    "title": "What is Context API?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is the Context API in React?",
    "answer": [
      "Context API allows sharing data (like themes, user info) across the entire React component tree without passing props manually at every level.",
      "It helps avoid prop drilling for deeply nested components."
    ],
    "references": [],
    "slug": "what-is-context-api"
  },
  {
    "id": 290,
    "title": "Example of Context API?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Provide a basic example of using Context API in React.",
    "answer": [
      "Example:",
      "```js",
      "import React, { createContext, useContext } from 'react';",
      "",
      "const ThemeContext = createContext('light');",
      "",
      "function App() {",
      "  return (",
      "    <ThemeContext.Provider value='dark'>",
      "      <Toolbar />",
      "    </ThemeContext.Provider>",
      "  );",
      "}",
      "",
      "function Toolbar() {",
      "  const theme = useContext(ThemeContext);",
      "  return <div>Theme: {theme}</div>;",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-context-api"
  },
  {
    "id": 291,
    "title": "What is memoization in React?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is memoization in React?",
    "answer": [
      "Memoization is a performance optimization technique where React stores the result of a function call so that when the same inputs occur again, it can skip recalculating and return the cached result.",
      "React provides React.memo for functional components and useMemo/useCallback hooks for functions or values."
    ],
    "references": [],
    "slug": "what-is-memoization-in-react"
  },
  {
    "id": 292,
    "title": "Example of React.memo usage?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Provide an example of using React.memo.",
    "answer": [
      "Example:",
      "```js",
      "import React from 'react';",
      "",
      "const MyComponent = React.memo(function MyComponent({ name }) {",
      "  console.log('Rendering...');",
      "  return <div>Hello, {name}</div>;",
      "});",
      "",
      "export default MyComponent;",
      "```"
    ],
    "references": [],
    "slug": "example-of-react-memo-usage"
  },
  {
    "id": 293,
    "title": "What is Prop Drilling?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is Prop Drilling in React?",
    "answer": [
      "Prop Drilling happens when you pass props through multiple layers of components, even if only the deeply nested component needs them.",
      "It can make code harder to maintain and is often solved with Context API or state management libraries."
    ],
    "references": [],
    "slug": "what-is-prop-drilling"
  },
  {
    "id": 294,
    "title": "What are Portals in React?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What are Portals in React?",
    "answer": [
      "Portals allow rendering children into a DOM node outside the parent component's DOM hierarchy.",
      "Useful for modals, tooltips, or overlays.",
      "Example: `ReactDOM.createPortal(child, container)`."
    ],
    "references": [],
    "slug": "what-are-portals-in-react"
  },
  {
    "id": 295,
    "title": "Example of React Portal?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Provide a basic example of a React Portal.",
    "answer": [
      "Example:",
      "```js",
      "import React from 'react';",
      "import ReactDOM from 'react-dom';",
      "",
      "function Modal({ children }) {",
      "  return ReactDOM.createPortal(",
      "    <div className='modal'>{children}</div>,",
      "    document.getElementById('modal-root')",
      "  );",
      "}",
      "",
      "export default Modal;",
      "```"
    ],
    "references": [],
    "slug": "example-of-react-portal"
  },
  {
    "id": 296,
    "title": "What is useCallback?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is the useCallback hook in React?",
    "answer": [
      "`useCallback` returns a memoized version of a callback function that only changes if its dependencies change.",
      "Useful to avoid unnecessary re-creations of functions between renders, especially when passing callbacks to child components."
    ],
    "references": [],
    "slug": "what-is-usecallback"
  },
  {
    "id": 297,
    "title": "Example of useCallback?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Provide an example of how to use useCallback in React.",
    "answer": [
      "Example:",
      "```js",
      "import React, { useState, useCallback } from 'react';",
      "",
      "function Parent() {",
      "  const [count, setCount] = useState(0);",
      "  const handleClick = useCallback(() => {",
      "    console.log('Button clicked!');",
      "  }, []);",
      "  return (",
      "    <div>",
      "      <button onClick={handleClick}>Click Me</button>",
      "      <p>{count}</p>",
      "      <button onClick={() => setCount(count + 1)}>Increment</button>",
      "    </div>",
      "  );",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-usecallback"
  },
  {
    "id": 298,
    "title": "What is useMemo?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What does the useMemo hook do in React?",
    "answer": [
      "`useMemo` memoizes the result of a computation so it is recalculated only when dependencies change.",
      "Useful for optimizing expensive calculations or preventing unnecessary re-renders due to new object references."
    ],
    "references": [],
    "slug": "what-is-usememo"
  },
  {
    "id": 299,
    "title": "Example of useMemo?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Provide an example of how to use useMemo in React.",
    "answer": [
      "Example:",
      "```js",
      "import React, { useState, useMemo } from 'react';",
      "",
      "function ExpensiveCalculation({ num }) {",
      "  const result = useMemo(() => {",
      "    console.log('Calculating...');",
      "    return num * 2;",
      "  }, [num]);",
      "  return <div>{result}</div>;",
      "}",
      "",
      "function App() {",
      "  const [count, setCount] = useState(0);",
      "  return (",
      "    <div>",
      "      <ExpensiveCalculation num={count} />",
      "      <button onClick={() => setCount(count + 1)}>Increment</button>",
      "    </div>",
      "  );",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-usememo"
  },
  {
    "id": 300,
    "title": "Difference between useMemo and useCallback?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is the difference between useMemo and useCallback?",
    "answer": [
      "`useMemo` memoizes the result of a calculation, returning a **value**.",
      "`useCallback` memoizes a **function reference** itself to prevent re-creations.",
      "Both accept a dependency array to determine when updates occur."
    ],
    "references": [],
    "slug": "difference-between-usememo-and-usecallback"
  },
  {
    "id": 301,
    "title": "What is lazy loading in React?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is lazy loading in React?",
    "answer": [
      "Lazy loading in React refers to loading components or resources only when they are needed rather than at initial load.",
      "It helps reduce the initial bundle size and improves performance for large applications."
    ],
    "references": [],
    "slug": "what-is-lazy-loading-in-react"
  },
  {
    "id": 302,
    "title": "Example of React.lazy and Suspense?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Provide an example of lazy loading a component with React.lazy and Suspense.",
    "answer": [
      "Example:",
      "```js",
      "import React, { Suspense } from 'react';",
      "",
      "const LazyComponent = React.lazy(() => import('./MyComponent'));",
      "",
      "function App() {",
      "  return (",
      "    <Suspense fallback={<div>Loading...</div>}>",
      "      <LazyComponent />",
      "    </Suspense>",
      "  );",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-react-lazy-and-suspense"
  },
  {
    "id": 303,
    "title": "What is error boundary?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is an error boundary in React?",
    "answer": [
      "An error boundary is a React component that catches JavaScript errors anywhere in its child component tree and displays a fallback UI instead of crashing the whole app.",
      "Implemented via lifecycle methods like componentDidCatch."
    ],
    "references": [],
    "slug": "what-is-error-boundary"
  },
  {
    "id": 304,
    "title": "Example of error boundary?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Provide an example of creating an error boundary in React.",
    "answer": [
      "Example:",
      "```js",
      "import React from 'react';",
      "",
      "class ErrorBoundary extends React.Component {",
      "  constructor(props) {",
      "    super(props);",
      "    this.state = { hasError: false };",
      "  }",
      "  static getDerivedStateFromError(error) {",
      "    return { hasError: true };",
      "  }",
      "  componentDidCatch(error, info) {",
      "    console.log(error, info);",
      "  }",
      "  render() {",
      "    if (this.state.hasError) {",
      "      return <h1>Something went wrong.</h1>;",
      "    }",
      "    return this.props.children;",
      "  }",
      "}",
      "",
      "export default ErrorBoundary;",
      "```"
    ],
    "references": [],
    "slug": "example-of-error-boundary"
  },
  {
    "id": 305,
    "title": "What is Strict Mode in React?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is React Strict Mode?",
    "answer": [
      "StrictMode is a tool for highlighting potential problems in a React application.",
      "It activates additional checks and warnings for its descendants in development mode, such as identifying unsafe lifecycles, legacy API usage, or unexpected side effects."
    ],
    "references": [],
    "slug": "what-is-strict-mode-in-react"
  },
  {
    "id": 306,
    "title": "Example of using StrictMode?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Provide an example of how to use React StrictMode.",
    "answer": [
      "Example:",
      "```js",
      "import React from 'react';",
      "import ReactDOM from 'react-dom';",
      "import App from './App';",
      "",
      "ReactDOM.render(",
      "  <React.StrictMode>",
      "    <App />",
      "  </React.StrictMode>,",
      "  document.getElementById('root')",
      ");",
      "```"
    ],
    "references": [],
    "slug": "example-of-using-strictmode"
  },
  {
    "id": 307,
    "title": "What is hydration in React?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What does hydration mean in React?",
    "answer": [
      "Hydration in React refers to the process where React attaches event listeners to HTML that was rendered on the server.",
      "It enables client-side interactivity without discarding the server-rendered DOM."
    ],
    "references": [],
    "slug": "what-is-hydration-in-react"
  },
  {
    "id": 308,
    "title": "Difference between SSR and CSR?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is the difference between SSR (Server-Side Rendering) and CSR (Client-Side Rendering)?",
    "answer": [
      "In SSR, HTML is generated on the server and sent fully rendered to the client, improving initial load and SEO.",
      "In CSR, an empty HTML page loads first, and JavaScript runs on the client to render the UI.",
      "SSR can be faster for first load but CSR allows richer client-side interactivity."
    ],
    "references": [],
    "slug": "difference-between-ssr-and-csr"
  },
  {
    "id": 309,
    "title": "What is render props pattern?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is the render props pattern in React?",
    "answer": [
      "The render props pattern is a technique where a component's child is a function that receives data or methods and returns React elements.",
      "This enables code sharing between components without relying on higher-order components."
    ],
    "references": [],
    "slug": "what-is-render-props-pattern"
  },
  {
    "id": 310,
    "title": "Example of render props pattern?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Provide an example of the render props pattern in React.",
    "answer": [
      "Example:",
      "```js",
      "function DataProvider({ render }) {",
      "  const data = { name: 'React' };",
      "  return render(data);",
      "}",
      "",
      "function App() {",
      "  return (",
      "    <DataProvider",
      "      render={(data) => <h1>Hello, {data.name}</h1>}",
      "    />",
      "  );",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-render-props-pattern"
  },
  {
    "id": 311,
    "title": "What are higher-order components?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is a higher-order component (HOC) in React?",
    "answer": [
      "An HOC is a function that takes a component and returns a new component with additional props or behavior.",
      "Commonly used for code reuse, such as handling authentication, subscriptions, or analytics."
    ],
    "references": [],
    "slug": "what-are-higher-order-components"
  },
  {
    "id": 312,
    "title": "Example of higher-order component?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Provide an example of creating a higher-order component in React.",
    "answer": [
      "Example:",
      "```js",
      "function withLogger(Component) {",
      "  return function Wrapped(props) {",
      "    console.log('Props:', props);",
      "    return <Component {...props} />;",
      "  }",
      "}",
      "",
      "function Hello(props) {",
      "  return <h1>Hello {props.name}</h1>;",
      "}",
      "",
      "const HelloWithLogger = withLogger(Hello);",
      "```"
    ],
    "references": [],
    "slug": "example-of-higher-order-component"
  },
  {
    "id": 313,
    "title": "What are controlled vs uncontrolled components?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is the difference between controlled and uncontrolled components in React?",
    "answer": [
      "Controlled components have their form data managed by React state via props like value and onChange.",
      "Uncontrolled components rely on the DOM itself for keeping their data, using refs to access values."
    ],
    "references": [],
    "slug": "what-are-controlled-vs-uncontrolled-components"
  },
  {
    "id": 314,
    "title": "Example of uncontrolled component?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Provide an example of an uncontrolled component in React.",
    "answer": [
      "Example:",
      "```js",
      "import React, { useRef } from 'react';",
      "",
      "function Form() {",
      "  const inputRef = useRef();",
      "  function handleSubmit(e) {",
      "    e.preventDefault();",
      "    alert(inputRef.current.value);",
      "  }",
      "  return (",
      "    <form onSubmit={handleSubmit}>",
      "      <input ref={inputRef} />",
      "      <button type='submit'>Submit</button>",
      "    </form>",
      "  );",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-uncontrolled-component"
  },
  {
    "id": 315,
    "title": "What is reconciliation in React?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is reconciliation in React?",
    "answer": [
      "Reconciliation is the process by which React updates the DOM efficiently.",
      "When state or props change, React creates a new virtual DOM tree and compares it to the previous tree to determine minimal updates to apply to the real DOM."
    ],
    "references": [],
    "slug": "what-is-reconciliation-in-react-315"
  },
  {
    "id": 316,
    "title": "What is React Router?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is React Router?",
    "answer": [
      "React Router is a popular library for handling routing in React applications.",
      "It allows navigation between different views or pages without reloading the browser.",
      "It manages the browser history and URL changes to render the appropriate components."
    ],
    "references": [],
    "slug": "what-is-react-router-316"
  },
  {
    "id": 317,
    "title": "Example of using React Router?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Provide a simple example of using React Router.",
    "answer": [
      "Example:",
      "```js",
      "import React from 'react';",
      "import { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';",
      "",
      "function Home() { return <h1>Home</h1>; }",
      "function About() { return <h1>About</h1>; }",
      "",
      "function App() {",
      "  return (",
      "    <Router>",
      "      <nav>",
      "        <Link to='/'>Home</Link> | ",
      "        <Link to='/about'>About</Link>",
      "      </nav>",
      "      <Routes>",
      "        <Route path='/' element={<Home />} />",
      "        <Route path='/about' element={<About />} />",
      "      </Routes>",
      "    </Router>",
      "  );",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-using-react-router"
  },
  {
    "id": 318,
    "title": "What are custom hooks?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What are custom hooks in React?",
    "answer": [
      "Custom hooks are functions that encapsulate reusable logic using existing React hooks.",
      "They allow sharing logic across multiple components without repeating code.",
      "Custom hooks typically start with the prefix 'use'."
    ],
    "references": [],
    "slug": "what-are-custom-hooks"
  },
  {
    "id": 319,
    "title": "Example of custom hook?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Provide an example of a custom hook in React.",
    "answer": [
      "Example:",
      "```js",
      "import { useState, useEffect } from 'react';",
      "",
      "function useWindowWidth() {",
      "  const [width, setWidth] = useState(window.innerWidth);",
      "  useEffect(() => {",
      "    function handleResize() {",
      "      setWidth(window.innerWidth);",
      "    }",
      "    window.addEventListener('resize', handleResize);",
      "    return () => window.removeEventListener('resize', handleResize);",
      "  }, []);",
      "  return width;",
      "}",
      "",
      "export default useWindowWidth;",
      "```"
    ],
    "references": [],
    "slug": "example-of-custom-hook"
  },
  {
    "id": 320,
    "title": "What is React StrictMode for?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Why would you use React StrictMode?",
    "answer": [
      "StrictMode helps developers find potential problems in their React apps.",
      "It intentionally double-invokes certain lifecycle methods and hooks to detect side effects.",
      "StrictMode doesnâ€™t render anything visible in the UIâ€”itâ€™s a development tool only."
    ],
    "references": [],
    "slug": "what-is-react-strictmode-for"
  },
  {
    "id": 321,
    "title": "What is PropTypes?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is PropTypes in React?",
    "answer": [
      "PropTypes is a type-checking feature for React components.",
      "It ensures that components receive props of the expected type and structure.",
      "Helpful for catching bugs during development, especially in large codebases."
    ],
    "references": [],
    "slug": "what-is-proptypes"
  },
  {
    "id": 322,
    "title": "Example of using PropTypes?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Provide an example of defining PropTypes in a React component.",
    "answer": [
      "Example:",
      "```js",
      "import React from 'react';",
      "import PropTypes from 'prop-types';",
      "",
      "function User({ name, age }) {",
      "  return <p>{name} is {age} years old.</p>;",
      "}",
      "",
      "User.propTypes = {",
      "  name: PropTypes.string.isRequired,",
      "  age: PropTypes.number.isRequired",
      "};",
      "",
      "export default User;",
      "```"
    ],
    "references": [],
    "slug": "example-of-using-proptypes"
  },
  {
    "id": 323,
    "title": "What are portals used for?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Why would you use React portals?",
    "answer": [
      "Portals allow rendering components outside the root DOM hierarchy of the parent component.",
      "Useful for modals, tooltips, and overlays to avoid CSS overflow or z-index issues.",
      "Portals help manage UI elements that visually appear above other content."
    ],
    "references": [],
    "slug": "what-are-portals-used-for"
  },
  {
    "id": 324,
    "title": "Difference between controlled and uncontrolled inputs?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Explain the difference between controlled and uncontrolled inputs in React.",
    "answer": [
      "Controlled inputs have their values managed via React state and props.",
      "Uncontrolled inputs rely on the DOM to manage their internal state, accessed using refs.",
      "Controlled components offer better validation and control, while uncontrolled components are simpler for quick use cases."
    ],
    "references": [],
    "slug": "difference-between-controlled-and-uncontrolled-inputs"
  },
  {
    "id": 325,
    "title": "What is reconciliation algorithm?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Explain the reconciliation algorithm in React.",
    "answer": [
      "The reconciliation algorithm allows React to update the DOM efficiently by comparing two virtual DOM trees.",
      "It determines the minimal set of changes needed and applies them to the real DOM.",
      "This process helps improve rendering performance and ensures smooth UI updates."
    ],
    "references": [],
    "slug": "what-is-reconciliation-algorithm"
  },
  {
    "id": 326,
    "title": "What is PureComponent?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is React.PureComponent?",
    "answer": [
      "PureComponent is a React class component that implements shouldComponentUpdate with a shallow prop and state comparison.",
      "It prevents unnecessary re-renders if props or state haven't changed.",
      "Useful for improving performance in class-based components."
    ],
    "references": [],
    "slug": "what-is-purecomponent"
  },
  {
    "id": 327,
    "title": "Example of PureComponent?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Provide an example of using PureComponent in React.",
    "answer": [
      "Example:",
      "```js",
      "import React, { PureComponent } from 'react';",
      "",
      "class MyComponent extends PureComponent {",
      "  render() {",
      "    return <div>{this.props.name}</div>;",
      "  }",
      "}",
      "",
      "export default MyComponent;",
      "```"
    ],
    "references": [],
    "slug": "example-of-purecomponent"
  },
  {
    "id": 328,
    "title": "What is React Profiler?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is the React Profiler API?",
    "answer": [
      "React Profiler is a tool for measuring performance of React components.",
      "It records timing information about when components render and helps identify performance bottlenecks.",
      "Available as part of React DevTools and as a programmatic API via React.Profiler."
    ],
    "references": [],
    "slug": "what-is-react-profiler"
  },
  {
    "id": 329,
    "title": "Example of React Profiler usage?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Provide an example of using the React Profiler component.",
    "answer": [
      "Example:",
      "```js",
      "import React, { Profiler } from 'react';",
      "",
      "function onRenderCallback(id, phase, actualTime) {",
      "  console.log(`Profiler [${id}] rendered in ${actualTime}ms`);",
      "}",
      "",
      "function App() {",
      "  return (",
      "    <Profiler id='MyApp' onRender={onRenderCallback}>",
      "      <div>My Application</div>",
      "    </Profiler>",
      "  );",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-react-profiler-usage"
  },
  {
    "id": 330,
    "title": "What is Suspense in React?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is React Suspense?",
    "answer": [
      "Suspense lets you declaratively wait for some code to load (e.g. lazy-loaded components or data fetching).",
      "It provides a fallback UI while waiting, improving the user experience during async operations.",
      "Itâ€™s also key to integrating React with concurrent rendering features."
    ],
    "references": [],
    "slug": "what-is-suspense-in-react-330"
  },
  {
    "id": 331,
    "title": "Example of Suspense with data fetching?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Provide an example of Suspense used for data fetching in React.",
    "answer": [
      "Example (simplified):",
      "```js",
      "import React, { Suspense } from 'react';",
      "",
      "const DataComponent = React.lazy(() => import('./DataComponent'));",
      "",
      "function App() {",
      "  return (",
      "    <Suspense fallback={<div>Loading data...</div>}>",
      "      <DataComponent />",
      "    </Suspense>",
      "  );",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-suspense-with-data-fetching"
  },
  {
    "id": 332,
    "title": "What is Context API performance concern?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Why can Context API sometimes cause performance issues?",
    "answer": [
      "When context values change, all components consuming that context re-render.",
      "This can cause unnecessary renders in large component trees.",
      "Solutions include splitting contexts, memoization, and using context selectors in libraries like use-context-selector."
    ],
    "references": [],
    "slug": "what-is-context-api-performance-concern"
  },
  {
    "id": 333,
    "title": "What are compound components?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What are compound components in React?",
    "answer": [
      "Compound components are a pattern where multiple components work together, sharing implicit state or context.",
      "They let you build flexible APIs for complex components, e.g. Tabs with Tab and TabPanel subcomponents."
    ],
    "references": [],
    "slug": "what-are-compound-components"
  },
  {
    "id": 334,
    "title": "Example of compound components?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Provide an example of compound components in React.",
    "answer": [
      "Example:",
      "```js",
      "import React, { createContext, useContext, useState } from 'react';",
      "",
      "const TabsContext = createContext();",
      "",
      "function Tabs({ children }) {",
      "  const [active, setActive] = useState(0);",
      "  return (",
      "    <TabsContext.Provider value={{ active, setActive }}>",
      "      {children}",
      "    </TabsContext.Provider>",
      "  );",
      "}",
      "",
      "function Tab({ index, children }) {",
      "  const { active, setActive } = useContext(TabsContext);",
      "  return (",
      "    <button",
      "      onClick={() => setActive(index)}",
      "      style={{ fontWeight: active === index ? 'bold' : 'normal' }}",
      "    >",
      "      {children}",
      "    </button>",
      "  );",
      "}",
      "",
      "function TabPanel({ index, children }) {",
      "  const { active } = useContext(TabsContext);",
      "  return active === index ? <div>{children}</div> : null;",
      "}",
      "",
      "export { Tabs, Tab, TabPanel };",
      "```"
    ],
    "references": [],
    "slug": "example-of-compound-components"
  },
  {
    "id": 335,
    "title": "What is the difference between shallow and deep rendering?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Explain the difference between shallow and deep rendering in React testing.",
    "answer": [
      "Shallow rendering tests a component in isolation without rendering its child components.",
      "Deep rendering (a.k.a. full rendering) renders the full tree, including children.",
      "Shallow rendering is useful for unit tests, while deep rendering suits integration tests."
    ],
    "references": [],
    "slug": "what-is-the-difference-between-shallow-and-deep-rendering"
  },
  {
    "id": 336,
    "title": "What is Server Components in React?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What are Server Components in React?",
    "answer": [
      "Server Components allow parts of a React app to render entirely on the server.",
      "They produce HTML and send it to the client without sending extra JavaScript for those components.",
      "This reduces bundle size and improves performance, especially for static or read-only UI parts."
    ],
    "references": [],
    "slug": "what-is-server-components-in-react"
  },
  {
    "id": 337,
    "title": "What is Concurrent Rendering?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Explain concurrent rendering in React.",
    "answer": [
      "Concurrent rendering allows React to interrupt rendering work and prioritize important updates.",
      "It makes rendering non-blocking, helping apps remain responsive during heavy computations.",
      "Features like Suspense, transitions, and startTransition are built on concurrent rendering."
    ],
    "references": [],
    "slug": "what-is-concurrent-rendering"
  },
  {
    "id": 338,
    "title": "What is startTransition?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What does startTransition do in React?",
    "answer": [
      "`startTransition` lets you mark updates as low priority.",
      "It signals React that the update can be interrupted if more urgent work arrives (like user input).",
      "Useful for deferring expensive UI updates without blocking interactivity."
    ],
    "references": [],
    "slug": "what-is-starttransition"
  },
  {
    "id": 339,
    "title": "Example of startTransition?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Provide an example of using startTransition in React.",
    "answer": [
      "Example:",
      "```js",
      "import React, { useState, startTransition } from 'react';",
      "",
      "function Search() {",
      "  const [query, setQuery] = useState('');",
      "  const [results, setResults] = useState([]);",
      "",
      "  function handleChange(e) {",
      "    const val = e.target.value;",
      "    setQuery(val);",
      "    startTransition(() => {",
      "      // simulate expensive filtering",
      "      setResults(fakeSearch(val));",
      "    });",
      "  }",
      "",
      "  return (",
      "    <div>",
      "      <input value={query} onChange={handleChange} />",
      "      {results.map(item => <div key={item}>{item}</div>)}",
      "    </div>",
      "  );",
      "}",
      "function fakeSearch(val) {",
      "  return ['apple', 'banana', 'orange'].filter(item => item.includes(val));",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-starttransition"
  },
  {
    "id": 340,
    "title": "What is React DevTools?",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "What is React DevTools?",
    "answer": [
      "React DevTools is a browser extension for inspecting React component trees.",
      "It helps developers debug props, state, and performance issues.",
      "Available for Chrome, Firefox, and as a standalone app."
    ],
    "references": [],
    "slug": "what-is-react-devtools"
  },
  {
    "id": 341,
    "title": "What is React Fiber?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is the React Fiber architecture?",
    "answer": [
      "React Fiber is the new core algorithm introduced in React 16.",
      "It enables incremental rendering, allowing React to pause, abort, or resume work.",
      "Fiber improves responsiveness and sets the foundation for concurrent features."
    ],
    "references": [],
    "slug": "what-is-react-fiber"
  },
  {
    "id": 342,
    "title": "What is hydration mismatch?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is a hydration mismatch in React?",
    "answer": [
      "A hydration mismatch happens when server-rendered HTML doesn't match the client-rendered React tree.",
      "React shows warnings if markup differs, which can break interactivity.",
      "Causes include non-deterministic rendering or random data on the server vs. client."
    ],
    "references": [],
    "slug": "what-is-hydration-mismatch"
  },
  {
    "id": 343,
    "title": "How to avoid hydration mismatch?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "How can you avoid hydration mismatch in React apps?",
    "answer": [
      "Use deterministic rendering on both server and client.",
      "Avoid random values or browser-only APIs during initial render.",
      "Defer client-only logic to useEffect or dynamic imports."
    ],
    "references": [],
    "slug": "how-to-avoid-hydration-mismatch"
  },
  {
    "id": 344,
    "title": "What is React Testing Library?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is React Testing Library?",
    "answer": [
      "React Testing Library is a tool for testing React components by simulating user interactions.",
      "It encourages testing components as users would use them, focusing on UI behavior rather than implementation details.",
      "Popular alternative to Enzyme for modern React apps."
    ],
    "references": [],
    "slug": "what-is-react-testing-library"
  },
  {
    "id": 345,
    "title": "Example of React Testing Library?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Provide an example test using React Testing Library.",
    "answer": [
      "Example:",
      "```js",
      "import { render, screen, fireEvent } from '@testing-library/react';",
      "import Counter from './Counter';",
      "",
      "test('increments counter', () => {",
      "  render(<Counter />);",
      "  fireEvent.click(screen.getByText(/increment/i));",
      "  expect(screen.getByText(/count:/i)).toHaveTextContent('1');",
      "});",
      "```"
    ],
    "references": [],
    "slug": "example-of-react-testing-library"
  },
  {
    "id": 346,
    "title": "What is act() in React Testing Library?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What does act() do in React Testing Library?",
    "answer": [
      "`act` ensures that all React updates related to a test are processed before assertions run.",
      "It flushes effects and updates, preventing warnings about updates not wrapped in act.",
      "Most utilities like fireEvent already wrap actions in act automatically."
    ],
    "references": [],
    "slug": "what-is-act-in-react-testing-library"
  },
  {
    "id": 347,
    "title": "Difference between mount and shallow rendering?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is the difference between mount and shallow rendering?",
    "answer": [
      "Shallow rendering tests a single component without rendering child components.",
      "Mount rendering renders the full tree, including all children.",
      "Shallow is useful for unit testing; mount suits integration testing."
    ],
    "references": [],
    "slug": "difference-between-mount-and-shallow-rendering"
  },
  {
    "id": 348,
    "title": "What is Redux?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is Redux in React apps?",
    "answer": [
      "Redux is a state management library that centralizes app state in a single store.",
      "Components dispatch actions that describe changes, and reducers produce the next state.",
      "Useful for large apps needing predictable state management and debugging."
    ],
    "references": [],
    "slug": "what-is-redux-348"
  },
  {
    "id": 349,
    "title": "Example Redux store setup?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Provide a simple example of setting up a Redux store.",
    "answer": [
      "Example:",
      "```js",
      "import { configureStore, createSlice } from '@reduxjs/toolkit';",
      "",
      "const counterSlice = createSlice({",
      "  name: 'counter',",
      "  initialState: 0,",
      "  reducers: {",
      "    increment: state => state + 1",
      "  }",
      "});",
      "",
      "const store = configureStore({",
      "  reducer: { counter: counterSlice.reducer }",
      "});",
      "",
      "export const { increment } = counterSlice.actions;",
      "export default store;",
      "```"
    ],
    "references": [],
    "slug": "example-redux-store-setup"
  },
  {
    "id": 350,
    "title": "What is Immer.js?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is Immer.js and how is it used in React?",
    "answer": [
      "Immer lets you write immutable logic in a mutable style.",
      "Instead of returning new objects manually, you mutate a draft object.",
      "Popular with Redux Toolkit for simplifying reducers."
    ],
    "references": [],
    "slug": "what-is-immer-js"
  },
  {
    "id": 351,
    "title": "Example of using Immer?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Provide an example of updating state using Immer.",
    "answer": [
      "Example:",
      "```js",
      "import produce from 'immer';",
      "",
      "const nextState = produce(state, draft => {",
      "  draft.counter += 1;",
      "});",
      "```"
    ],
    "references": [],
    "slug": "example-of-using-immer"
  },
  {
    "id": 352,
    "title": "What is useLayoutEffect?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What does useLayoutEffect do in React?",
    "answer": [
      "`useLayoutEffect` runs synchronously after all DOM mutations but before the browser repaints.",
      "Useful for reading layout values or performing DOM measurements.",
      "Unlike `useEffect`, it blocks painting until it finishes."
    ],
    "references": [],
    "slug": "what-is-uselayouteffect"
  },
  {
    "id": 353,
    "title": "Example of useLayoutEffect?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Provide an example of using useLayoutEffect in React.",
    "answer": [
      "Example:",
      "```js",
      "import React, { useLayoutEffect, useRef } from 'react';",
      "",
      "function Component() {",
      "  const ref = useRef();",
      "  useLayoutEffect(() => {",
      "    console.log(ref.current.getBoundingClientRect());",
      "  }, []);",
      "  return <div ref={ref}>Hello</div>;",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-uselayouteffect"
  },
  {
    "id": 354,
    "title": "What is the difference between useEffect and useLayoutEffect?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Explain the difference between useEffect and useLayoutEffect.",
    "answer": [
      "`useEffect` runs after the browser paints and doesn't block painting.",
      "`useLayoutEffect` runs before paint and blocks rendering until finished.",
      "Use `useLayoutEffect` for layout reads/writes that must happen synchronously."
    ],
    "references": [],
    "slug": "what-is-the-difference-between-useeffect-and-uselayouteffect"
  },
  {
    "id": 355,
    "title": "What is React Query?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is React Query and why use it?",
    "answer": [
      "React Query is a data-fetching library for React.",
      "It manages caching, background updates, and stale data handling.",
      "It simplifies API calls and reduces the need for manual data fetching logic in components."
    ],
    "references": [],
    "slug": "what-is-react-query"
  },
  {
    "id": 356,
    "title": "What is Next.js?",
    "category": "NextJS",
    "difficulty": "Beginner",
    "question": "What is Next.js in React ecosystem?",
    "answer": [
      "Next.js is a React framework for building server-rendered applications.",
      "It supports static site generation (SSG), server-side rendering (SSR), API routes, and file-system routing.",
      "It improves SEO and performance over client-only rendering."
    ],
    "references": [],
    "slug": "what-is-next-js-356"
  },
  {
    "id": 357,
    "title": "Difference between getStaticProps and getServerSideProps?",
    "category": "NextJS",
    "difficulty": "Beginner",
    "question": "What is the difference between getStaticProps and getServerSideProps in Next.js?",
    "answer": [
      "`getStaticProps` runs at build time and generates static HTML pages, ideal for pages that don't change often.",
      "`getServerSideProps` runs on every request, allowing dynamic data fetching on the server.",
      "SSG is faster for static content, while SSR is needed for frequently changing data."
    ],
    "references": [],
    "slug": "difference-between-getstaticprops-and-getserversideprops"
  },
  {
    "id": 358,
    "title": "What is ISR in Next.js?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is Incremental Static Regeneration (ISR) in Next.js?",
    "answer": [
      "ISR allows you to update static pages after deployment without rebuilding the whole site.",
      "Pages can be regenerated in the background when traffic comes in.",
      "This combines benefits of static generation and dynamic updates."
    ],
    "references": [],
    "slug": "what-is-isr-in-next-js"
  },
  {
    "id": 359,
    "title": "What is SWR?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is SWR in React?",
    "answer": [
      "SWR stands for stale-while-revalidate, a data fetching library from Vercel.",
      "It caches fetched data and revalidates it in the background for up-to-date data without blocking UI.",
      "It simplifies data fetching and reduces loading spinners in React apps."
    ],
    "references": [],
    "slug": "what-is-swr"
  },
  {
    "id": 360,
    "title": "Example of using SWR?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Provide an example of using SWR in React.",
    "answer": [
      "Example:",
      "```js",
      "import useSWR from 'swr';",
      "",
      "const fetcher = (url) => fetch(url).then((res) => res.json());",
      "",
      "function Profile() {",
      "  const { data, error } = useSWR('/api/user', fetcher);",
      "  if (error) return <div>Failed to load</div>;",
      "  if (!data) return <div>Loading...</div>;",
      "  return <div>Hello, {data.name}</div>;",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-using-swr"
  },
  {
    "id": 361,
    "title": "What is React Native?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is React Native?",
    "answer": [
      "React Native is a framework for building mobile apps using React.",
      "It lets developers write apps in JavaScript or TypeScript, which compile to native platform code.",
      "Components like View, Text, and Button map to native iOS and Android elements."
    ],
    "references": [],
    "slug": "what-is-react-native"
  },
  {
    "id": 362,
    "title": "Difference between React and React Native?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is the difference between React and React Native?",
    "answer": [
      "React builds user interfaces for web browsers, using HTML and CSS.",
      "React Native targets mobile platforms, using native widgets instead of HTML elements.",
      "React Native apps run as native apps rather than in the browser."
    ],
    "references": [],
    "slug": "difference-between-react-and-react-native"
  },
  {
    "id": 363,
    "title": "What is React Fiber architecture?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Explain the benefits of React Fiber architecture.",
    "answer": [
      "React Fiber enables interruptible rendering, allowing React to pause work and handle higher-priority updates.",
      "It improves animations, responsiveness, and lays the groundwork for concurrent rendering.",
      "It replaced the old stack reconciler for better scheduling of updates."
    ],
    "references": [],
    "slug": "what-is-react-fiber-architecture"
  },
  {
    "id": 364,
    "title": "What is SuspenseList?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is SuspenseList in React?",
    "answer": [
      "SuspenseList coordinates multiple Suspense components to control how they reveal their content.",
      "It prevents content from appearing out of order when multiple components load data.",
      "Not yet widely used, as concurrent features continue evolving."
    ],
    "references": [],
    "slug": "what-is-suspenselist"
  },
  {
    "id": 365,
    "title": "Example of SuspenseList?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Provide an example of SuspenseList in React.",
    "answer": [
      "Example (conceptual):",
      "```js",
      "import React, { Suspense, SuspenseList } from 'react';",
      "",
      "function App() {",
      "  return (",
      "    <SuspenseList revealOrder='forwards'>",
      "      <Suspense fallback={<div>Loading A...</div>}>",
      "        <ComponentA />",
      "      </Suspense>",
      "      <Suspense fallback={<div>Loading B...</div>}>",
      "        <ComponentB />",
      "      </Suspense>",
      "    </SuspenseList>",
      "  );",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-suspenselist"
  },
  {
    "id": 366,
    "title": "What are forward refs?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is forwardRef in React?",
    "answer": [
      "`forwardRef` allows a parent component to pass a ref through a child component to a DOM element or another component.",
      "Useful when building reusable components that expose their internal DOM nodes to parents."
    ],
    "references": [],
    "slug": "what-are-forward-refs"
  },
  {
    "id": 367,
    "title": "Example of forwardRef?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Provide an example of using forwardRef in React.",
    "answer": [
      "Example:",
      "```js",
      "import React, { forwardRef } from 'react';",
      "",
      "const MyInput = forwardRef((props, ref) => {",
      "  return <input ref={ref} {...props} />;",
      "});",
      "",
      "export default MyInput;",
      "```"
    ],
    "references": [],
    "slug": "example-of-forwardref"
  },
  {
    "id": 368,
    "title": "What is React Portals used for?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Why use React Portals?",
    "answer": [
      "React Portals help render children into a different DOM subtree than the parent component.",
      "Useful for modals, popups, tooltips, and overlays.",
      "They help manage CSS stacking and layout issues."
    ],
    "references": [],
    "slug": "what-is-react-portals-used-for"
  },
  {
    "id": 369,
    "title": "What are React Hooks Rules?",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "What are the rules for using hooks in React?",
    "answer": [
      "Hooks can only be called at the top level of a function component or a custom hook.",
      "Hooks cannot be called conditionally or inside loops.",
      "Hooks must start with the word `use`."
    ],
    "references": [],
    "slug": "what-are-react-hooks-rules"
  },
  {
    "id": 370,
    "title": "What is key prop in lists?",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "Why is a key prop important in React lists?",
    "answer": [
      "The key prop helps React identify which items changed, were added, or removed.",
      "Using a unique key improves performance and prevents unnecessary re-renders.",
      "Avoid using array indexes as keys unless items never change order."
    ],
    "references": [],
    "slug": "what-is-key-prop-in-lists"
  },
  {
    "id": 371,
    "title": "What is prop drilling?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Explain prop drilling in React.",
    "answer": [
      "Prop drilling happens when you pass props through many nested components just to reach a deeply nested child.",
      "It can make components tightly coupled and harder to maintain.",
      "Context API or state management tools help avoid prop drilling."
    ],
    "references": [],
    "slug": "what-is-prop-drilling-371"
  },
  {
    "id": 372,
    "title": "What are synthetic events?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What are synthetic events in React?",
    "answer": [
      "Synthetic events are React's wrapper around native browser events.",
      "They ensure consistent event behavior across different browsers.",
      "Synthetic events pool events for performance and automatically clean them up after the event handler runs."
    ],
    "references": [],
    "slug": "what-are-synthetic-events"
  },
  {
    "id": 373,
    "title": "What is context selectors?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What are context selectors in React?",
    "answer": [
      "Context selectors allow components to subscribe only to specific parts of context values.",
      "This reduces unnecessary re-renders when unrelated context values change.",
      "Libraries like use-context-selector implement this feature for better performance."
    ],
    "references": [],
    "slug": "what-is-context-selectors"
  },
  {
    "id": 374,
    "title": "Difference between React.memo and useMemo?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is the difference between React.memo and useMemo?",
    "answer": [
      "`React.memo` is used to memoize entire components, preventing re-renders if props don't change.",
      "`useMemo` memoizes computed values within a component to avoid recalculations.",
      "React.memo is for components; useMemo is for values."
    ],
    "references": [],
    "slug": "difference-between-react-memo-and-usememo"
  },
  {
    "id": 375,
    "title": "What are lazy components?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What are lazy-loaded components in React?",
    "answer": [
      "Lazy components are loaded only when needed using `React.lazy`.",
      "They reduce the initial bundle size and speed up page loads.",
      "They must be wrapped in a `Suspense` boundary for fallback rendering."
    ],
    "references": [],
    "slug": "what-are-lazy-components"
  },
  {
    "id": 376,
    "title": "What is hydration in Next.js?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is hydration in Next.js and why is it important?",
    "answer": [
      "Hydration in Next.js is the process of attaching React event listeners and functionality to HTML that was pre-rendered on the server.",
      "This transforms static HTML into a fully interactive React app on the client side.",
      "Hydration is crucial for combining fast initial load times with dynamic interactivity."
    ],
    "references": [],
    "slug": "what-is-hydration-in-next-js"
  },
  {
    "id": 377,
    "title": "What is dynamic import?",
    "category": "NextJS",
    "difficulty": "Beginner",
    "question": "What is dynamic import in React or Next.js?",
    "answer": [
      "Dynamic import lets you load JavaScript modules only when needed.",
      "In React, you can use React.lazy with dynamic imports for code splitting.",
      "In Next.js, dynamic imports allow splitting components into separate chunks to reduce initial page load."
    ],
    "references": [],
    "slug": "what-is-dynamic-import"
  },
  {
    "id": 378,
    "title": "Example of dynamic import in Next.js?",
    "category": "NextJS",
    "difficulty": "Beginner",
    "question": "Provide an example of dynamic import in Next.js.",
    "answer": [
      "Example:",
      "```js",
      "import dynamic from 'next/dynamic';",
      "",
      "const DynamicComponent = dynamic(() => import('../components/HeavyComponent'));",
      "",
      "export default function Page() {",
      "  return <DynamicComponent />;",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-dynamic-import-in-next-js"
  },
  {
    "id": 379,
    "title": "What is getInitialProps?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is getInitialProps in Next.js?",
    "answer": [
      "`getInitialProps` was an older method for fetching data before rendering pages in Next.js.",
      "It runs on both server and client side.",
      "Modern Next.js prefers `getStaticProps` or `getServerSideProps` for better performance and flexibility."
    ],
    "references": [],
    "slug": "what-is-getinitialprops"
  },
  {
    "id": 380,
    "title": "Difference between useEffect and useInsertionEffect?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is the difference between useEffect and useInsertionEffect?",
    "answer": [
      "`useInsertionEffect` runs synchronously before DOM mutations, making it suitable for injecting styles.",
      "`useEffect` runs after the browser paints and DOM updates, good for subscriptions and async tasks.",
      "Most apps rarely need `useInsertionEffect` unless working with CSS-in-JS libraries."
    ],
    "references": [],
    "slug": "difference-between-useeffect-and-useinsertioneffect"
  },
  {
    "id": 381,
    "title": "What is React Server-Side Rendering (SSR)?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Explain server-side rendering (SSR) in React.",
    "answer": [
      "SSR is the technique of rendering a React app on the server and sending HTML to the client.",
      "It improves SEO and reduces time-to-first-byte (TTFB).",
      "Hydration then makes the page interactive on the client side."
    ],
    "references": [],
    "slug": "what-is-react-server-side-rendering-ssr"
  },
  {
    "id": 382,
    "title": "What is prefetching in Next.js?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is prefetching in Next.js?",
    "answer": [
      "Next.js prefetches pages linked via `<Link>` components.",
      "When users hover or scroll near a link, Next.js downloads the JS and data for that page ahead of time.",
      "This makes navigation instantaneous without loading delays."
    ],
    "references": [],
    "slug": "what-is-prefetching-in-next-js"
  },
  {
    "id": 383,
    "title": "What is fast refresh?",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "What is fast refresh in React development?",
    "answer": [
      "Fast Refresh reloads React components instantly when you save code changes.",
      "It preserves component state whenever possible, speeding up development.",
      "It replaces the older Hot Module Replacement (HMR) in modern React tools."
    ],
    "references": [],
    "slug": "what-is-fast-refresh"
  },
  {
    "id": 384,
    "title": "What is useImperativeHandle?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What does useImperativeHandle do in React?",
    "answer": [
      "`useImperativeHandle` customizes the value exposed by a ref to parent components.",
      "Instead of exposing the full DOM element, you can expose specific methods or properties.",
      "Itâ€™s used with `forwardRef` for advanced use cases."
    ],
    "references": [],
    "slug": "what-is-useimperativehandle"
  },
  {
    "id": 385,
    "title": "Example of useImperativeHandle?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Provide an example of using useImperativeHandle.",
    "answer": [
      "Example:",
      "```js",
      "import React, { useRef, useImperativeHandle, forwardRef } from 'react';",
      "",
      "const MyInput = forwardRef((props, ref) => {",
      "  const inputRef = useRef();",
      "  useImperativeHandle(ref, () => ({",
      "    focus: () => inputRef.current.focus()",
      "  }));",
      "  return <input ref={inputRef} />;",
      "});",
      "",
      "function Parent() {",
      "  const ref = useRef();",
      "  return (",
      "    <>",
      "      <MyInput ref={ref} />",
      "      <button onClick={() => ref.current.focus()}>Focus Input</button>",
      "    </>",
      "  );",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-useimperativehandle"
  },
  {
    "id": 386,
    "title": "What is Vite?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is Vite and how does it relate to React?",
    "answer": [
      "Vite is a modern frontend build tool that provides faster dev servers and builds.",
      "It uses native ES modules and instant hot module replacement.",
      "Vite can be used as an alternative to Create React App for React projects."
    ],
    "references": [],
    "slug": "what-is-vite"
  },
  {
    "id": 387,
    "title": "Benefits of Vite over Webpack?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What are the benefits of using Vite over Webpack in React projects?",
    "answer": [
      "Vite has faster startup because it only transforms files when requested.",
      "It uses ES modules, avoiding bundling during development.",
      "Vite's HMR is near-instant compared to Webpack's slower rebuild times."
    ],
    "references": [],
    "slug": "benefits-of-vite-over-webpack"
  },
  {
    "id": 388,
    "title": "What is JSX spread attribute?",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "What is the JSX spread attribute?",
    "answer": [
      "JSX spread attributes allow passing an object of props into a JSX element.",
      "Example: `<Component {...props} />` spreads all props onto the component.",
      "Useful for dynamic or reusable prop sets."
    ],
    "references": [],
    "slug": "what-is-jsx-spread-attribute"
  },
  {
    "id": 389,
    "title": "What is React Helmet?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is React Helmet used for?",
    "answer": [
      "React Helmet manages changes to the document head from React components.",
      "Itâ€™s useful for setting page titles, meta tags, and other SEO-relevant data.",
      "Works well in both client-side and server-side rendering."
    ],
    "references": [],
    "slug": "what-is-react-helmet"
  },
  {
    "id": 390,
    "title": "Example of using React Helmet?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Provide an example of using React Helmet.",
    "answer": [
      "Example:",
      "```js",
      "import React from 'react';",
      "import { Helmet } from 'react-helmet';",
      "",
      "function MyPage() {",
      "  return (",
      "    <>",
      "      <Helmet>",
      "        <title>My Page Title</title>",
      "        <meta name='description' content='Description here' />",
      "      </Helmet>",
      "      <div>My Page Content</div>",
      "    </>",
      "  );",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-using-react-helmet"
  },
  {
    "id": 391,
    "title": "What is React Refresh?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is React Refresh?",
    "answer": [
      "React Refresh is the underlying technology behind Fast Refresh.",
      "It preserves component state while updating only the changed code.",
      "It makes development faster by avoiding full reloads on file changes."
    ],
    "references": [],
    "slug": "what-is-react-refresh"
  },
  {
    "id": 392,
    "title": "What is React Hook Form?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is React Hook Form?",
    "answer": [
      "React Hook Form is a library for managing forms in React using hooks.",
      "It simplifies form state handling, validation, and submission.",
      "It improves performance by minimizing re-renders during form updates."
    ],
    "references": [],
    "slug": "what-is-react-hook-form"
  },
  {
    "id": 393,
    "title": "Example of using React Hook Form?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Provide an example of using React Hook Form.",
    "answer": [
      "Example:",
      "```js",
      "import React from 'react';",
      "import { useForm } from 'react-hook-form';",
      "",
      "function MyForm() {",
      "  const { register, handleSubmit } = useForm();",
      "  const onSubmit = (data) => console.log(data);",
      "  return (",
      "    <form onSubmit={handleSubmit(onSubmit)}>",
      "      <input {...register('name')} placeholder='Name' />",
      "      <input type='submit' />",
      "    </form>",
      "  );",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-using-react-hook-form"
  },
  {
    "id": 394,
    "title": "What is Formik?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is Formik in React?",
    "answer": [
      "Formik is a form library for React.",
      "It manages form state, validation, and submission logic.",
      "Formik simplifies building complex forms and integrates with validation libraries like Yup."
    ],
    "references": [],
    "slug": "what-is-formik"
  },
  {
    "id": 395,
    "title": "Difference between Formik and React Hook Form?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is the difference between Formik and React Hook Form?",
    "answer": [
      "Formik uses controlled components and provides a higher-level API for forms.",
      "React Hook Form relies on uncontrolled components and native browser APIs for better performance.",
      "React Hook Form often results in fewer re-renders and smaller bundle size compared to Formik."
    ],
    "references": [],
    "slug": "difference-between-formik-and-react-hook-form"
  },
  {
    "id": 396,
    "title": "What is useDeferredValue?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is useDeferredValue in React?",
    "answer": [
      "`useDeferredValue` lets you defer updating part of the UI until the browser is idle.",
      "It helps keep interactions responsive by allowing low-priority updates to lag behind high-priority ones.",
      "Useful for avoiding slow renders during fast typing or rapid changes."
    ],
    "references": [],
    "slug": "what-is-usedeferredvalue"
  },
  {
    "id": 397,
    "title": "Example of useDeferredValue?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Provide an example of using useDeferredValue.",
    "answer": [
      "Example:",
      "```js",
      "import React, { useState, useDeferredValue } from 'react';",
      "",
      "function SearchComponent() {",
      "  const [input, setInput] = useState('');",
      "  const deferredInput = useDeferredValue(input);",
      "",
      "  return (",
      "    <div>",
      "      <input value={input} onChange={e => setInput(e.target.value)} />",
      "      <HeavyComponent query={deferredInput} />",
      "    </div>",
      "  );",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-usedeferredvalue"
  },
  {
    "id": 398,
    "title": "What is Concurrent Mode?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is Concurrent Mode in React?",
    "answer": [
      "Concurrent Mode allows React to interrupt rendering to prioritize more urgent tasks.",
      "It enables new features like Suspense for data fetching and smooth transitions.",
      "Not fully stable in production yet but core ideas are behind newer React features."
    ],
    "references": [],
    "slug": "what-is-concurrent-mode"
  },
  {
    "id": 399,
    "title": "What is Static Site Generation (SSG)?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is static site generation in React frameworks like Next.js?",
    "answer": [
      "SSG generates HTML at build time rather than at request time.",
      "It provides fast load times because pages are pre-built and served via CDN.",
      "Great for SEO and sites where content doesn't change on every request."
    ],
    "references": [],
    "slug": "what-is-static-site-generation-ssg"
  },
  {
    "id": 400,
    "title": "What is CSR?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is client-side rendering (CSR) in React?",
    "answer": [
      "CSR means the browser initially loads a minimal HTML page.",
      "React then takes over, renders UI in the browser, and handles routing.",
      "CSR apps rely heavily on JavaScript and may load slower initially compared to SSR or SSG."
    ],
    "references": [],
    "slug": "what-is-csr"
  },
  {
    "id": 401,
    "title": "What are React Hooks benefits?",
    "category": "ReactJS",
    "difficulty": "Beginner",
    "question": "What are the benefits of using React Hooks?",
    "answer": [
      "Hooks allow writing functional components with state and lifecycle features.",
      "They promote code reuse via custom hooks.",
      "They simplify logic previously spread across class methods like componentDidMount, etc."
    ],
    "references": [],
    "slug": "what-are-react-hooks-benefits"
  },
  {
    "id": 402,
    "title": "What is strict mode warning in React?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Why might React StrictMode produce warnings?",
    "answer": [
      "StrictMode intentionally invokes certain lifecycle methods twice to detect unsafe side effects.",
      "This helps developers identify code that isn't safe for concurrent rendering.",
      "Warnings don't affect production but help catch bugs during development."
    ],
    "references": [],
    "slug": "what-is-strict-mode-warning-in-react"
  },
  {
    "id": 403,
    "title": "What is React Fiber tree?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is the Fiber tree in React?",
    "answer": [
      "The Fiber tree is React's internal data structure representing the component tree.",
      "Each fiber node stores information about a component and its state, effects, and more.",
      "It allows React to pause, split, and prioritize updates for better performance."
    ],
    "references": [],
    "slug": "what-is-react-fiber-tree"
  },
  {
    "id": 404,
    "title": "What is hydration mismatch error?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is a hydration mismatch error in React?",
    "answer": [
      "Hydration mismatch occurs when the HTML generated on the server doesn't match what React expects to render on the client.",
      "It can result in warnings or broken interactivity.",
      "Itâ€™s usually caused by non-deterministic data like random values or Date.now() during initial render."
    ],
    "references": [],
    "slug": "what-is-hydration-mismatch-error"
  },
  {
    "id": 405,
    "title": "What is CSR fallback?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is CSR fallback in Next.js?",
    "answer": [
      "CSR fallback is when Next.js loads a minimal shell for a page and fills in the data with client-side rendering.",
      "This happens if a page hasn't been pre-rendered yet and needs data on demand.",
      "It helps avoid delays while building pages dynamically."
    ],
    "references": [],
    "slug": "what-is-csr-fallback"
  },
  {
    "id": 406,
    "title": "What is tree shaking?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is tree shaking in modern React apps?",
    "answer": [
      "Tree shaking is a process of removing unused code from your final bundle.",
      "ES6 module syntax enables static analysis so bundlers can safely discard code that isnâ€™t imported anywhere.",
      "It reduces file size and improves app performance."
    ],
    "references": [],
    "slug": "what-is-tree-shaking"
  },
  {
    "id": 407,
    "title": "What is code splitting?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Explain code splitting in React.",
    "answer": [
      "Code splitting breaks your app into smaller chunks loaded on demand.",
      "It reduces initial page load time by avoiding sending all code upfront.",
      "React supports code splitting via dynamic imports and React.lazy."
    ],
    "references": [],
    "slug": "what-is-code-splitting"
  },
  {
    "id": 408,
    "title": "What is renderToString?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What does renderToString do in React?",
    "answer": [
      "`renderToString` renders React components to an HTML string on the server.",
      "Useful for server-side rendering (SSR).",
      "It allows sending HTML to the client for faster initial load and better SEO."
    ],
    "references": [],
    "slug": "what-is-rendertostring"
  },
  {
    "id": 409,
    "title": "What is renderToPipeableStream?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is renderToPipeableStream in React 18?",
    "answer": [
      "`renderToPipeableStream` streams HTML from the server to the client as itâ€™s generated.",
      "It enables better performance by sending parts of the page early.",
      "It replaces older renderToString for more efficient SSR."
    ],
    "references": [],
    "slug": "what-is-rendertopipeablestream"
  },
  {
    "id": 410,
    "title": "What is a React fallback UI?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is a fallback UI in React?",
    "answer": [
      "A fallback UI is content displayed while waiting for some async operation.",
      "Itâ€™s commonly used with Suspense during lazy loading.",
      "Example: a loading spinner or message shown until data arrives."
    ],
    "references": [],
    "slug": "what-is-a-react-fallback-ui"
  },
  {
    "id": 411,
    "title": "What is Fast Refresh vs Hot Module Replacement?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "How does Fast Refresh differ from HMR in React?",
    "answer": [
      "Fast Refresh preserves component state better than classic Hot Module Replacement.",
      "It reliably updates components without losing local state, improving developer experience.",
      "Fast Refresh is integrated into tools like Vite and React DevTools."
    ],
    "references": [],
    "slug": "what-is-fast-refresh-vs-hot-module-replacement"
  },
  {
    "id": 412,
    "title": "What is loadable-components?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is the loadable-components library in React?",
    "answer": [
      "`loadable-components` is a code-splitting library for React.",
      "It allows you to load components asynchronously while handling SSR and preloading.",
      "It provides an alternative to React.lazy with more advanced SSR support."
    ],
    "references": [],
    "slug": "what-is-loadable-components"
  },
  {
    "id": 413,
    "title": "What is the purpose of useId?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is useId used for in React?",
    "answer": [
      "`useId` generates unique IDs that are stable across server and client renders.",
      "It prevents mismatches in hydration caused by random IDs.",
      "Useful for accessibility attributes like id and aria-describedby."
    ],
    "references": [],
    "slug": "what-is-the-purpose-of-useid"
  },
  {
    "id": 414,
    "title": "Example of useId?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Provide an example of using useId in React.",
    "answer": [
      "Example:",
      "```js",
      "import { useId } from 'react';",
      "",
      "function MyInput() {",
      "  const id = useId();",
      "  return (",
      "    <div>",
      "      <label htmlFor={id}>Name:</label>",
      "      <input id={id} type='text' />",
      "    </div>",
      "  );",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-useid"
  },
  {
    "id": 415,
    "title": "What is suspense boundary?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is a suspense boundary in React?",
    "answer": [
      "A suspense boundary defines an area of the UI that can be replaced by fallback content while waiting for data or code to load.",
      "It prevents parts of the UI from appearing incomplete.",
      "Example: <Suspense fallback={<Spinner />} />"
    ],
    "references": [],
    "slug": "what-is-suspense-boundary"
  },
  {
    "id": 416,
    "title": "What is prefetch in React Router?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is prefetching in React Router v6?",
    "answer": [
      "Prefetching loads data or components for routes before navigation happens.",
      "It improves perceived performance by making page transitions faster.",
      "React Router v6 plans more integrated support for preloading and data APIs."
    ],
    "references": [],
    "slug": "what-is-prefetch-in-react-router"
  },
  {
    "id": 417,
    "title": "What is react-query used for?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Why use react-query in React apps?",
    "answer": [
      "`react-query` simplifies data fetching, caching, and synchronization.",
      "It reduces boilerplate code and handles background updates and stale data.",
      "It improves UX by managing loading states and refetching logic automatically."
    ],
    "references": [],
    "slug": "what-is-react-query-used-for"
  },
  {
    "id": 418,
    "title": "Example of react-query usage?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Provide an example of using react-query.",
    "answer": [
      "Example:",
      "```js",
      "import { useQuery } from '@tanstack/react-query';",
      "",
      "function MyComponent() {",
      "  const { data, isLoading } = useQuery(['users'], () => fetch('/api/users').then(res => res.json()));",
      "  if (isLoading) return 'Loading...';",
      "  return <div>{data.length} users found</div>;",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-react-query-usage"
  },
  {
    "id": 419,
    "title": "What is React Hook rules checker?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is the purpose of the React Hook rules checker ESLint plugin?",
    "answer": [
      "The plugin enforces rules of hooks, ensuring hooks are only called at the top level and not inside loops or conditions.",
      "It prevents bugs related to incorrect hook usage.",
      "Itâ€™s strongly recommended in any React project using hooks."
    ],
    "references": [],
    "slug": "what-is-react-hook-rules-checker"
  },
  {
    "id": 420,
    "title": "What is PropTypes shape?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What does PropTypes.shape do in React?",
    "answer": [
      "`PropTypes.shape` validates that an object prop matches a specific structure.",
      "Example: PropTypes.shape({ name: PropTypes.string, age: PropTypes.number })",
      "Useful for checking nested object props in complex components."
    ],
    "references": [],
    "slug": "what-is-proptypes-shape"
  },
  {
    "id": 421,
    "title": "What are portals used for in accessibility?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "How do portals help with accessibility?",
    "answer": [
      "Portals ensure modals and overlays are rendered outside the main app hierarchy.",
      "This avoids issues with CSS overflow and z-index, improving keyboard navigation and screen reader usage.",
      "Helps comply with accessibility standards like ARIA."
    ],
    "references": [],
    "slug": "what-are-portals-used-for-in-accessibility"
  },
  {
    "id": 422,
    "title": "What is React Server Actions?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What are React Server Actions?",
    "answer": [
      "React Server Actions let you run functions on the server directly from React components.",
      "They help reduce client-side bundle size by avoiding API routes.",
      "Still experimental, they integrate tightly with Server Components in Next.js."
    ],
    "references": [],
    "slug": "what-is-react-server-actions"
  },
  {
    "id": 423,
    "title": "What is Suspense for Data Fetching?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is Suspense for data fetching in React?",
    "answer": [
      "Suspense for data fetching lets React wait for asynchronous data before rendering components.",
      "It simplifies async UI flows and removes the need for loading state management scattered throughout components.",
      "Itâ€™s part of Concurrent React and requires compatible data fetching libraries."
    ],
    "references": [],
    "slug": "what-is-suspense-for-data-fetching"
  },
  {
    "id": 424,
    "title": "What is useSyncExternalStore?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What does useSyncExternalStore do in React?",
    "answer": [
      "`useSyncExternalStore` is a hook for subscribing to external stores (like Redux or MobX) safely with concurrent rendering.",
      "It ensures consistent snapshots between server and client renders.",
      "Introduced in React 18."
    ],
    "references": [],
    "slug": "what-is-usesyncexternalstore"
  },
  {
    "id": 425,
    "title": "Example of useSyncExternalStore?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Provide an example of using useSyncExternalStore in React.",
    "answer": [
      "Example:",
      "```js",
      "import { useSyncExternalStore } from 'react';",
      "",
      "function useWindowWidth() {",
      "  return useSyncExternalStore(",
      "    (cb) => {",
      "      window.addEventListener('resize', cb);",
      "      return () => window.removeEventListener('resize', cb);",
      "    },",
      "    () => window.innerWidth",
      "  );",
      "}",
      "",
      "function Component() {",
      "  const width = useWindowWidth();",
      "  return <div>Width: {width}</div>;",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-usesyncexternalstore"
  },
  {
    "id": 426,
    "title": "What is useTransition?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What does useTransition do in React?",
    "answer": [
      "`useTransition` lets you mark updates as non-urgent, allowing React to prioritize rendering urgent updates first.",
      "It prevents slow renders from blocking interactive updates.",
      "Commonly used for filtering lists or updating large UI parts without freezing the app."
    ],
    "references": [],
    "slug": "what-is-usetransition"
  },
  {
    "id": 427,
    "title": "Example of useTransition?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Provide an example of using useTransition in React.",
    "answer": [
      "Example:",
      "```js",
      "import React, { useState, useTransition } from 'react';",
      "",
      "function Search() {",
      "  const [input, setInput] = useState('');",
      "  const [isPending, startTransition] = useTransition();",
      "",
      "  const handleChange = (e) => {",
      "    const value = e.target.value;",
      "    startTransition(() => {",
      "      setInput(value);",
      "    });",
      "  };",
      "",
      "  return (",
      "    <div>",
      "      <input value={input} onChange={handleChange} />",
      "      {isPending && <span>Loading...</span>}",
      "    </div>",
      "  );",
      "}",
      "```"
    ],
    "references": [],
    "slug": "example-of-usetransition"
  },
  {
    "id": 428,
    "title": "What are hydration errors?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "Why do hydration errors occur in React?",
    "answer": [
      "Hydration errors happen when server-rendered HTML differs from the React tree rendered on the client.",
      "They often result from non-deterministic content like random IDs or timestamps.",
      "Fixes include using consistent data and features like `useId` to sync markup."
    ],
    "references": [],
    "slug": "what-are-hydration-errors"
  },
  {
    "id": 429,
    "title": "What is createRoot in React 18?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is createRoot in React 18?",
    "answer": [
      "`createRoot` is the new way to render apps in React 18 for concurrent features.",
      "It replaces ReactDOM.render and enables features like transitions and Suspense.",
      "Example: `ReactDOM.createRoot(container).render(<App />)`."
    ],
    "references": [],
    "slug": "what-is-createroot-in-react-18"
  },
  {
    "id": 430,
    "title": "Difference between legacy root and concurrent root?",
    "category": "ReactJS",
    "difficulty": "Advanced",
    "question": "What is the difference between legacy root and concurrent root in React?",
    "answer": [
      "Legacy roots (ReactDOM.render) run updates synchronously and block rendering.",
      "Concurrent roots (createRoot) allow React to pause work and prioritize urgent updates.",
      "Concurrent roots are required for new React 18 features like startTransition."
    ],
    "references": [],
    "slug": "difference-between-legacy-root-and-concurrent-root"
  },
  {
    "id": 431,
    "title": "What is createPortal in React?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What does createPortal do in React?",
    "answer": [
      "`createPortal` lets you render React components into a DOM node outside the current hierarchy.",
      "Useful for modals, overlays, and tooltips.",
      "Syntax: `ReactDOM.createPortal(child, container)`."
    ],
    "references": [],
    "slug": "what-is-createportal-in-react"
  },
  {
    "id": 432,
    "title": "What is Suspense fallback?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What is a Suspense fallback in React?",
    "answer": [
      "A fallback is content displayed while waiting for lazy-loaded components or async data.",
      "It provides a smooth user experience instead of blank screens.",
      "Example: `<Suspense fallback={<Spinner />} />`."
    ],
    "references": [],
    "slug": "what-is-suspense-fallback"
  },
  {
    "id": 433,
    "title": "Why avoid using index as key?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Why should you avoid using array index as key in lists?",
    "answer": [
      "Using indexes as keys can cause rendering bugs when list items reorder or change.",
      "It leads to stale data being reused in the wrong places.",
      "Use stable, unique IDs whenever possible."
    ],
    "references": [],
    "slug": "why-avoid-using-index-as-key"
  },
  {
    "id": 434,
    "title": "What is the difference between component and element in React?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "Differentiate between a React component and a React element.",
    "answer": [
      "A React element is an object describing what you want to appear in the UI.",
      "A React component is a function or class that returns elements.",
      "Think of elements as 'instances' and components as 'blueprints'."
    ],
    "references": [],
    "slug": "what-is-the-difference-between-component-and-element-in-react"
  },
  {
    "id": 435,
    "title": "What are React synthetic events?",
    "category": "ReactJS",
    "difficulty": "Intermediate",
    "question": "What are synthetic events in React?",
    "answer": [
      "Synthetic events wrap native browser events with a consistent API across browsers.",
      "They provide pooling and performance optimizations.",
      "Examples: onClick, onChange, etc. behave uniformly in React's synthetic event system."
    ],
    "references": [],
    "slug": "what-are-react-synthetic-events"
  },
  {
    "id": 436,
    "title": "What is TypeScript, and how does it differ from JavaScript?",
    "category": "TypeScript",
    "difficulty": "Beginner",
    "question": "What is TypeScript, and how does it differ from JavaScript?",
    "answer": [
      "TypeScript is a superset of JavaScript that adds static typing and other features.",
      "It compiles down to plain JavaScript, so it can run anywhere JavaScript runs.",
      "Unlike JavaScript, TypeScript can catch errors at compile-time, improving code quality and maintainability."
    ],
    "references": [],
    "slug": "what-is-typescript-and-how-does-it-differ-from-javascript"
  },
  {
    "id": 437,
    "title": "What are the advantages of using TypeScript?",
    "category": "TypeScript",
    "difficulty": "Beginner",
    "question": "What are the advantages of using TypeScript?",
    "answer": [
      "Benefits of TypeScript include:",
      "- Static type checking",
      "- Better tooling and IDE support",
      "- Early detection of bugs",
      "- Improved code readability and maintainability",
      "- Powerful language features like interfaces, enums, and generics"
    ],
    "references": [],
    "slug": "what-are-the-advantages-of-using-typescript"
  },
  {
    "id": 438,
    "title": "How do you install TypeScript in a project?",
    "category": "TypeScript",
    "difficulty": "Beginner",
    "question": "How do you install TypeScript in a project?",
    "answer": [
      "You can install TypeScript globally:",
      "```bash",
      "npm install -g typescript",
      "```",
      "Or locally in a project:",
      "```bash",
      "npm install --save-dev typescript",
      "```"
    ],
    "references": [],
    "slug": "how-do-you-install-typescript-in-a-project"
  },
  {
    "id": 439,
    "title": "What is the difference between any and unknown in TypeScript?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What is the difference between any and unknown in TypeScript?",
    "answer": [
      "`any` disables type checking, allowing any operations on the variable.",
      "`unknown` is safer because you must perform type checks before using it.",
      "Example:",
      "```ts",
      "let value: unknown = 'hello';",
      "// Need type check",
      "if (typeof value === 'string') {",
      "  console.log(value.toUpperCase());",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-difference-between-any-and-unknown-in-typescript"
  },
  {
    "id": 440,
    "title": "What is an interface in TypeScript?",
    "category": "TypeScript",
    "difficulty": "Beginner",
    "question": "What is an interface in TypeScript?",
    "answer": [
      "An interface defines a contract for object shapes in TypeScript.",
      "It ensures that objects implement certain properties or methods.",
      "Example:",
      "```ts",
      "interface User {",
      "  name: string;",
      "  age: number;",
      "}",
      "const user: User = { name: 'Alice', age: 25 };",
      "```"
    ],
    "references": [],
    "slug": "what-is-an-interface-in-typescript"
  },
  {
    "id": 441,
    "title": "What is the difference between interface and type alias?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What is the difference between interface and type alias?",
    "answer": [
      "Both define object shapes but have differences:",
      "- Interfaces can be extended and merged (declaration merging).",
      "- Type aliases cannot merge, but can represent unions and primitives.",
      "Example:",
      "```ts",
      "interface A { x: number }",
      "type B = { y: number } | string;",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-difference-between-interface-and-type-alias"
  },
  {
    "id": 442,
    "title": "What are enums in TypeScript?",
    "category": "TypeScript",
    "difficulty": "Beginner",
    "question": "What are enums in TypeScript?",
    "answer": [
      "Enums define named constants to improve code readability.",
      "Example:",
      "```ts",
      "enum Color {",
      "  Red,",
      "  Green,",
      "  Blue",
      "}",
      "const c: Color = Color.Green;",
      "```"
    ],
    "references": [],
    "slug": "what-are-enums-in-typescript"
  },
  {
    "id": 443,
    "title": "What is a tuple in TypeScript?",
    "category": "TypeScript",
    "difficulty": "Beginner",
    "question": "What is a tuple in TypeScript?",
    "answer": [
      "A tuple is an array with a fixed number of elements of specific types.",
      "Example:",
      "```ts",
      "let tuple: [string, number];",
      "tuple = ['hello', 42];",
      "```"
    ],
    "references": [],
    "slug": "what-is-a-tuple-in-typescript"
  },
  {
    "id": 444,
    "title": "What is a union type?",
    "category": "TypeScript",
    "difficulty": "Beginner",
    "question": "What is a union type in TypeScript?",
    "answer": [
      "A union type allows a variable to hold values of multiple types.",
      "Example:",
      "```ts",
      "let value: string | number;",
      "value = 'hello';",
      "value = 42;",
      "```"
    ],
    "references": [],
    "slug": "what-is-a-union-type"
  },
  {
    "id": 445,
    "title": "What is an intersection type?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What is an intersection type in TypeScript?",
    "answer": [
      "Intersection types combine multiple types into one.",
      "An object of the intersection type must satisfy all included types.",
      "Example:",
      "```ts",
      "interface A { x: number; }",
      "interface B { y: string; }",
      "type C = A & B;",
      "const obj: C = { x: 5, y: 'hello' };",
      "```"
    ],
    "references": [],
    "slug": "what-is-an-intersection-type"
  },
  {
    "id": 446,
    "title": "What are generics in TypeScript?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What are generics in TypeScript?",
    "answer": [
      "Generics allow defining components or functions that work with any type.",
      "They provide flexibility while maintaining type safety.",
      "Example:",
      "```ts",
      "function identity<T>(value: T): T {",
      "  return value;",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-are-generics-in-typescript"
  },
  {
    "id": 447,
    "title": "Explain type assertions in TypeScript.",
    "category": "TypeScript",
    "difficulty": "Beginner",
    "question": "What are type assertions in TypeScript?",
    "answer": [
      "Type assertions tell TypeScript to treat a value as a specific type.",
      "Syntax options:",
      "```ts",
      "let someValue: any = 'hello';",
      "let strLength: number = (someValue as string).length;",
      "// or",
      "let strLength2: number = (<string>someValue).length;",
      "```"
    ],
    "references": [],
    "slug": "explain-type-assertions-in-typescript"
  },
  {
    "id": 448,
    "title": "What is a type guard?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What is a type guard in TypeScript?",
    "answer": [
      "Type guards help narrow the type of a variable within a conditional block.",
      "Example:",
      "```ts",
      "function print(value: string | number) {",
      "  if (typeof value === 'string') {",
      "    console.log(value.toUpperCase());",
      "  } else {",
      "    console.log(value.toFixed(2));",
      "  }",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-is-a-type-guard"
  },
  {
    "id": 449,
    "title": "What are utility types in TypeScript?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What are utility types in TypeScript?",
    "answer": [
      "Utility types transform other types for convenience.",
      "Examples include Partial, Readonly, Pick, Omit, and Record.",
      "Example:",
      "```ts",
      "interface User { name: string; age: number; }",
      "type PartialUser = Partial<User>;",
      "```"
    ],
    "references": [],
    "slug": "what-are-utility-types-in-typescript"
  },
  {
    "id": 450,
    "title": "What is the difference between == and === in TypeScript?",
    "category": "TypeScript",
    "difficulty": "Beginner",
    "question": "What is the difference between == and === in TypeScript?",
    "answer": [
      "`==` checks for equality with type coercion.",
      "`===` checks for strict equality without coercion.",
      "Example:",
      "```ts",
      "console.log(5 == '5'); // true",
      "console.log(5 === '5'); // false",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-difference-between-and-in-typescript"
  },
  {
    "id": 451,
    "title": "What is the never type in TypeScript?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What is the never type in TypeScript?",
    "answer": [
      "`never` represents values that never occur.",
      "Used for functions that always throw or infinite loops.",
      "Example:",
      "```ts",
      "function error(message: string): never {",
      "  throw new Error(message);",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-never-type-in-typescript"
  },
  {
    "id": 452,
    "title": "What are mapped types?",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What are mapped types in TypeScript?",
    "answer": [
      "Mapped types allow creating new types by transforming keys of existing types.",
      "Example:",
      "```ts",
      "type OptionsFlags<Type> = {",
      "  [Property in keyof Type]: boolean;",
      "};",
      "",
      "type Features = { darkMode: () => void; newUser: () => void; };",
      "type FeatureFlags = OptionsFlags<Features>;",
      "// FeatureFlags = { darkMode: boolean; newUser: boolean; }",
      "```"
    ],
    "references": [],
    "slug": "what-are-mapped-types"
  },
  {
    "id": 453,
    "title": "What is declaration merging?",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What is declaration merging in TypeScript?",
    "answer": [
      "Declaration merging allows multiple declarations with the same name to merge into a single entity.",
      "Common with interfaces or modules.",
      "Example:",
      "```ts",
      "interface User { name: string; }",
      "interface User { age: number; }",
      "// Merges to: { name: string; age: number; }",
      "```"
    ],
    "references": [],
    "slug": "what-is-declaration-merging"
  },
  {
    "id": 454,
    "title": "What are discriminated unions?",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What are discriminated unions in TypeScript?",
    "answer": [
      "Discriminated unions combine union types with a common literal property to simplify type narrowing.",
      "Example:",
      "```ts",
      "interface Circle { kind: 'circle'; radius: number; }",
      "interface Square { kind: 'square'; size: number; }",
      "type Shape = Circle | Square;",
      "",
      "function area(shape: Shape) {",
      "  switch (shape.kind) {",
      "    case 'circle': return Math.PI * shape.radius ** 2;",
      "    case 'square': return shape.size * shape.size;",
      "  }",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-are-discriminated-unions"
  },
  {
    "id": 455,
    "title": "What are ambient declarations in TypeScript?",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What are ambient declarations in TypeScript?",
    "answer": [
      "Ambient declarations declare types for code written elsewhere, often from external JavaScript libraries.",
      "Example:",
      "```ts",
      "declare var jQuery: any;",
      "jQuery('#id').hide();",
      "```",
      "Used in `.d.ts` files for third-party libraries."
    ],
    "references": [],
    "slug": "what-are-ambient-declarations-in-typescript"
  },
  {
    "id": 456,
    "title": "What is type compatibility in TypeScript?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What is type compatibility in TypeScript?",
    "answer": [
      "Type compatibility determines whether one type can be assigned to another.",
      "TypeScript uses structural typing, meaning types are compatible if their structures match.",
      "Example:",
      "```ts",
      "interface Point { x: number; y: number; }",
      "let p: Point = { x: 1, y: 2 };",
      "let q = { x: 1, y: 2, z: 3 };",
      "p = q; // OK because q has all properties of Point",
      "```"
    ],
    "references": [],
    "slug": "what-is-type-compatibility-in-typescript"
  },
  {
    "id": 457,
    "title": "How does TypeScript handle modules and namespaces?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "How does TypeScript handle modules and namespaces?",
    "answer": [
      "Namespaces group related code under a single name in the global scope.",
      "Modules export and import code between files using ES modules syntax.",
      "Modules are preferred for scalability and modern JavaScript compatibility.",
      "Example (Module):",
      "```ts",
      "// math.ts",
      "export function add(a: number, b: number) { return a + b; }",
      "// app.ts",
      "import { add } from './math';",
      "```"
    ],
    "references": [],
    "slug": "how-does-typescript-handle-modules-and-namespaces"
  },
  {
    "id": 458,
    "title": "What is the difference between declare and export keywords?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What is the difference between declare and export in TypeScript?",
    "answer": [
      "`declare` is used to describe the shape of code written elsewhere (like JS libraries).",
      "`export` makes a variable, function, or type accessible to other modules.",
      "Example:",
      "```ts",
      "declare var $: any;",
      "export function add(a: number, b: number) { return a + b; }",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-difference-between-declare-and-export-keywords"
  },
  {
    "id": 459,
    "title": "How do you migrate a JavaScript project to TypeScript?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "How do you migrate a JavaScript project to TypeScript?",
    "answer": [
      "Steps to migrate JS to TS:",
      "- Rename `.js` files to `.ts` or `.tsx`.",
      "- Enable strict compiler options gradually.",
      "- Add type definitions for third-party libraries.",
      "- Fix type errors incrementally.",
      "Use `allowJs` for gradual migration."
    ],
    "references": [],
    "slug": "how-do-you-migrate-a-javascript-project-to-typescript"
  },
  {
    "id": 460,
    "title": "What are the compiler options in tsconfig.json?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What are the compiler options in tsconfig.json?",
    "answer": [
      "`tsconfig.json` configures how TypeScript compiles your project.",
      "Important options include:",
      "- `target`: output JS version (ES5, ES6, etc.)",
      "- `module`: module system (commonjs, esnext)",
      "- `strict`: enables all strict checks",
      "- `outDir`: output directory for compiled files",
      "- `include` and `exclude` patterns for files"
    ],
    "references": [],
    "slug": "what-are-the-compiler-options-in-tsconfig-json"
  },
  {
    "id": 461,
    "title": "What is the purpose of strict mode in TypeScript?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What is strict mode in TypeScript?",
    "answer": [
      "Strict mode enables a group of compiler options that enforce stricter type checking.",
      "It includes:",
      "- strictNullChecks",
      "- strictBindCallApply",
      "- strictFunctionTypes",
      "- strictPropertyInitialization",
      "- noImplicitAny",
      "It improves code safety and catches more errors at compile time."
    ],
    "references": [],
    "slug": "what-is-the-purpose-of-strict-mode-in-typescript"
  },
  {
    "id": 462,
    "title": "What is structural typing?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What is structural typing in TypeScript?",
    "answer": [
      "Structural typing means compatibility is based on the shape of objects rather than explicit declarations.",
      "If two objects have the same structure, TypeScript considers them compatible.",
      "Example:",
      "```ts",
      "interface A { x: number }",
      "interface B { x: number }",
      "const a: A = { x: 5 };",
      "const b: B = a; // OK",
      "```"
    ],
    "references": [],
    "slug": "what-is-structural-typing"
  },
  {
    "id": 463,
    "title": "How does TypeScript support JSX and React?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "How does TypeScript support JSX and React?",
    "answer": [
      "TypeScript supports JSX syntax via `.tsx` files.",
      "Type definitions from `@types/react` provide typings for React components.",
      "React components use generic types for props and state.",
      "Example:",
      "```tsx",
      "interface Props { title: string }",
      "function Header({ title }: Props) {",
      "  return <h1>{title}</h1>;",
      "}",
      "```"
    ],
    "references": [],
    "slug": "how-does-typescript-support-jsx-and-react"
  },
  {
    "id": 464,
    "title": "How can you create and use custom types?",
    "category": "TypeScript",
    "difficulty": "Beginner",
    "question": "How can you create and use custom types in TypeScript?",
    "answer": [
      "Use the `type` keyword to define custom types.",
      "Example:",
      "```ts",
      "type UserID = string;",
      "let id: UserID = 'abc123';",
      "```",
      "Custom types improve readability and reuse."
    ],
    "references": [],
    "slug": "how-can-you-create-and-use-custom-types"
  },
  {
    "id": 465,
    "title": "How does TypeScript handle asynchronous code?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "How does TypeScript handle asynchronous code?",
    "answer": [
      "TypeScript supports Promises and async/await syntax.",
      "Async functions return a Promise, allowing typed results.",
      "Example:",
      "```ts",
      "async function fetchData(): Promise<string> {",
      "  return 'Data loaded';",
      "}",
      "```"
    ],
    "references": [],
    "slug": "how-does-typescript-handle-asynchronous-code"
  },
  {
    "id": 466,
    "title": "What is keyof in TypeScript?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What is keyof in TypeScript?",
    "answer": [
      "`keyof` creates a union of property names from a type.",
      "Example:",
      "```ts",
      "interface User { name: string; age: number; }",
      "type UserKeys = keyof User; // 'name' | 'age'",
      "```"
    ],
    "references": [],
    "slug": "what-is-keyof-in-typescript"
  },
  {
    "id": 467,
    "title": "What is typeof in TypeScript?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What is typeof in TypeScript?",
    "answer": [
      "`typeof` lets you get the type of a variable or object.",
      "Useful for creating types dynamically.",
      "Example:",
      "```ts",
      "const person = { name: 'Alice', age: 25 };",
      "type PersonType = typeof person;",
      "// PersonType = { name: string; age: number; }",
      "```"
    ],
    "references": [],
    "slug": "what-is-typeof-in-typescript"
  },
  {
    "id": 468,
    "title": "How does TypeScript interact with third-party JS libraries?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "How does TypeScript interact with third-party JavaScript libraries?",
    "answer": [
      "TypeScript uses type definition files (`.d.ts`) to describe external libraries.",
      "Install typings via:",
      "```bash",
      "npm install @types/library-name",
      "```",
      "If no types exist, use `declare` or `any` as a fallback."
    ],
    "references": [],
    "slug": "how-does-typescript-interact-with-third-party-js-libraries"
  },
  {
    "id": 469,
    "title": "How do you write a definition file for a JavaScript library?",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "How do you write a definition file for a JavaScript library?",
    "answer": [
      "Create a `.d.ts` file and declare types for library functions or objects.",
      "Example:",
      "```ts",
      "declare module 'mylib' {",
      "  export function greet(name: string): void;",
      "}",
      "```"
    ],
    "references": [],
    "slug": "how-do-you-write-a-definition-file-for-a-javascript-library"
  },
  {
    "id": 470,
    "title": "What is the difference between optional properties and undefined?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What is the difference between optional properties and undefined in TypeScript?",
    "answer": [
      "Optional properties may be absent entirely, while a defined property can explicitly hold `undefined`.",
      "Example:",
      "```ts",
      "interface A { x?: number }",
      "interface B { x: number | undefined }",
      "const a: A = {}; // OK",
      "const b: B = { x: undefined }; // x must exist but can be undefined",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-difference-between-optional-properties-and-undefined"
  },
  {
    "id": 471,
    "title": "What is the Partial utility type?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What does the Partial utility type do in TypeScript?",
    "answer": [
      "`Partial` makes all properties in a type optional.",
      "Example:",
      "```ts",
      "interface User { name: string; age: number }",
      "type PartialUser = Partial<User>;",
      "// Equivalent to: { name?: string; age?: number }",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-partial-utility-type"
  },
  {
    "id": 472,
    "title": "What is the Readonly utility type?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What does the Readonly utility type do in TypeScript?",
    "answer": [
      "`Readonly` makes all properties immutable.",
      "Example:",
      "```ts",
      "interface User { name: string; age: number }",
      "const user: Readonly<User> = { name: 'Alice', age: 25 };",
      "// user.age = 26; // Error: Cannot assign",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-readonly-utility-type"
  },
  {
    "id": 473,
    "title": "What is the Omit utility type?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What does the Omit utility type do in TypeScript?",
    "answer": [
      "`Omit` creates a new type by removing specific properties from an existing type.",
      "Example:",
      "```ts",
      "interface User { name: string; age: number; password: string; }",
      "type PublicUser = Omit<User, 'password'>;",
      "// PublicUser = { name: string; age: number; }",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-omit-utility-type"
  },
  {
    "id": 474,
    "title": "What is the Pick utility type?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What does the Pick utility type do in TypeScript?",
    "answer": [
      "`Pick` creates a new type by selecting specific properties from an existing type.",
      "Example:",
      "```ts",
      "interface User { name: string; age: number; email: string; }",
      "type BasicUser = Pick<User, 'name' | 'email'>;",
      "// BasicUser = { name: string; email: string }",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-pick-utility-type"
  },
  {
    "id": 475,
    "title": "What is the Record utility type?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What does the Record utility type do in TypeScript?",
    "answer": [
      "`Record` creates a type with a set of keys and a uniform value type.",
      "Example:",
      "```ts",
      "type Role = 'admin' | 'user';",
      "type Permissions = Record<Role, string[]>;",
      "// Permissions = { admin: string[]; user: string[]; }",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-record-utility-type"
  },
  {
    "id": 476,
    "title": "What is conditional types in TypeScript?",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What are conditional types in TypeScript?",
    "answer": [
      "Conditional types enable type expressions based on conditions.",
      "Syntax: `A extends B ? X : Y`.",
      "Example:",
      "```ts",
      "type Message<T> = T extends string ? 'string' : 'other';",
      "type A = Message<string>; // 'string'",
      "type B = Message<number>; // 'other'",
      "```"
    ],
    "references": [],
    "slug": "what-is-conditional-types-in-typescript"
  },
  {
    "id": 477,
    "title": "What is infer keyword in TypeScript?",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What does the infer keyword do in TypeScript?",
    "answer": [
      "`infer` lets you capture types in conditional types for reuse.",
      "Example:",
      "```ts",
      "type ReturnType<T> = T extends (...args: any[]) => infer R ? R : never;",
      "function hello() { return 'world'; }",
      "type Result = ReturnType<typeof hello>; // string",
      "```"
    ],
    "references": [],
    "slug": "what-is-infer-keyword-in-typescript"
  },
  {
    "id": 478,
    "title": "What is Exclude utility type?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What does the Exclude utility type do in TypeScript?",
    "answer": [
      "`Exclude` removes specific types from a union type.",
      "Example:",
      "```ts",
      "type T = 'a' | 'b' | 'c';",
      "type WithoutB = Exclude<T, 'b'>;",
      "// WithoutB = 'a' | 'c'",
      "```"
    ],
    "references": [],
    "slug": "what-is-exclude-utility-type"
  },
  {
    "id": 479,
    "title": "What is Extract utility type?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What does the Extract utility type do in TypeScript?",
    "answer": [
      "`Extract` picks specific types from a union.",
      "Example:",
      "```ts",
      "type T = 'a' | 'b' | 'c';",
      "type OnlyB = Extract<T, 'b'>;",
      "// OnlyB = 'b'",
      "```"
    ],
    "references": [],
    "slug": "what-is-extract-utility-type"
  },
  {
    "id": 480,
    "title": "What is NonNullable utility type?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What does NonNullable do in TypeScript?",
    "answer": [
      "`NonNullable` removes `null` and `undefined` from a type.",
      "Example:",
      "```ts",
      "type T = string | null | undefined;",
      "type NonNull = NonNullable<T>;",
      "// NonNull = string",
      "```"
    ],
    "references": [],
    "slug": "what-is-nonnullable-utility-type"
  },
  {
    "id": 481,
    "title": "What is ReturnType utility type?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What does ReturnType do in TypeScript?",
    "answer": [
      "`ReturnType` extracts the return type of a function.",
      "Example:",
      "```ts",
      "function greet(): string { return 'hello'; }",
      "type GreetReturn = ReturnType<typeof greet>;",
      "// GreetReturn = string",
      "```"
    ],
    "references": [],
    "slug": "what-is-returntype-utility-type"
  },
  {
    "id": 482,
    "title": "What is Parameters utility type?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What does Parameters do in TypeScript?",
    "answer": [
      "`Parameters` extracts a function's parameter types as a tuple.",
      "Example:",
      "```ts",
      "function greet(name: string, age: number) {}",
      "type Params = Parameters<typeof greet>;",
      "// Params = [string, number]",
      "```"
    ],
    "references": [],
    "slug": "what-is-parameters-utility-type"
  },
  {
    "id": 483,
    "title": "What is InstanceType utility type?",
    "category": "TypeScript",
    "difficulty": "Intermediate",
    "question": "What does InstanceType do in TypeScript?",
    "answer": [
      "`InstanceType` returns the type of instances created by a constructor function.",
      "Example:",
      "```ts",
      "class User { name = 'Alice'; }",
      "type UserInstance = InstanceType<typeof User>;",
      "// UserInstance = User",
      "```"
    ],
    "references": [],
    "slug": "what-is-instancetype-utility-type"
  },
  {
    "id": 484,
    "title": "What are ambient modules?",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What are ambient modules in TypeScript?",
    "answer": [
      "Ambient modules declare types for modules with no TypeScript code.",
      "Example:",
      "```ts",
      "declare module 'my-lib' {",
      "  export function greet(name: string): void;",
      "}",
      "```",
      "Used when integrating third-party libraries without type declarations."
    ],
    "references": [],
    "slug": "what-are-ambient-modules"
  },
  {
    "id": 485,
    "title": "What is module augmentation?",
    "category": "TypeScript",
    "difficulty": "Advanced",
    "question": "What is module augmentation in TypeScript?",
    "answer": [
      "Module augmentation extends existing modules with new types or declarations.",
      "Useful for adding types to libraries without modifying original files.",
      "Example:",
      "```ts",
      "declare module 'express' {",
      "  interface Request {",
      "    user?: string;",
      "  }",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-is-module-augmentation"
  },
  {
    "id": 486,
    "title": "What is Node.js and how does it work?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is Node.js and how does it work?",
    "answer": [
      "Node.js is an open-source, cross-platform JavaScript runtime built on Chrome's V8 engine.",
      "It executes JavaScript code outside a browser, enabling server-side development.",
      "Node.js uses an event-driven, non-blocking I/O model, which makes it highly efficient for handling multiple connections simultaneously."
    ],
    "references": [],
    "slug": "what-is-node-js-and-how-does-it-work"
  },
  {
    "id": 487,
    "title": "What is the role of package.json in Node.js?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is the role of package.json in Node.js?",
    "answer": [
      "`package.json` defines metadata about a Node.js project, including its name, version, scripts, and dependencies.",
      "It helps manage and share projects and allows easy installation of required packages via npm.",
      "Example:",
      "```json",
      "{",
      "  \"name\": \"my-app\",",
      "  \"version\": \"1.0.0\",",
      "  \"dependencies\": {",
      "    \"express\": \"^4.18.2\"",
      "  }",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-role-of-package-json-in-node-js"
  },
  {
    "id": 488,
    "title": "Difference between require and import in Node.js?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is the difference between require and import in Node.js?",
    "answer": [
      "`require` is the CommonJS syntax used in older Node.js versions.",
      "`import` is part of ES Modules (ESM) syntax and is the standard in modern JavaScript.",
      "`require` is synchronous, while `import` can be asynchronous.",
      "Example:",
      "```js",
      "// CommonJS",
      "const express = require('express');",
      "",
      "// ES Modules",
      "import express from 'express';",
      "```"
    ],
    "references": [],
    "slug": "difference-between-require-and-import-in-node-js"
  },
  {
    "id": 489,
    "title": "What is the global object in Node.js?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is the global object in Node.js?",
    "answer": [
      "In Node.js, the global object is `global`.",
      "It holds globally accessible variables and functions, similar to `window` in browsers.",
      "Example:",
      "```js",
      "global.myVar = 'Hello';",
      "console.log(global.myVar); // 'Hello'",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-global-object-in-node-js"
  },
  {
    "id": 490,
    "title": "What are buffers in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What are buffers in Node.js?",
    "answer": [
      "Buffers are raw memory allocations outside the V8 heap used for handling binary data.",
      "They are useful when dealing with streams, files, or network protocols.",
      "Example:",
      "```js",
      "const buf = Buffer.from('Hello');",
      "console.log(buf.toString()); // 'Hello'",
      "```"
    ],
    "references": [],
    "slug": "what-are-buffers-in-node-js"
  },
  {
    "id": 491,
    "title": "What is the event loop in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is the event loop in Node.js?",
    "answer": [
      "The event loop allows Node.js to perform non-blocking operations by handling I/O asynchronously.",
      "It continuously checks for pending tasks and executes callbacks accordingly.",
      "This makes Node.js single-threaded but capable of managing many connections efficiently."
    ],
    "references": [],
    "slug": "what-is-the-event-loop-in-node-js"
  },
  {
    "id": 492,
    "title": "Difference between process.nextTick() and setImmediate()?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is the difference between process.nextTick() and setImmediate() in Node.js?",
    "answer": [
      "`process.nextTick()` queues a callback to run after the current operation completes, before the event loop continues.",
      "`setImmediate()` schedules a callback to execute on the next iteration of the event loop.",
      "`nextTick` has higher priority and can delay I/O if used excessively."
    ],
    "references": [],
    "slug": "difference-between-process-nexttick-and-setimmediate"
  },
  {
    "id": 493,
    "title": "What is middleware in Express.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is middleware in Express.js?",
    "answer": [
      "Middleware functions are functions that process requests before sending responses in Express.js.",
      "They can execute code, modify requests/responses, or end request-response cycles.",
      "Example:",
      "```js",
      "app.use((req, res, next) => {",
      "  console.log('Request received');",
      "  next();",
      "});",
      "```"
    ],
    "references": [],
    "slug": "what-is-middleware-in-express-js-493"
  },
  {
    "id": 494,
    "title": "What is the difference between app.use() and app.get() in Express.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is the difference between app.use() and app.get() in Express.js?",
    "answer": [
      "`app.use()` registers middleware for all HTTP methods (GET, POST, etc.) or a specific path.",
      "`app.get()` handles only GET requests for a specific route.",
      "Example:",
      "```js",
      "app.use('/users', middlewareFunc);",
      "app.get('/users', handlerFunc);",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-difference-between-app-use-and-app-get-in-express-js"
  },
  {
    "id": 495,
    "title": "How does Node.js handle uncaught exceptions?",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "How does Node.js handle uncaught exceptions?",
    "answer": [
      "Node.js provides the `process.on('uncaughtException')` handler for capturing unhandled errors.",
      "However, using it is discouraged for app stability; it's better to handle errors properly.",
      "Example:",
      "```js",
      "process.on('uncaughtException', (err) => {",
      "  console.error('Unhandled error:', err);",
      "  process.exit(1);",
      "});",
      "```"
    ],
    "references": [],
    "slug": "how-does-node-js-handle-uncaught-exceptions"
  },
  {
    "id": 496,
    "title": "How do you handle file uploads in Express.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "How do you handle file uploads in Express.js?",
    "answer": [
      "Express.js handles file uploads using middleware like `multer`.",
      "Example:",
      "```js",
      "const multer = require('multer');",
      "const upload = multer({ dest: 'uploads/' });",
      "",
      "app.post('/upload', upload.single('file'), (req, res) => {",
      "  res.send('File uploaded');",
      "});",
      "```"
    ],
    "references": [],
    "slug": "how-do-you-handle-file-uploads-in-express-js"
  },
  {
    "id": 497,
    "title": "What is clustering in Node.js?",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What is clustering in Node.js?",
    "answer": [
      "Clustering allows Node.js to run multiple instances of an application across different CPU cores.",
      "This helps improve performance on multi-core systems.",
      "Example:",
      "```js",
      "const cluster = require('cluster');",
      "const http = require('http');",
      "if (cluster.isMaster) {",
      "  cluster.fork();",
      "} else {",
      "  http.createServer((req, res) => res.end('Hello')).listen(3000);",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-is-clustering-in-node-js"
  },
  {
    "id": 498,
    "title": "What are streams in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What are streams in Node.js?",
    "answer": [
      "Streams are objects that read or write data sequentially in chunks.",
      "They improve memory efficiency for handling large data sets.",
      "Types include Readable, Writable, Duplex, and Transform streams.",
      "Example:",
      "```js",
      "const fs = require('fs');",
      "fs.createReadStream('file.txt').pipe(process.stdout);",
      "```"
    ],
    "references": [],
    "slug": "what-are-streams-in-node-js-498"
  },
  {
    "id": 499,
    "title": "What is the purpose of npm?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is the purpose of npm in Node.js?",
    "answer": [
      "npm (Node Package Manager) manages packages for Node.js projects.",
      "It allows installing, updating, and publishing libraries.",
      "Example:",
      "```bash",
      "npm install express",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-purpose-of-npm"
  },
  {
    "id": 500,
    "title": "What is async/await in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is async/await in Node.js?",
    "answer": [
      "Async/await simplifies working with Promises in asynchronous code.",
      "`async` functions always return Promises.",
      "Example:",
      "```js",
      "async function getData() {",
      "  const result = await fetchData();",
      "  console.log(result);",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-is-async-await-in-node-js"
  },
  {
    "id": 501,
    "title": "What is the difference between synchronous and asynchronous code?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is the difference between synchronous and asynchronous code in Node.js?",
    "answer": [
      "Synchronous code executes line by line, blocking further execution until finished.",
      "Asynchronous code allows other operations to proceed without waiting.",
      "Node.js favors asynchronous code to handle many requests without blocking the event loop."
    ],
    "references": [],
    "slug": "what-is-the-difference-between-synchronous-and-asynchronous-code"
  },
  {
    "id": 502,
    "title": "Explain process.env in Node.js.",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is process.env in Node.js?",
    "answer": [
      "`process.env` stores environment variables in Node.js.",
      "Useful for configuration without hardcoding sensitive data.",
      "Example:",
      "```js",
      "console.log(process.env.NODE_ENV);",
      "```"
    ],
    "references": [],
    "slug": "explain-process-env-in-node-js"
  },
  {
    "id": 503,
    "title": "What is an HTTP module in Node.js?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is the HTTP module in Node.js?",
    "answer": [
      "The `http` module allows creating web servers and handling HTTP requests/responses.",
      "Example:",
      "```js",
      "const http = require('http');",
      "http.createServer((req, res) => {",
      "  res.write('Hello World');",
      "  res.end();",
      "}).listen(3000);",
      "```"
    ],
    "references": [],
    "slug": "what-is-an-http-module-in-node-js"
  },
  {
    "id": 504,
    "title": "What is the role of the fs module in Node.js?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is the role of the fs module in Node.js?",
    "answer": [
      "The `fs` module allows interacting with the file system.",
      "It provides methods for reading, writing, and modifying files.",
      "Example:",
      "```js",
      "const fs = require('fs');",
      "fs.readFile('file.txt', 'utf8', (err, data) => {",
      "  console.log(data);",
      "});",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-role-of-the-fs-module-in-node-js"
  },
  {
    "id": 505,
    "title": "What is EventEmitter in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is EventEmitter in Node.js?",
    "answer": [
      "`EventEmitter` is a core module allowing objects to emit and listen for events.",
      "Itâ€™s the foundation for many Node.js APIs.",
      "Example:",
      "```js",
      "const EventEmitter = require('events');",
      "const emitter = new EventEmitter();",
      "",
      "emitter.on('message', () => console.log('Hello World'));",
      "emitter.emit('message');",
      "```"
    ],
    "references": [],
    "slug": "what-is-eventemitter-in-node-js"
  },
  {
    "id": 506,
    "title": "What is the purpose of the util module in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is the purpose of the util module in Node.js?",
    "answer": [
      "The `util` module provides utility functions for developers.",
      "Examples include `util.promisify` for converting callback functions to Promises, and `util.inherits` for inheritance.",
      "Example:",
      "```js",
      "const util = require('util');",
      "const readFile = util.promisify(require('fs').readFile);",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-purpose-of-the-util-module-in-node-js"
  },
  {
    "id": 507,
    "title": "What is a child process in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is a child process in Node.js?",
    "answer": [
      "A child process allows executing external commands or scripts from a Node.js application.",
      "Node.js provides `child_process` for spawning new processes.",
      "Example:",
      "```js",
      "const { exec } = require('child_process');",
      "exec('ls', (error, stdout) => console.log(stdout));",
      "```"
    ],
    "references": [],
    "slug": "what-is-a-child-process-in-node-js"
  },
  {
    "id": 508,
    "title": "What is PM2 in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is PM2 in Node.js?",
    "answer": [
      "PM2 is a production process manager for Node.js applications.",
      "It manages processes, keeps apps running forever, supports load balancing, and logs monitoring.",
      "Example:",
      "```bash",
      "pm2 start app.js",
      "```"
    ],
    "references": [],
    "slug": "what-is-pm2-in-node-js"
  },
  {
    "id": 509,
    "title": "What is REPL in Node.js?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is REPL in Node.js?",
    "answer": [
      "REPL stands for Read-Eval-Print Loop.",
      "It's an interactive shell to execute Node.js code directly.",
      "Useful for testing small snippets or debugging.",
      "Start it via:",
      "```bash",
      "node",
      "```"
    ],
    "references": [],
    "slug": "what-is-repl-in-node-js-509"
  },
  {
    "id": 510,
    "title": "What is CORS in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is CORS in Node.js?",
    "answer": [
      "CORS (Cross-Origin Resource Sharing) allows browsers to permit requests to a domain different from the one serving the web page.",
      "Node.js servers use middleware like `cors` to enable or restrict cross-origin requests.",
      "Example:",
      "```js",
      "const cors = require('cors');",
      "app.use(cors());",
      "```"
    ],
    "references": [],
    "slug": "what-is-cors-in-node-js"
  },
  {
    "id": 511,
    "title": "What is JWT and how is it used in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is JWT and how is it used in Node.js?",
    "answer": [
      "JWT (JSON Web Token) is used for securely transmitting data between parties.",
      "Node.js apps use it for authentication and authorization.",
      "Example:",
      "```js",
      "const jwt = require('jsonwebtoken');",
      "const token = jwt.sign({ id: 1 }, 'secret');",
      "```"
    ],
    "references": [],
    "slug": "what-is-jwt-and-how-is-it-used-in-node-js"
  },
  {
    "id": 512,
    "title": "What is the difference between synchronous and asynchronous file read?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is the difference between synchronous and asynchronous file reading in Node.js?",
    "answer": [
      "Synchronous file reading blocks the event loop until the operation finishes.",
      "Asynchronous reading allows the event loop to continue while the file reads in the background.",
      "Example:",
      "```js",
      "const data = fs.readFileSync('file.txt'); // Sync",
      "fs.readFile('file.txt', (err, data) => {}); // Async",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-difference-between-synchronous-and-asynchronous-file-read"
  },
  {
    "id": 513,
    "title": "What are environment variables?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What are environment variables in Node.js?",
    "answer": [
      "Environment variables store configuration outside the codebase, like API keys or DB URLs.",
      "Accessible via `process.env` in Node.js.",
      "Example:",
      "```js",
      "console.log(process.env.NODE_ENV);",
      "```"
    ],
    "references": [],
    "slug": "what-are-environment-variables-513"
  },
  {
    "id": 514,
    "title": "How can you secure a Node.js application?",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "How can you secure a Node.js application?",
    "answer": [
      "Security best practices include:",
      "- Validating input data",
      "- Avoiding eval() and unsafe code execution",
      "- Using HTTPS",
      "- Setting HTTP headers with Helmet",
      "- Managing secrets properly",
      "- Preventing NoSQL injections"
    ],
    "references": [],
    "slug": "how-can-you-secure-a-node-js-application"
  },
  {
    "id": 515,
    "title": "What is middleware chaining in Express.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is middleware chaining in Express.js?",
    "answer": [
      "Middleware chaining allows multiple middleware functions to process a request in sequence.",
      "Each middleware calls `next()` to pass control to the next handler.",
      "Example:",
      "```js",
      "app.use((req, res, next) => {",
      "  console.log('First');",
      "  next();",
      "});",
      "app.use((req, res) => {",
      "  res.send('Done');",
      "});",
      "```"
    ],
    "references": [],
    "slug": "what-is-middleware-chaining-in-express-js-515"
  },
  {
    "id": 516,
    "title": "What is the crypto module in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is the crypto module in Node.js?",
    "answer": [
      "The `crypto` module provides cryptographic operations like hashing, encryption, and HMAC.",
      "Example:",
      "```js",
      "const crypto = require('crypto');",
      "const hash = crypto.createHash('sha256').update('data').digest('hex');",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-crypto-module-in-node-js"
  },
  {
    "id": 517,
    "title": "What is the difference between exports and module.exports?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is the difference between exports and module.exports in Node.js?",
    "answer": [
      "`exports` is a shorthand for `module.exports`.",
      "Assigning directly to `exports` breaks the link to `module.exports`.",
      "Best practice is to use `module.exports` when exporting a single entity.",
      "Example:",
      "```js",
      "module.exports = function() {};",
      "// NOT exports = function() {}; // breaks linkage",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-difference-between-exports-and-module-exports"
  },
  {
    "id": 518,
    "title": "What is process.exit()?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is process.exit() in Node.js?",
    "answer": [
      "`process.exit()` terminates the Node.js process immediately.",
      "An exit code can be provided (0 = success, non-zero = error).",
      "Example:",
      "```js",
      "process.exit(1);",
      "```"
    ],
    "references": [],
    "slug": "what-is-process-exit"
  },
  {
    "id": 519,
    "title": "What is Express.js?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is Express.js?",
    "answer": [
      "Express.js is a minimal web framework for Node.js.",
      "It simplifies building web applications and APIs.",
      "Features include routing, middleware support, and template rendering."
    ],
    "references": [],
    "slug": "what-is-express-js"
  },
  {
    "id": 520,
    "title": "What is a REST API?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is a REST API in the context of Node.js?",
    "answer": [
      "A REST API uses HTTP methods to perform CRUD operations on resources.",
      "Node.js commonly builds REST APIs with Express.js.",
      "Example endpoints:",
      "- GET /users",
      "- POST /users",
      "- PUT /users/:id",
      "- DELETE /users/:id"
    ],
    "references": [],
    "slug": "what-is-a-rest-api"
  },
  {
    "id": 521,
    "title": "What is an ORM?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is an ORM in Node.js development?",
    "answer": [
      "ORM stands for Object-Relational Mapping.",
      "It maps database tables to JavaScript objects.",
      "Popular Node.js ORMs include Sequelize, TypeORM, and Prisma.",
      "They simplify queries and migrations."
    ],
    "references": [],
    "slug": "what-is-an-orm"
  },
  {
    "id": 522,
    "title": "What is MongoDB and how is it used with Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is MongoDB and how is it used with Node.js?",
    "answer": [
      "MongoDB is a NoSQL database storing data as BSON documents.",
      "Node.js apps use drivers like `mongoose` to connect and interact with MongoDB.",
      "Example:",
      "```js",
      "const mongoose = require('mongoose');",
      "mongoose.connect('mongodb://localhost/test');",
      "```"
    ],
    "references": [],
    "slug": "what-is-mongodb-and-how-is-it-used-with-node-js"
  },
  {
    "id": 523,
    "title": "What is connection pooling?",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What is connection pooling in Node.js?",
    "answer": [
      "Connection pooling keeps multiple DB connections open for reuse.",
      "It improves performance by avoiding overhead of creating new connections for each request.",
      "Most Node.js libraries handle pooling automatically."
    ],
    "references": [],
    "slug": "what-is-connection-pooling"
  },
  {
    "id": 524,
    "title": "What is a memory leak in Node.js?",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What is a memory leak in Node.js?",
    "answer": [
      "A memory leak occurs when memory is allocated but never released.",
      "Causes include global variables, event listeners not removed, or caching too much data.",
      "It leads to increased memory usage and potential crashes over time."
    ],
    "references": [],
    "slug": "what-is-a-memory-leak-in-node-js"
  },
  {
    "id": 525,
    "title": "What is the role of cluster module in Node.js?",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What is the purpose of the cluster module in Node.js?",
    "answer": [
      "The cluster module enables running multiple Node.js processes to utilize multi-core systems.",
      "It distributes incoming requests across worker processes.",
      "Example:",
      "```js",
      "const cluster = require('cluster');",
      "if (cluster.isMaster) {",
      "  cluster.fork();",
      "} else {",
      "  console.log('Worker running');",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-role-of-cluster-module-in-node-js"
  },
  {
    "id": 526,
    "title": "What is socket.io in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is socket.io in Node.js?",
    "answer": [
      "socket.io is a library enabling real-time, bi-directional communication between client and server.",
      "It abstracts WebSocket and fallback transports like long-polling.",
      "Example:",
      "```js",
      "const io = require('socket.io')(3000);",
      "io.on('connection', (socket) => {",
      "  socket.on('message', (msg) => console.log(msg));",
      "});",
      "```"
    ],
    "references": [],
    "slug": "what-is-socket-io-in-node-js"
  },
  {
    "id": 527,
    "title": "How does streaming work in Node.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "How does streaming work in Node.js?",
    "answer": [
      "Streams read or write data piece by piece instead of loading entire data into memory.",
      "This improves performance for large files or data sources.",
      "Example:",
      "```js",
      "const fs = require('fs');",
      "const readStream = fs.createReadStream('file.txt');",
      "readStream.pipe(process.stdout);",
      "```"
    ],
    "references": [],
    "slug": "how-does-streaming-work-in-node-js"
  },
  {
    "id": 528,
    "title": "What is the purpose of the path module in Node.js?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is the purpose of the path module in Node.js?",
    "answer": [
      "The `path` module helps work with file and directory paths.",
      "It handles platform-specific path separators and manipulations.",
      "Example:",
      "```js",
      "const path = require('path');",
      "const fullPath = path.join(__dirname, 'file.txt');",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-purpose-of-the-path-module-in-node-js"
  },
  {
    "id": 529,
    "title": "How do you handle exceptions in asynchronous code?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "How do you handle exceptions in asynchronous code in Node.js?",
    "answer": [
      "In async/await, use try/catch blocks.",
      "In callbacks, check the `err` argument.",
      "Example:",
      "```js",
      "async function loadData() {",
      "  try {",
      "    const data = await fetchData();",
      "  } catch (err) {",
      "    console.error(err);",
      "  }",
      "}",
      "```"
    ],
    "references": [],
    "slug": "how-do-you-handle-exceptions-in-asynchronous-code"
  },
  {
    "id": 530,
    "title": "What is error-first callback?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is an error-first callback in Node.js?",
    "answer": [
      "An error-first callback has the first argument as an error object.",
      "If no error, itâ€™s null.",
      "Example:",
      "```js",
      "fs.readFile('file.txt', (err, data) => {",
      "  if (err) console.error(err);",
      "  else console.log(data);",
      "});",
      "```"
    ],
    "references": [],
    "slug": "what-is-error-first-callback-530"
  },
  {
    "id": 531,
    "title": "What is process object in Node.js?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is the process object in Node.js?",
    "answer": [
      "The `process` object provides information about the running Node.js process.",
      "Includes methods for exiting, reading env vars, etc.",
      "Example:",
      "```js",
      "console.log(process.pid);",
      "```"
    ],
    "references": [],
    "slug": "what-is-process-object-in-node-js-531"
  },
  {
    "id": 532,
    "title": "What is the purpose of domain module?",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What is the purpose of the domain module in Node.js?",
    "answer": [
      "The domain module handles multiple IO operations as a single group for error handling.",
      "However, it's deprecated in favor of try/catch and async error handling.",
      "Not recommended for new code."
    ],
    "references": [],
    "slug": "what-is-the-purpose-of-domain-module"
  },
  {
    "id": 533,
    "title": "What is middleware order importance in Express.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "Why is middleware order important in Express.js?",
    "answer": [
      "Middleware executes in the order defined in the code.",
      "Earlier middleware can modify request data, affecting downstream handlers.",
      "Incorrect order can cause security or logic errors."
    ],
    "references": [],
    "slug": "what-is-middleware-order-importance-in-express-js"
  },
  {
    "id": 534,
    "title": "How does cluster handle load balancing?",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "How does the cluster module handle load balancing in Node.js?",
    "answer": [
      "In Node.js v16+, cluster load balancing is handled by the OS kernelâ€™s scheduling.",
      "Older versions used a round-robin strategy.",
      "Cluster forks multiple workers sharing the same server port."
    ],
    "references": [],
    "slug": "how-does-cluster-handle-load-balancing"
  },
  {
    "id": 535,
    "title": "What is the EventEmitter pattern?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is the EventEmitter pattern in Node.js?",
    "answer": [
      "EventEmitter allows objects to emit named events.",
      "Listeners can subscribe to these events for asynchronous communication.",
      "Used in many Node.js core modules."
    ],
    "references": [],
    "slug": "what-is-the-eventemitter-pattern"
  },
  {
    "id": 536,
    "title": "What is the purpose of the assert module?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is the purpose of the assert module in Node.js?",
    "answer": [
      "The assert module provides simple assertion testing.",
      "Useful for writing unit tests or verifying conditions.",
      "Example:",
      "```js",
      "const assert = require('assert');",
      "assert.strictEqual(1 + 1, 2);",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-purpose-of-the-assert-module"
  },
  {
    "id": 537,
    "title": "How can you prevent callback hell?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "How can you prevent callback hell in Node.js?",
    "answer": [
      "Use techniques like:",
      "- Modularizing code into small functions",
      "- Promises",
      "- async/await syntax",
      "- Libraries like async.js",
      "These improve readability and maintainability."
    ],
    "references": [],
    "slug": "how-can-you-prevent-callback-hell"
  },
  {
    "id": 538,
    "title": "What is the purpose of helmet middleware?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is helmet middleware in Node.js?",
    "answer": [
      "Helmet helps secure Express apps by setting various HTTP headers.",
      "Protects against common vulnerabilities like XSS, clickjacking, etc.",
      "Example:",
      "```js",
      "const helmet = require('helmet');",
      "app.use(helmet());",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-purpose-of-helmet-middleware"
  },
  {
    "id": 539,
    "title": "What are HTTP status codes?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What are HTTP status codes and why are they important?",
    "answer": [
      "HTTP status codes indicate the result of HTTP requests.",
      "Examples:",
      "- 200 OK",
      "- 404 Not Found",
      "- 500 Internal Server Error",
      "They help clients understand responses from servers."
    ],
    "references": [],
    "slug": "what-are-http-status-codes"
  },
  {
    "id": 540,
    "title": "What is process.chdir()?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What does process.chdir() do in Node.js?",
    "answer": [
      "`process.chdir()` changes the current working directory of the Node.js process.",
      "Example:",
      "```js",
      "process.chdir('/tmp');",
      "console.log(process.cwd());",
      "```"
    ],
    "references": [],
    "slug": "what-is-process-chdir"
  },
  {
    "id": 541,
    "title": "What is the purpose of the zlib module?",
    "category": "Node.js",
    "difficulty": "Advanced",
    "question": "What is the purpose of the zlib module in Node.js?",
    "answer": [
      "zlib provides compression and decompression functionality.",
      "Useful for reducing response sizes in web applications.",
      "Example:",
      "```js",
      "const zlib = require('zlib');",
      "const gzip = zlib.createGzip();",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-purpose-of-the-zlib-module"
  },
  {
    "id": 542,
    "title": "How do you handle sessions in Express.js?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "How do you handle sessions in Express.js?",
    "answer": [
      "Use packages like `express-session` to manage sessions.",
      "Sessions track user data across multiple requests.",
      "Example:",
      "```js",
      "const session = require('express-session');",
      "app.use(session({ secret: 'secret', resave: false, saveUninitialized: true }));",
      "```"
    ],
    "references": [],
    "slug": "how-do-you-handle-sessions-in-express-js"
  },
  {
    "id": 543,
    "title": "What is rate limiting?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is rate limiting in Node.js?",
    "answer": [
      "Rate limiting restricts the number of requests a user can make to prevent abuse.",
      "Implemented using middleware like `express-rate-limit`.",
      "Example:",
      "```js",
      "const rateLimit = require('express-rate-limit');",
      "app.use(rateLimit({ windowMs: 15 * 60 * 1000, max: 100 }));",
      "```"
    ],
    "references": [],
    "slug": "what-is-rate-limiting"
  },
  {
    "id": 544,
    "title": "What is a virtual DOM?",
    "category": "Node.js",
    "difficulty": "Beginner",
    "question": "What is a virtual DOM?",
    "answer": [
      "Virtual DOM is a lightweight copy of the real DOM.",
      "Changes are calculated in memory and updated efficiently in the real DOM.",
      "Primarily used in frontend frameworks like React, but relevant when discussing full-stack apps with Node.js."
    ],
    "references": [],
    "slug": "what-is-a-virtual-dom"
  },
  {
    "id": 545,
    "title": "What is a transpiler?",
    "category": "Node.js",
    "difficulty": "Intermediate",
    "question": "What is a transpiler in the context of Node.js development?",
    "answer": [
      "A transpiler converts source code from one language version to another.",
      "Example: TypeScript to JavaScript or ES6 to ES5.",
      "Tools like Babel are used to ensure compatibility with older environments."
    ],
    "references": [],
    "slug": "what-is-a-transpiler"
  },
  {
    "id": 546,
    "title": "What is Next.js and why should we use it?",
    "category": "NextJS",
    "difficulty": "Beginner",
    "question": "What is Next.js and why should we use it?",
    "answer": [
      "Next.js is a React framework for building server-side rendered and statically generated web applications.",
      "It provides features like file-based routing, API routes, server-side rendering (SSR), static site generation (SSG), image optimization, and fast performance.",
      "It simplifies React development and improves SEO and page load times."
    ],
    "references": [],
    "slug": "what-is-next-js-and-why-should-we-use-it"
  },
  {
    "id": 547,
    "title": "Difference between Pages Router and App Router in Next.js?",
    "category": "NextJS",
    "difficulty": "Beginner",
    "question": "What is the difference between the Pages Router and App Router in Next.js?",
    "answer": [
      "Pages Router (older):",
      "- Uses the /pages directory.",
      "- Routing based on file structure.",
      "- Supports getStaticProps, getServerSideProps.",
      "",
      "App Router (Next.js 13+):",
      "- Uses the /app directory.",
      "- Built on React Server Components.",
      "- Introduces layouts and streaming rendering.",
      "- Supports server-side and client-side components seamlessly."
    ],
    "references": [],
    "slug": "difference-between-pages-router-and-app-router-in-next-js"
  },
  {
    "id": 548,
    "title": "What is getStaticProps in Next.js?",
    "category": "NextJS",
    "difficulty": "Beginner",
    "question": "Explain getStaticProps in Next.js.",
    "answer": [
      "`getStaticProps` lets you fetch data at build time.",
      "It generates static HTML pages, improving performance and SEO.",
      "Example:",
      "```js",
      "export async function getStaticProps() {",
      "  const data = await fetch('https://api.example.com/posts');",
      "  return {",
      "    props: { posts: data },",
      "  };",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-is-getstaticprops-in-next-js"
  },
  {
    "id": 549,
    "title": "What is getServerSideProps?",
    "category": "NextJS",
    "difficulty": "Beginner",
    "question": "What is getServerSideProps in Next.js?",
    "answer": [
      "`getServerSideProps` runs on every request on the server.",
      "It fetches dynamic data, ideal for personalized content.",
      "Example:",
      "```js",
      "export async function getServerSideProps() {",
      "  const res = await fetch('https://api.example.com/data');",
      "  const data = await res.json();",
      "  return { props: { data } };",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-is-getserversideprops"
  },
  {
    "id": 550,
    "title": "What is Incremental Static Regeneration (ISR)?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is Incremental Static Regeneration (ISR) in Next.js?",
    "answer": [
      "ISR enables static pages to be updated after deployment.",
      "Pages are regenerated in the background at runtime based on a revalidate interval.",
      "This provides the benefits of static generation with fresh data.",
      "Example:",
      "```js",
      "export async function getStaticProps() {",
      "  return {",
      "    props: {},",
      "    revalidate: 60,",
      "  };",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-is-incremental-static-regeneration-isr"
  },
  {
    "id": 551,
    "title": "What is getInitialProps?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is getInitialProps in Next.js?",
    "answer": [
      "`getInitialProps` was the older data-fetching method used on both server and client sides.",
      "Itâ€™s now considered legacy, replaced by getStaticProps and getServerSideProps for better performance and clarity.",
      "It causes pages to be server-side rendered by default."
    ],
    "references": [],
    "slug": "what-is-getinitialprops-551"
  },
  {
    "id": 552,
    "title": "How do you create dynamic routes in Next.js?",
    "category": "NextJS",
    "difficulty": "Beginner",
    "question": "How do you create dynamic routes in Next.js?",
    "answer": [
      "Dynamic routes are created using square brackets in the file name.",
      "Example: pages/posts/[id].js handles routes like /posts/1.",
      "Use `getStaticPaths` for static generation of dynamic pages.",
      "Example:",
      "```js",
      "export async function getStaticPaths() {",
      "  return {",
      "    paths: [ { params: { id: '1' } } ],",
      "    fallback: false,",
      "  };",
      "}",
      "```"
    ],
    "references": [],
    "slug": "how-do-you-create-dynamic-routes-in-next-js"
  },
  {
    "id": 553,
    "title": "What is getStaticPaths?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "Explain getStaticPaths in Next.js.",
    "answer": [
      "`getStaticPaths` generates a list of paths that should be statically built at build time.",
      "It works with `getStaticProps` for dynamic routes.",
      "Example:",
      "```js",
      "export async function getStaticPaths() {",
      "  const posts = await fetchPosts();",
      "  const paths = posts.map(post => ({ params: { id: post.id } }));",
      "  return { paths, fallback: false };",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-is-getstaticpaths"
  },
  {
    "id": 554,
    "title": "What are API routes in Next.js?",
    "category": "NextJS",
    "difficulty": "Beginner",
    "question": "What are API routes in Next.js?",
    "answer": [
      "API routes allow you to create backend endpoints inside the Next.js project.",
      "They reside in the /pages/api folder.",
      "Example:",
      "```js",
      "// pages/api/hello.js",
      "export default function handler(req, res) {",
      "  res.status(200).json({ message: 'Hello World' });",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-are-api-routes-in-next-js"
  },
  {
    "id": 555,
    "title": "How do you handle redirects in Next.js?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "How do you handle redirects in Next.js?",
    "answer": [
      "Next.js supports redirects in next.config.js.",
      "Example:",
      "```js",
      "module.exports = {",
      "  async redirects() {",
      "    return [",
      "      {",
      "        source: '/old-page',",
      "        destination: '/new-page',",
      "        permanent: true,",
      "      },",
      "    ];",
      "  },",
      "};",
      "```"
    ],
    "references": [],
    "slug": "how-do-you-handle-redirects-in-next-js"
  },
  {
    "id": 556,
    "title": "What is fallback in getStaticPaths?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What does fallback mean in getStaticPaths?",
    "answer": [
      "The fallback option controls how Next.js handles dynamic paths not returned during build time.",
      "- false â†’ only paths returned at build time exist; others show 404.",
      "- true â†’ other paths generate on-demand and show a fallback UI.",
      "- 'blocking' â†’ waits for the page to be generated on the server without fallback UI."
    ],
    "references": [],
    "slug": "what-is-fallback-in-getstaticpaths"
  },
  {
    "id": 557,
    "title": "What is image optimization in Next.js?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "Explain image optimization in Next.js.",
    "answer": [
      "Next.js automatically optimizes images for faster loading.",
      "The `next/image` component handles resizing, formats, and lazy loading.",
      "Example:",
      "```js",
      "import Image from 'next/image';",
      "<Image src=\"/logo.png\" width={200} height={200} />",
      "```"
    ],
    "references": [],
    "slug": "what-is-image-optimization-in-next-js"
  },
  {
    "id": 558,
    "title": "Difference between SSR and SSG?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is the difference between SSR and SSG in Next.js?",
    "answer": [
      "- SSR (Server-Side Rendering):",
      "  - HTML generated on each request.",
      "  - Dynamic but slower for high traffic.",
      "- SSG (Static Site Generation):",
      "  - HTML generated at build time.",
      "  - Fast performance but data is static until rebuilt."
    ],
    "references": [],
    "slug": "difference-between-ssr-and-ssg"
  },
  {
    "id": 559,
    "title": "What is Middleware in Next.js?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is Middleware in Next.js?",
    "answer": [
      "Middleware lets you run code before a request completes.",
      "It can redirect, rewrite URLs, or block requests.",
      "Available in Next.js 12+.",
      "Example:",
      "```js",
      "// middleware.js",
      "export function middleware(req) {",
      "  console.log('Middleware executed');",
      "  return NextResponse.next();",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-is-middleware-in-next-js"
  },
  {
    "id": 560,
    "title": "How do you handle environment variables in Next.js?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "How do you handle environment variables in Next.js?",
    "answer": [
      "Environment variables go in `.env` files.",
      "Variables starting with NEXT_PUBLIC_ are accessible on the client side.",
      "Example:",
      "```env",
      "NEXT_PUBLIC_API_URL=https://api.example.com",
      "```",
      "Access it in code:",
      "```js",
      "process.env.NEXT_PUBLIC_API_URL;",
      "```"
    ],
    "references": [],
    "slug": "how-do-you-handle-environment-variables-in-next-js"
  },
  {
    "id": 561,
    "title": "What is static export?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is static export in Next.js?",
    "answer": [
      "Static export generates a fully static site.",
      "Run `next export` to output HTML/CSS/JS without a server.",
      "Limitations include no SSR or dynamic routes depending on runtime data."
    ],
    "references": [],
    "slug": "what-is-static-export"
  },
  {
    "id": 562,
    "title": "How does Link component work?",
    "category": "NextJS",
    "difficulty": "Beginner",
    "question": "How does the Link component work in Next.js?",
    "answer": [
      "Next.js `Link` provides client-side navigation between pages.",
      "It prefetches linked pages for fast transitions.",
      "Example:",
      "```js",
      "import Link from 'next/link';",
      "<Link href=\"/about\">About</Link>",
      "```"
    ],
    "references": [],
    "slug": "how-does-link-component-work"
  },
  {
    "id": 563,
    "title": "What is the Head component?",
    "category": "NextJS",
    "difficulty": "Beginner",
    "question": "What is the Head component in Next.js?",
    "answer": [
      "The `Head` component lets you modify the HTML <head> for a page.",
      "Useful for setting title, meta tags, and SEO data.",
      "Example:",
      "```js",
      "import Head from 'next/head';",
      "<Head>",
      "  <title>My Page</title>",
      "</Head>",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-head-component"
  },
  {
    "id": 564,
    "title": "How do you deploy a Next.js app?",
    "category": "NextJS",
    "difficulty": "Beginner",
    "question": "How do you deploy a Next.js app?",
    "answer": [
      "Popular deployment options include:",
      "- Vercel (official platform)",
      "- Netlify",
      "- AWS, Azure, GCP",
      "- Docker containers",
      "Build the app and deploy the `.next` build directory or export static files if using static export."
    ],
    "references": [],
    "slug": "how-do-you-deploy-a-next-js-app"
  },
  {
    "id": 565,
    "title": "What is next.config.js?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is next.config.js in Next.js?",
    "answer": [
      "`next.config.js` customizes Next.js behavior.",
      "Examples include custom webpack settings, redirects, rewrites, environment variables, and image domains.",
      "Example:",
      "```js",
      "module.exports = {",
      "  images: { domains: ['example.com'] },",
      "};",
      "```"
    ],
    "references": [],
    "slug": "what-is-next-config-js"
  },
  {
    "id": 566,
    "title": "What are rewrites in Next.js?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What are rewrites in Next.js?",
    "answer": [
      "Rewrites map a request path to a different destination path without changing the URL seen by the user.",
      "Useful for proxying or hiding internal routes.",
      "Example:",
      "```js",
      "module.exports = {",
      "  async rewrites() {",
      "    return [",
      "      { source: '/blog', destination: '/news' },",
      "    ];",
      "  },",
      "};",
      "```"
    ],
    "references": [],
    "slug": "what-are-rewrites-in-next-js"
  },
  {
    "id": 567,
    "title": "What are redirects in Next.js?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What are redirects in Next.js?",
    "answer": [
      "Redirects automatically send users from one URL to another.",
      "They can be permanent (301) or temporary (302).",
      "Example:",
      "```js",
      "module.exports = {",
      "  async redirects() {",
      "    return [",
      "      { source: '/old', destination: '/new', permanent: true },",
      "    ];",
      "  },",
      "};",
      "```"
    ],
    "references": [],
    "slug": "what-are-redirects-in-next-js"
  },
  {
    "id": 568,
    "title": "Explain ISR fallback: true",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "What happens when fallback is set to true in ISR?",
    "answer": [
      "When fallback is true, new pages not generated at build time render a fallback page.",
      "Next.js builds the page in the background and updates the static page after the first request.",
      "Useful for large numbers of dynamic pages."
    ],
    "references": [],
    "slug": "explain-isr-fallback-true"
  },
  {
    "id": 569,
    "title": "What is middleware matching in Next.js?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "What is middleware matching in Next.js?",
    "answer": [
      "Middleware matching determines which routes your middleware applies to.",
      "You can configure matchers to target specific paths or patterns.",
      "Example:",
      "```js",
      "export const config = {",
      "  matcher: ['/dashboard/:path*'],",
      "};",
      "```"
    ],
    "references": [],
    "slug": "what-is-middleware-matching-in-next-js"
  },
  {
    "id": 570,
    "title": "What is React Server Components?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "What are React Server Components in Next.js?",
    "answer": [
      "React Server Components run exclusively on the server.",
      "They allow rendering UI without sending unnecessary JavaScript to the client.",
      "Introduced with Next.js 13's App Router for improved performance.",
      "Example usage:",
      "```js",
      "// app/page.js",
      "export default async function Page() {",
      "  const data = await fetchData();",
      "  return <div>{data}</div>;",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-is-react-server-components"
  },
  {
    "id": 571,
    "title": "What are Edge Functions?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "What are Edge Functions in Next.js?",
    "answer": [
      "Edge Functions run at the CDN edge rather than a central server.",
      "They execute faster and closer to users geographically.",
      "Good for auth, redirects, personalization, and low-latency logic."
    ],
    "references": [],
    "slug": "what-are-edge-functions"
  },
  {
    "id": 572,
    "title": "Explain Dynamic Imports in Next.js.",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "How do Dynamic Imports work in Next.js?",
    "answer": [
      "Dynamic Imports load modules only when needed.",
      "Reduce initial bundle size and improve performance.",
      "Example:",
      "```js",
      "import dynamic from 'next/dynamic';",
      "const DynamicComponent = dynamic(() => import('../components/Heavy'));",
      "```"
    ],
    "references": [],
    "slug": "explain-dynamic-imports-in-next-js"
  },
  {
    "id": 573,
    "title": "How do you prefetch routes in Next.js?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "How does route prefetching work in Next.js?",
    "answer": [
      "Next.js automatically prefetches linked pages with `<Link />`.",
      "You can manually prefetch using `router.prefetch()`.",
      "Example:",
      "```js",
      "import { useRouter } from 'next/router';",
      "const router = useRouter();",
      "router.prefetch('/about');",
      "```"
    ],
    "references": [],
    "slug": "how-do-you-prefetch-routes-in-next-js"
  },
  {
    "id": 574,
    "title": "What is next/head used for?",
    "category": "NextJS",
    "difficulty": "Beginner",
    "question": "What is the purpose of next/head?",
    "answer": [
      "`next/head` allows you to modify the HTML `<head>`.",
      "Useful for adding meta tags, title, and SEO info.",
      "Example:",
      "```js",
      "import Head from 'next/head';",
      "<Head><title>My Page</title></Head>",
      "```"
    ],
    "references": [],
    "slug": "what-is-next-head-used-for"
  },
  {
    "id": 575,
    "title": "What is fast refresh in Next.js?",
    "category": "NextJS",
    "difficulty": "Beginner",
    "question": "What is fast refresh in Next.js?",
    "answer": [
      "Fast Refresh reloads components instantly during development.",
      "Preserves component state where possible.",
      "Improves developer productivity and speeds up debugging."
    ],
    "references": [],
    "slug": "what-is-fast-refresh-in-next-js"
  },
  {
    "id": 576,
    "title": "What is the _document.js file?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is _document.js in Next.js?",
    "answer": [
      "_document.js customizes the entire HTML document structure.",
      "Useful for adding scripts or modifying <html> and <body> tags.",
      "Example:",
      "```js",
      "import Document, { Html, Head, Main, NextScript } from 'next/document';",
      "export default class MyDocument extends Document {",
      "  render() {",
      "    return (",
      "      <Html>",
      "        <Head />",
      "        <body>",
      "          <Main />",
      "          <NextScript />",
      "        </body>",
      "      </Html>",
      "    );",
      "  }",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-is-the-document-js-file"
  },
  {
    "id": 577,
    "title": "What is _app.js?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is the purpose of _app.js in Next.js?",
    "answer": [
      "_app.js overrides the default App component.",
      "Useful for persistent layouts, global styles, or wrapping pages in providers.",
      "Example:",
      "```js",
      "function MyApp({ Component, pageProps }) {",
      "  return <Component {...pageProps} />;",
      "}",
      "export default MyApp;",
      "```"
    ],
    "references": [],
    "slug": "what-is-app-js"
  },
  {
    "id": 578,
    "title": "What is custom 404 page in Next.js?",
    "category": "NextJS",
    "difficulty": "Beginner",
    "question": "How do you create a custom 404 page in Next.js?",
    "answer": [
      "Create a file named `pages/404.js`.",
      "Next.js automatically shows it for unknown routes.",
      "Example:",
      "```js",
      "export default function Custom404() {",
      "  return <h1>Page Not Found</h1>;",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-is-custom-404-page-in-next-js"
  },
  {
    "id": 579,
    "title": "What is Suspense in Next.js?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "What is Suspense in Next.js?",
    "answer": [
      "Suspense lets you wait for asynchronous operations before rendering.",
      "With React Server Components, Suspense can stream page sections separately.",
      "Example:",
      "```js",
      "import { Suspense } from 'react';",
      "<Suspense fallback={<div>Loading...</div>}>",
      "  <MyComponent />",
      "</Suspense>",
      "```"
    ],
    "references": [],
    "slug": "what-is-suspense-in-next-js"
  },
  {
    "id": 580,
    "title": "What are Layouts in Next.js App Router?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What are Layouts in the Next.js App Router?",
    "answer": [
      "Layouts in App Router provide consistent UI across multiple routes.",
      "Defined in layout.js files at any route level.",
      "They allow nested layouts for complex UI structures.",
      "Example:",
      "```js",
      "// app/layout.js",
      "export default function RootLayout({ children }) {",
      "  return (",
      "    <html><body>{children}</body></html>",
      "  );",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-are-layouts-in-next-js-app-router"
  },
  {
    "id": 581,
    "title": "How do you fetch data in App Router?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "How do you fetch data in the Next.js App Router?",
    "answer": [
      "Data fetching in App Router can be done using async server components or `fetch()` directly in components.",
      "Example:",
      "```js",
      "// app/page.js",
      "export default async function Page() {",
      "  const res = await fetch('https://api.example.com/data');",
      "  const data = await res.json();",
      "  return <div>{data.message}</div>;",
      "}",
      "```"
    ],
    "references": [],
    "slug": "how-do-you-fetch-data-in-app-router"
  },
  {
    "id": 582,
    "title": "How does next/image optimize images?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "How does next/image optimize images?",
    "answer": [
      "next/image automatically serves images in modern formats (like WebP).",
      "It provides resizing, lazy-loading, and responsive images.",
      "It reduces bandwidth and speeds up page loads."
    ],
    "references": [],
    "slug": "how-does-next-image-optimize-images"
  },
  {
    "id": 583,
    "title": "What is Preview Mode?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "What is Preview Mode in Next.js?",
    "answer": [
      "Preview Mode allows previewing draft content without publishing it live.",
      "It sets preview cookies for fetching unpublished data.",
      "Example API route to enable preview:",
      "```js",
      "export default function handler(req, res) {",
      "  res.setPreviewData({});",
      "  res.redirect('/');",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-is-preview-mode"
  },
  {
    "id": 584,
    "title": "What are static props caching headers?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "What are caching headers for static props in Next.js?",
    "answer": [
      "Static pages can have cache-control headers for long-term caching.",
      "Example header:",
      "`Cache-Control: public, max-age=31536000, immutable`.",
      "Useful for CDN caching and performance."
    ],
    "references": [],
    "slug": "what-are-static-props-caching-headers"
  },
  {
    "id": 585,
    "title": "What is App Directory Routing?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is App Directory Routing in Next.js?",
    "answer": [
      "Introduced in Next.js 13, the App Directory defines routing based on the `/app` folder.",
      "Supports React Server Components, nested layouts, and streaming.",
      "Replaces older `/pages` router for advanced use cases."
    ],
    "references": [],
    "slug": "what-is-app-directory-routing"
  },
  {
    "id": 586,
    "title": "What is shallow routing in Next.js?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is shallow routing in Next.js?",
    "answer": [
      "Shallow routing updates the URL without running data fetching methods again.",
      "Useful for client-side transitions that donâ€™t need new data.",
      "Example:",
      "```js",
      "import { useRouter } from 'next/router';",
      "const router = useRouter();",
      "router.push('/about?name=John', undefined, { shallow: true });",
      "```"
    ],
    "references": [],
    "slug": "what-is-shallow-routing-in-next-js"
  },
  {
    "id": 587,
    "title": "How does next/link prefetching work?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "How does prefetching work with next/link?",
    "answer": [
      "next/link automatically prefetches pages in the background when a link appears in the viewport.",
      "Improves performance for future navigations.",
      "Can be disabled with `prefetch={false}`."
    ],
    "references": [],
    "slug": "how-does-next-link-prefetching-work"
  },
  {
    "id": 588,
    "title": "What is fallback: 'blocking' in getStaticPaths?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "What does fallback: 'blocking' mean in Next.js?",
    "answer": [
      "With fallback: 'blocking', the server waits to generate the page before sending it to the user.",
      "No loading state is shown; users see the full page on the first request.",
      "Best for SEO or pages requiring full data before display."
    ],
    "references": [],
    "slug": "what-is-fallback-blocking-in-getstaticpaths"
  },
  {
    "id": 589,
    "title": "How do you handle 500 errors in Next.js?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "How do you create a custom 500 error page in Next.js?",
    "answer": [
      "Create a file named `pages/500.js`.",
      "Next.js uses it when a server-side error occurs.",
      "Example:",
      "```js",
      "export default function Custom500() {",
      "  return <h1>Server Error</h1>;",
      "}",
      "```"
    ],
    "references": [],
    "slug": "how-do-you-handle-500-errors-in-next-js"
  },
  {
    "id": 590,
    "title": "What are cookies in Next.js middleware?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "How do cookies work in Next.js middleware?",
    "answer": [
      "Middleware can read or set cookies for requests.",
      "Useful for authentication, redirects, or experiments.",
      "Example:",
      "```js",
      "import { NextResponse } from 'next/server';",
      "export function middleware(req) {",
      "  const res = NextResponse.next();",
      "  res.cookies.set('token', 'abc123');",
      "  return res;",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-are-cookies-in-next-js-middleware"
  },
  {
    "id": 591,
    "title": "Explain static site generation with revalidate",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "How does revalidate work with static site generation?",
    "answer": [
      "The `revalidate` option in `getStaticProps` defines how often a page should be regenerated.",
      "Enables Incremental Static Regeneration (ISR).",
      "Example:",
      "```js",
      "export async function getStaticProps() {",
      "  return {",
      "    props: {},",
      "    revalidate: 10,",
      "  };",
      "}",
      "```"
    ],
    "references": [],
    "slug": "explain-static-site-generation-with-revalidate"
  },
  {
    "id": 592,
    "title": "What are rewrites vs redirects?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "Whatâ€™s the difference between rewrites and redirects in Next.js?",
    "answer": [
      "- **Redirects** change the URL in the browser.",
      "- **Rewrites** keep the URL visible but fetch a different route behind the scenes.",
      "Use rewrites for proxying APIs or hiding internal routes."
    ],
    "references": [],
    "slug": "what-are-rewrites-vs-redirects"
  },
  {
    "id": 593,
    "title": "How does next/script optimize script loading?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "How does next/script optimize script loading?",
    "answer": [
      "`next/script` allows controlling how external scripts load:",
      "- `strategy='beforeInteractive'` â†’ load before page interactive.",
      "- `strategy='lazyOnload'` â†’ load after page load.",
      "Improves performance over plain <script> tags.",
      "Example:",
      "```js",
      "import Script from 'next/script';",
      "<Script src=\"https://example.com.js\" strategy=\"lazyOnload\" />",
      "```"
    ],
    "references": [],
    "slug": "how-does-next-script-optimize-script-loading"
  },
  {
    "id": 594,
    "title": "How does Next.js support internationalization?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "How does Next.js support internationalization (i18n)?",
    "answer": [
      "Configure i18n in next.config.js.",
      "Next.js automatically generates locale-based routes.",
      "Example:",
      "```js",
      "module.exports = {",
      "  i18n: {",
      "    locales: ['en', 'fr'],",
      "    defaultLocale: 'en',",
      "  },",
      "};",
      "```"
    ],
    "references": [],
    "slug": "how-does-next-js-support-internationalization"
  },
  {
    "id": 595,
    "title": "What is streaming in Next.js?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "What is streaming in Next.js?",
    "answer": [
      "Streaming allows sending parts of the HTML as theyâ€™re rendered.",
      "Improves time-to-first-byte (TTFB).",
      "Enabled in the App Router with React Server Components.",
      "Example:",
      "```js",
      "export default async function Page() {",
      "  return <p>Streaming data...</p>;",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-is-streaming-in-next-js"
  },
  {
    "id": 596,
    "title": "What are static and dynamic routes?",
    "category": "NextJS",
    "difficulty": "Beginner",
    "question": "Whatâ€™s the difference between static and dynamic routes in Next.js?",
    "answer": [
      "- **Static routes:** fixed URLs like `/about` or `/contact`.",
      "- **Dynamic routes:** use brackets for parameters, e.g., `[id].js`.",
      "Dynamic routes support dynamic segments in the URL."
    ],
    "references": [],
    "slug": "what-are-static-and-dynamic-routes"
  },
  {
    "id": 597,
    "title": "How does Next.js handle CSS?",
    "category": "NextJS",
    "difficulty": "Beginner",
    "question": "How does Next.js handle CSS?",
    "answer": [
      "Next.js supports:",
      "- Global CSS in `_app.js`.",
      "- CSS Modules for component-scoped styles.",
      "- Sass support.",
      "Example of CSS Modules:",
      "```js",
      "import styles from './button.module.css';",
      "<button className={styles.primary}>Click</button>",
      "```"
    ],
    "references": [],
    "slug": "how-does-next-js-handle-css"
  },
  {
    "id": 598,
    "title": "What is next/dynamic used for?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is next/dynamic used for?",
    "answer": [
      "`next/dynamic` dynamically imports components on demand.",
      "Reduces initial bundle size and improves load times.",
      "Example:",
      "```js",
      "import dynamic from 'next/dynamic';",
      "const Heavy = dynamic(() => import('../components/Heavy'));",
      "```"
    ],
    "references": [],
    "slug": "what-is-next-dynamic-used-for"
  },
  {
    "id": 599,
    "title": "What is Hybrid Rendering?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is Hybrid Rendering in Next.js?",
    "answer": [
      "Hybrid Rendering mixes SSR, SSG, and client-side rendering within the same app.",
      "Allows flexibility based on page requirements.",
      "A page can be static while another is dynamic."
    ],
    "references": [],
    "slug": "what-is-hybrid-rendering"
  },
  {
    "id": 600,
    "title": "How do you secure API routes?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "How can you secure API routes in Next.js?",
    "answer": [
      "Secure API routes by:",
      "- Checking authentication tokens.",
      "- Using middleware for authorization.",
      "- Validating incoming requests.",
      "Example:",
      "```js",
      "export default function handler(req, res) {",
      "  if (req.headers.authorization !== 'token') {",
      "    return res.status(401).json({ error: 'Unauthorized' });",
      "  }",
      "  res.status(200).json({ data: 'Secret' });",
      "}",
      "```"
    ],
    "references": [],
    "slug": "how-do-you-secure-api-routes"
  },
  {
    "id": 601,
    "title": "What is the difference between getInitialProps and getServerSideProps?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "Difference between getInitialProps and getServerSideProps in Next.js?",
    "answer": [
      "- `getInitialProps` runs on client and server, adds bundle size.",
      "- `getServerSideProps` runs only on the server.",
      "getInitialProps is older and generally replaced with getServerSideProps for better performance."
    ],
    "references": [],
    "slug": "what-is-the-difference-between-getinitialprops-and-getserversideprops"
  },
  {
    "id": 602,
    "title": "How does fallback true differ from blocking?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "Whatâ€™s the difference between fallback true and fallback blocking?",
    "answer": [
      "- **fallback: true** â†’ page shows fallback content while building.",
      "- **fallback: 'blocking'** â†’ user waits for HTML before seeing the page.",
      "Blocking avoids blank states but may delay response."
    ],
    "references": [],
    "slug": "how-does-fallback-true-differ-from-blocking"
  },
  {
    "id": 603,
    "title": "What is SSR caching?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "How does caching work for SSR pages in Next.js?",
    "answer": [
      "SSR pages can set Cache-Control headers to define how long content should be cached.",
      "Helps reduce server load and improve speed.",
      "Example header:",
      "`Cache-Control: public, s-maxage=60, stale-while-revalidate=30`."
    ],
    "references": [],
    "slug": "what-is-ssr-caching"
  },
  {
    "id": 604,
    "title": "What is the difference between /public and /static?",
    "category": "NextJS",
    "difficulty": "Beginner",
    "question": "Difference between /public and /static folders in Next.js?",
    "answer": [
      "- **/public** â†’ accessible at the root URL (e.g. /images/logo.png).",
      "- **/static** is deprecated.",
      "Always use /public for static assets in modern Next.js."
    ],
    "references": [],
    "slug": "what-is-the-difference-between-public-and-static"
  },
  {
    "id": 605,
    "title": "What is runtime configuration?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "What is runtime configuration in Next.js?",
    "answer": [
      "Runtime configuration allows setting environment variables that can differ between server and client.",
      "Set using `publicRuntimeConfig` or `serverRuntimeConfig` in next.config.js.",
      "Example:",
      "```js",
      "module.exports = {",
      "  publicRuntimeConfig: { apiUrl: 'https://api.example.com' },",
      "};",
      "```"
    ],
    "references": [],
    "slug": "what-is-runtime-configuration"
  },
  {
    "id": 606,
    "title": "What is Next.js Image Optimization API?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is the Next.js Image Optimization API?",
    "answer": [
      "Next.js optimizes images on demand via its built-in Image Optimization API.",
      "It serves resized and modern format images, reducing bandwidth.",
      "Accessible through the next/image component or directly via API routes."
    ],
    "references": [],
    "slug": "what-is-next-js-image-optimization-api"
  },
  {
    "id": 607,
    "title": "How do you add custom headers in Next.js?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "How do you add custom HTTP headers in Next.js?",
    "answer": [
      "Custom headers can be configured in `next.config.js`.",
      "Example:",
      "```js",
      "module.exports = {",
      "  async headers() {",
      "    return [",
      "      {",
      "        source: '/about',",
      "        headers: [",
      "          { key: 'X-Custom-Header', value: 'MyValue' },",
      "        ],",
      "      },",
      "    ];",
      "  },",
      "};",
      "```"
    ],
    "references": [],
    "slug": "how-do-you-add-custom-headers-in-next-js"
  },
  {
    "id": 608,
    "title": "What is ISR on-demand revalidation?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "What is on-demand revalidation in ISR?",
    "answer": [
      "On-demand revalidation lets you manually trigger regeneration of static pages.",
      "Used when content changes outside of the revalidate interval.",
      "Example API route:",
      "```js",
      "export default async function handler(req, res) {",
      "  await res.revalidate('/path');",
      "  res.json({ revalidated: true });",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-is-isr-on-demand-revalidation"
  },
  {
    "id": 609,
    "title": "What is next export?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What does next export do in Next.js?",
    "answer": [
      "`next export` creates a fully static export of the site.",
      "Generates HTML, CSS, and JS files without needing a Node.js server.",
      "Great for hosting on static platforms like GitHub Pages."
    ],
    "references": [],
    "slug": "what-is-next-export"
  },
  {
    "id": 610,
    "title": "What are fonts optimization in Next.js?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "How does Next.js optimize fonts?",
    "answer": [
      "Next.js optimizes fonts by automatically loading Google Fonts.",
      "Reduces layout shift and improves Core Web Vitals.",
      "Example with next/font:",
      "```js",
      "import { Inter } from 'next/font/google';",
      "const inter = Inter({ subsets: ['latin'] });",
      "```"
    ],
    "references": [],
    "slug": "what-are-fonts-optimization-in-next-js"
  },
  {
    "id": 611,
    "title": "What is a catch-all route?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is a catch-all route in Next.js?",
    "answer": [
      "A catch-all route captures all paths after a certain segment.",
      "Defined using `[...param].js`.",
      "Example:",
      "```js",
      "// pages/docs/[...slug].js",
      "export default function Page({ params }) {",
      "  return <div>{params.slug.join('/')}</div>;",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-is-a-catch-all-route"
  },
  {
    "id": 612,
    "title": "What is optional catch-all route?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is an optional catch-all route in Next.js?",
    "answer": [
      "Optional catch-all routes match both the base path and nested paths.",
      "Defined as `[[...param]].js`.",
      "Example:",
      "```js",
      "// pages/blog/[[...slug]].js",
      "```",
      "This matches /blog and /blog/post/title."
    ],
    "references": [],
    "slug": "what-is-optional-catch-all-route"
  },
  {
    "id": 613,
    "title": "What is Next.js 13 Turbopack?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "What is Turbopack in Next.js 13?",
    "answer": [
      "Turbopack is Next.jsâ€™s new bundler, replacing Webpack for faster builds.",
      "Written in Rust for speed.",
      "Significantly improves performance for large projects during development."
    ],
    "references": [],
    "slug": "what-is-next-js-13-turbopack"
  },
  {
    "id": 614,
    "title": "What is next/font?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is next/font in Next.js?",
    "answer": [
      "`next/font` offers automatic font optimization.",
      "Supports local fonts or Google Fonts with zero layout shift.",
      "Replaces traditional external font loading."
    ],
    "references": [],
    "slug": "what-is-next-font"
  },
  {
    "id": 615,
    "title": "How does error handling work in App Router?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "How does error handling work in Next.js App Router?",
    "answer": [
      "App Router uses `error.js` files to handle errors at route levels.",
      "Errors in server components automatically render the nearest `error.js` layout.",
      "Example:",
      "```js",
      "// app/error.js",
      "export default function Error() {",
      "  return <div>Something went wrong</div>;",
      "}",
      "```"
    ],
    "references": [],
    "slug": "how-does-error-handling-work-in-app-router"
  },
  {
    "id": 616,
    "title": "What is layout.js in App Router?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "What is layout.js in Next.js App Router?",
    "answer": [
      "`layout.js` defines UI shared across pages under a route segment.",
      "Helps build nested layouts without code repetition.",
      "Example:",
      "```js",
      "export default function Layout({ children }) {",
      "  return <div>{children}</div>;",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-is-layout-js-in-app-router"
  },
  {
    "id": 617,
    "title": "What is suspense boundary in Next.js?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "What is a Suspense boundary in Next.js?",
    "answer": [
      "A Suspense boundary controls fallback UI for components waiting for data.",
      "Renders fallback content until async operations complete.",
      "Useful with React Server Components.",
      "Example:",
      "```js",
      "import { Suspense } from 'react';",
      "<Suspense fallback={<p>Loading...</p>}>",
      "  <Component />",
      "</Suspense>",
      "```"
    ],
    "references": [],
    "slug": "what-is-suspense-boundary-in-next-js"
  },
  {
    "id": 618,
    "title": "What is Parallel Routes in Next.js?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "What are Parallel Routes in Next.js?",
    "answer": [
      "Parallel Routes allow rendering multiple route segments side by side.",
      "Useful for building complex UIs like sidebars with independent content.",
      "Introduced in App Router in Next.js 13."
    ],
    "references": [],
    "slug": "what-is-parallel-routes-in-next-js"
  },
  {
    "id": 619,
    "title": "What is Interception Routes in Next.js?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "What are Interception Routes in Next.js?",
    "answer": [
      "Interception Routes override existing routes under specific conditions.",
      "Used for modals, side panels, or nested views.",
      "Allows customizing parts of a layout without changing the URL structure."
    ],
    "references": [],
    "slug": "what-is-interception-routes-in-next-js"
  },
  {
    "id": 620,
    "title": "What is Server Actions in Next.js?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "What are Server Actions in Next.js?",
    "answer": [
      "Server Actions run server-side logic directly from React components.",
      "Avoids client-side JavaScript for actions like DB writes.",
      "Part of experimental features in Next.js 13+."
    ],
    "references": [],
    "slug": "what-is-server-actions-in-next-js"
  },
  {
    "id": 621,
    "title": "What is app/api in Next.js App Router?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "What is app/api in Next.js App Router?",
    "answer": [
      "`app/api` replaces the traditional `pages/api`.",
      "API routes are colocated with app folders for better structure.",
      "Example:",
      "```js",
      "// app/api/route.js",
      "export async function GET() {",
      "  return Response.json({ message: 'Hello' });",
      "}",
      "```"
    ],
    "references": [],
    "slug": "what-is-app-api-in-next-js-app-router"
  },
  {
    "id": 622,
    "title": "How does next/navigation differ from next/router?",
    "category": "NextJS",
    "difficulty": "Intermediate",
    "question": "How does next/navigation differ from next/router?",
    "answer": [
      "`next/navigation` is used in App Router for navigation.",
      "Offers hooks like useRouter, usePathname, and useSearchParams for client and server contexts.",
      "Replaces next/router in the new routing paradigm."
    ],
    "references": [],
    "slug": "how-does-next-navigation-differ-from-next-router"
  },
  {
    "id": 623,
    "title": "What are View Transitions in Next.js?",
    "category": "NextJS",
    "difficulty": "Advanced",
    "question": "What are View Transitions in Next.js?",
    "answer": [
      "View Transitions enable smooth UI animations between pages.",
      "Enhance UX by preventing abrupt page changes.",
      "Part of experimental Next.js 13+ features."
    ],
    "references": [],
    "slug": "what-are-view-transitions-in-next-js"
  },
  {
    "id": 624,
    "title": "What is a database?",
    "category": "Database",
    "difficulty": "Beginner",
    "question": "What is a database?",
    "answer": [
      "A database is an organized collection of structured information or data, typically stored electronically in a computer system.",
      "A database is managed by a database management system (DBMS)."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-a-database"
  },
  {
    "id": 625,
    "title": "What is SQL?",
    "category": "Database",
    "difficulty": "Beginner",
    "question": "What is SQL?",
    "answer": [
      "SQL stands for Structured Query Language.",
      "It is a standard language for storing, manipulating, and retrieving data in relational databases."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-sql"
  },
  {
    "id": 626,
    "title": "What is NoSQL?",
    "category": "Database",
    "difficulty": "Beginner",
    "question": "What is NoSQL?",
    "answer": [
      "NoSQL stands for 'Not Only SQL'.",
      "It refers to a broad class of databases that are non-relational and can store structured, semi-structured, or unstructured data.",
      "Examples include document stores (MongoDB), key-value stores (Redis), wide-column stores (Cassandra), and graph databases (Neo4j)."
    ],
    "interview_tip": "Mention that NoSQL databases are designed for scalability and flexibility.",
    "references": [],
    "slug": "what-is-nosql"
  },
  {
    "id": 627,
    "title": "What is the difference between SQL and NoSQL databases?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is the difference between SQL and NoSQL databases?",
    "answer": [
      "SQL databases are relational, table-based, and use structured query language for defining and manipulating data.",
      "NoSQL databases are non-relational, can be document, key-value, graph, or wide-column stores, and are designed for unstructured data.",
      "SQL databases are best for complex queries and transactions, while NoSQL is better for scalability and flexible data models."
    ],
    "interview_tip": "Mention examples: MySQL, PostgreSQL (SQL); MongoDB, Redis (NoSQL).",
    "references": [],
    "slug": "what-is-the-difference-between-sql-and-nosql-databases"
  },
  {
    "id": 628,
    "title": "What is normalization? Why is it important?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is normalization? Why is it important?",
    "answer": [
      "Normalization is the process of organizing data in a database to reduce redundancy and improve data integrity.",
      "It involves dividing large tables into smaller ones and defining relationships between them.",
      "It helps eliminate duplicate data and ensures logical data storage."
    ],
    "interview_tip": "Mention normal forms (1NF, 2NF, 3NF, BCNF) if asked for details.",
    "references": [],
    "slug": "what-is-normalization-why-is-it-important"
  },
  {
    "id": 629,
    "title": "What is a primary key?",
    "category": "Database",
    "difficulty": "Beginner",
    "question": "What is a primary key?",
    "answer": [
      "A primary key is a column or a set of columns that uniquely identifies each row in a table.",
      "It cannot have NULL values and must contain unique values."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-a-primary-key"
  },
  {
    "id": 630,
    "title": "What is a foreign key?",
    "category": "Database",
    "difficulty": "Beginner",
    "question": "What is a foreign key?",
    "answer": [
      "A foreign key is a column or set of columns in one table that refers to the primary key in another table.",
      "It is used to establish and enforce a link between the data in two tables."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-a-foreign-key"
  },
  {
    "id": 631,
    "title": "What is an index? Why is it used?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is an index? Why is it used?",
    "answer": [
      "An index is a database object that improves the speed of data retrieval operations on a table at the cost of additional space and slower writes.",
      "Indexes are created on columns that are frequently used in WHERE clauses or as JOIN conditions."
    ],
    "interview_tip": "Mention that too many indexes can slow down write operations.",
    "references": [],
    "slug": "what-is-an-index-why-is-it-used"
  },
  {
    "id": 632,
    "title": "What is a JOIN? Name its types.",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a JOIN? Name its types.",
    "answer": [
      "A JOIN clause is used to combine rows from two or more tables based on a related column.",
      "Types of JOINs: INNER JOIN, LEFT JOIN (LEFT OUTER JOIN), RIGHT JOIN (RIGHT OUTER JOIN), FULL JOIN (FULL OUTER JOIN), CROSS JOIN."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-a-join-name-its-types"
  },
  {
    "id": 633,
    "title": "What is denormalization?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is denormalization?",
    "answer": [
      "Denormalization is the process of combining tables to reduce the number of joins and improve read performance.",
      "It introduces redundancy for the sake of faster queries."
    ],
    "interview_tip": "Used in data warehousing and analytics.",
    "references": [],
    "slug": "what-is-denormalization"
  },
  {
    "id": 634,
    "title": "What is ACID property in databases?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is ACID property in databases?",
    "answer": [
      "ACID stands for Atomicity, Consistency, Isolation, and Durability.",
      "These properties ensure reliable processing of database transactions."
    ],
    "interview_tip": "Be ready to explain each property if asked.",
    "references": [],
    "slug": "what-is-acid-property-in-databases"
  },
  {
    "id": 635,
    "title": "What is a transaction?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a transaction?",
    "answer": [
      "A transaction is a sequence of one or more SQL operations treated as a single logical unit of work.",
      "A transaction must be completed in its entirety or not at all (all-or-nothing)."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-a-transaction"
  },
  {
    "id": 636,
    "title": "What is a document store database?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a document store database?",
    "answer": [
      "A document store is a type of NoSQL database that stores data as documents, typically in JSON or BSON format.",
      "Examples include MongoDB and CouchDB."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-a-document-store-database"
  },
  {
    "id": 637,
    "title": "What is sharding?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is sharding?",
    "answer": [
      "Sharding is a database architecture pattern in which data is horizontally partitioned across multiple servers or nodes.",
      "It is used to improve scalability and performance for large datasets."
    ],
    "interview_tip": "Common in NoSQL databases like MongoDB.",
    "references": [],
    "slug": "what-is-sharding"
  },
  {
    "id": 638,
    "title": "What is a stored procedure?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a stored procedure?",
    "answer": [
      "A stored procedure is a precompiled collection of SQL statements stored in the database.",
      "It can be executed as a program to perform a specific task, such as data validation or complex calculations."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-a-stored-procedure"
  },
  {
    "id": 639,
    "title": "What is a view in SQL?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a view in SQL?",
    "answer": [
      "A view is a virtual table based on the result of a SQL query.",
      "It does not store data itself but provides a way to look at data from one or more tables."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-a-view-in-sql"
  },
  {
    "id": 640,
    "title": "Write a SQL query to find the second highest salary from an Employee table.",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "Write a SQL query to find the second highest salary from an Employee table.",
    "answer": [
      "SELECT MAX(salary) FROM Employee WHERE salary < (SELECT MAX(salary) FROM Employee);"
    ],
    "interview_tip": "Be ready to explain alternative approaches using LIMIT, OFFSET, or ROW_NUMBER().",
    "references": [],
    "slug": "write-a-sql-query-to-find-the-second-highest-salary-from-an-employee-table"
  },
  {
    "id": 641,
    "title": "How does MongoDB store data?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "How does MongoDB store data?",
    "answer": [
      "MongoDB stores data in flexible, JSON-like documents (BSON).",
      "Collections in MongoDB are analogous to tables in relational databases."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "how-does-mongodb-store-data"
  },
  {
    "id": 642,
    "title": "What is aggregation in MongoDB?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is aggregation in MongoDB?",
    "answer": [
      "Aggregation is a way of processing a large number of documents in a collection by means of passing them through different stages.",
      "The most common aggregation method is the aggregation pipeline, which allows for filtering, grouping, and transforming data."
    ],
    "interview_tip": "Mention stages like $match, $group, $sort, $project, etc.",
    "references": [],
    "slug": "what-is-aggregation-in-mongodb"
  },
  {
    "id": 643,
    "title": "What is a transaction in MongoDB?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a transaction in MongoDB?",
    "answer": [
      "A transaction in MongoDB is a sequence of operations that are executed as a single unit of work, ensuring ACID properties.",
      "MongoDB supports multi-document transactions since version 4.0."
    ],
    "interview_tip": null,
    "references": [],
    "slug": "what-is-a-transaction-in-mongodb"
  },
  {
    "id": 644,
    "title": "What is a composite key in SQL?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a composite key in SQL?",
    "answer": [
      "A composite key is a combination of two or more columns in a table that together uniquely identify a row.",
      "None of the individual columns can uniquely identify the row on their own."
    ],
    "interview_tip": "Used when no single column is unique enough.",
    "references": [],
    "slug": "what-is-a-composite-key-in-sql"
  },
  {
    "id": 645,
    "title": "Explain the difference between clustered and non-clustered indexes.",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "Explain the difference between clustered and non-clustered indexes.",
    "answer": [
      "A clustered index determines the physical order of data in a table. Each table can have only one clustered index.",
      "A non-clustered index is a separate structure from the data table and can be multiple per table. It contains a pointer to the data location."
    ],
    "interview_tip": "In SQL Server, the primary key is clustered by default.",
    "references": [],
    "slug": "explain-the-difference-between-clustered-and-non-clustered-indexes"
  },
  {
    "id": 646,
    "title": "What is a materialized view?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a materialized view?",
    "answer": [
      "A materialized view is a database object that contains the results of a query and stores them physically.",
      "Unlike a regular view, it does not compute results on the fly but refreshes periodically or on demand."
    ],
    "interview_tip": "Used for performance optimization in reporting and analytics.",
    "references": [],
    "slug": "what-is-a-materialized-view"
  },
  {
    "id": 647,
    "title": "What is eventual consistency in distributed databases?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is eventual consistency in distributed databases?",
    "answer": [
      "Eventual consistency is a consistency model used in distributed systems where updates to a database will propagate and all replicas will become consistent over time.",
      "It is commonly used in NoSQL and cloud databases for high availability and partition tolerance."
    ],
    "interview_tip": "Contrast with strong consistency (e.g., in traditional RDBMS).",
    "references": [],
    "slug": "what-is-eventual-consistency-in-distributed-databases"
  },
  {
    "id": 648,
    "title": "What is a deadlock in a database? How can it be prevented?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a deadlock in a database? How can it be prevented?",
    "answer": [
      "A deadlock occurs when two or more transactions block each other by holding locks on resources the others need.",
      "Prevention techniques include lock timeout, deadlock detection algorithms, and ensuring transactions acquire locks in a consistent order."
    ],
    "interview_tip": "Be ready to explain deadlock detection vs. prevention.",
    "references": [],
    "slug": "what-is-a-deadlock-in-a-database-how-can-it-be-prevented"
  },
  {
    "id": 649,
    "title": "What is the difference between DELETE, TRUNCATE, and DROP in SQL?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is the difference between DELETE, TRUNCATE, and DROP in SQL?",
    "answer": [
      "DELETE removes rows from a table based on a condition and can be rolled back.",
      "TRUNCATE removes all rows from a table, cannot be rolled back in some DBMS, and resets identity counters.",
      "DROP removes the entire table structure from the database."
    ],
    "interview_tip": "TRUNCATE is faster than DELETE but less flexible.",
    "references": [],
    "slug": "what-is-the-difference-between-delete-truncate-and-drop-in-sql"
  },
  {
    "id": 650,
    "title": "What is a JSONB column in PostgreSQL?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a JSONB column in PostgreSQL?",
    "answer": [
      "JSONB is a binary JSON data type in PostgreSQL that allows efficient storage and querying of JSON data.",
      "It supports indexing and is more efficient than the plain JSON type for most operations."
    ],
    "interview_tip": "Useful for semi-structured data in relational databases.",
    "references": [],
    "slug": "what-is-a-jsonb-column-in-postgresql"
  },
  {
    "id": 651,
    "title": "Explain CAP theorem in the context of distributed databases.",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "Explain CAP theorem in the context of distributed databases.",
    "answer": [
      "CAP theorem states that a distributed database can only guarantee two out of three: Consistency, Availability, and Partition Tolerance.",
      "Design choices depend on which two are prioritized for a given use case."
    ],
    "interview_tip": "NoSQL databases often choose AP or CP.",
    "references": [],
    "slug": "explain-cap-theorem-in-the-context-of-distributed-databases"
  },
  {
    "id": 652,
    "title": "What is a Redis cache and how is it used with databases?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a Redis cache and how is it used with databases?",
    "answer": [
      "Redis is an in-memory key-value store often used as a cache to speed up database-driven applications.",
      "It stores frequently accessed data in memory, reducing the load on the primary database."
    ],
    "interview_tip": "Mention cache invalidation strategies.",
    "references": [],
    "slug": "what-is-a-redis-cache-and-how-is-it-used-with-databases"
  },
  {
    "id": 653,
    "title": "What is a database migration?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database migration?",
    "answer": [
      "A database migration is the process of changing the database schema, such as adding tables or columns, in a controlled and versioned way.",
      "Tools like Flyway, Liquibase, and Sequelize help manage migrations."
    ],
    "interview_tip": "Essential for CI/CD and agile development.",
    "references": [],
    "slug": "what-is-a-database-migration"
  },
  {
    "id": 654,
    "title": "What is a trigger in SQL?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a trigger in SQL?",
    "answer": [
      "A trigger is a database object that automatically executes a specified action in response to certain events on a table or view, such as INSERT, UPDATE, or DELETE."
    ],
    "interview_tip": "Used for auditing, validation, and automation.",
    "references": [],
    "slug": "what-is-a-trigger-in-sql"
  },
  {
    "id": 655,
    "title": "What is a covering index?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a covering index?",
    "answer": [
      "A covering index is an index that contains all the columns needed to satisfy a query, so the database engine does not need to access the table data itself."
    ],
    "interview_tip": "Improves query performance by reducing I/O.",
    "references": [],
    "slug": "what-is-a-covering-index"
  },
  {
    "id": 656,
    "title": "How do you secure sensitive data in a database?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "How do you secure sensitive data in a database?",
    "answer": [
      "Use encryption at rest and in transit.",
      "Implement access controls and least privilege.",
      "Mask or hash sensitive fields (e.g., passwords).",
      "Regularly audit and monitor database access."
    ],
    "interview_tip": "Mention GDPR, HIPAA, or other compliance if relevant.",
    "references": [],
    "slug": "how-do-you-secure-sensitive-data-in-a-database"
  },
  {
    "id": 657,
    "title": "What is a time-series database? Give examples.",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a time-series database? Give examples.",
    "answer": [
      "A time-series database is optimized for storing and querying data that is timestamped and collected over time.",
      "Examples: InfluxDB, TimescaleDB, Prometheus."
    ],
    "interview_tip": "Used for IoT, monitoring, and analytics.",
    "references": [],
    "slug": "what-is-a-time-series-database-give-examples"
  },
  {
    "id": 658,
    "title": "What is a foreign data wrapper in PostgreSQL?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a foreign data wrapper in PostgreSQL?",
    "answer": [
      "A foreign data wrapper (FDW) is a PostgreSQL feature that allows you to access data stored in external sources as if it were a table in your database.",
      "It enables integration with other databases, files, or APIs."
    ],
    "interview_tip": "Useful for data federation and ETL.",
    "references": [],
    "slug": "what-is-a-foreign-data-wrapper-in-postgresql"
  },
  {
    "id": 659,
    "title": "What is a write-ahead log (WAL)?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a write-ahead log (WAL)?",
    "answer": [
      "A write-ahead log is a logging mechanism that records changes before they are applied to the database.",
      "It ensures durability and helps with crash recovery."
    ],
    "interview_tip": "Common in PostgreSQL, MySQL (InnoDB), and others.",
    "references": [],
    "slug": "what-is-a-write-ahead-log-wal"
  },
  {
    "id": 660,
    "title": "How do you perform a backup and restore in MongoDB?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "How do you perform a backup and restore in MongoDB?",
    "answer": [
      "Use mongodump to create a backup and mongorestore to restore from the backup files.",
      "Cloud providers offer managed backup solutions as well."
    ],
    "interview_tip": "Automate backups for production systems.",
    "references": [],
    "slug": "how-do-you-perform-a-backup-and-restore-in-mongodb"
  },
  {
    "id": 661,
    "title": "What is a connection pool and why is it important?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a connection pool and why is it important?",
    "answer": [
      "A connection pool is a cache of database connections maintained so that connections can be reused when future requests to the database are required.",
      "It improves performance and resource utilization."
    ],
    "interview_tip": "Helps prevent connection exhaustion in high-traffic apps.",
    "references": [],
    "slug": "what-is-a-connection-pool-and-why-is-it-important"
  },
  {
    "id": 662,
    "title": "What is a CTE (Common Table Expression) in SQL?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a CTE (Common Table Expression) in SQL?",
    "answer": [
      "A CTE is a temporary result set that you can reference within a SELECT, INSERT, UPDATE, or DELETE statement.",
      "It improves readability and can be recursive."
    ],
    "interview_tip": "Syntax: WITH cte_name AS (...)",
    "references": [],
    "slug": "what-is-a-cte-common-table-expression-in-sql"
  },
  {
    "id": 663,
    "title": "What is DynamoDB and what are its use cases?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is DynamoDB and what are its use cases?",
    "answer": [
      "DynamoDB is a fully managed NoSQL database service provided by AWS.",
      "It is used for applications that require high performance, scalability, and low-latency data access, such as gaming, IoT, and real-time analytics."
    ],
    "interview_tip": "Supports key-value and document data models.",
    "references": [],
    "slug": "what-is-dynamodb-and-what-are-its-use-cases"
  },
  {
    "id": 664,
    "title": "What is database replication and why is it important?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is database replication and why is it important?",
    "answer": [
      "Database replication is the process of copying and maintaining database objects, such as tables, in multiple database servers.",
      "It improves data availability, fault tolerance, and can enhance read performance."
    ],
    "interview_tip": "Mention master-slave and multi-master replication.",
    "references": [],
    "slug": "what-is-database-replication-and-why-is-it-important"
  },
  {
    "id": 665,
    "title": "What is a database schema?",
    "category": "Database",
    "difficulty": "Beginner",
    "question": "What is a database schema?",
    "answer": [
      "A database schema is the structure that defines the organization of data in a database, including tables, columns, relationships, indexes, and constraints."
    ],
    "interview_tip": "Schemas help organize and secure data.",
    "references": [],
    "slug": "what-is-a-database-schema"
  },
  {
    "id": 666,
    "title": "Explain the difference between OLTP and OLAP systems.",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "Explain the difference between OLTP and OLAP systems.",
    "answer": [
      "OLTP (Online Transaction Processing) systems are optimized for managing transactional data and support day-to-day operations.",
      "OLAP (Online Analytical Processing) systems are optimized for complex queries and data analysis, often used in data warehousing."
    ],
    "interview_tip": "OLTP: many short transactions; OLAP: fewer, complex queries.",
    "references": [],
    "slug": "explain-the-difference-between-oltp-and-olap-systems"
  },
  {
    "id": 667,
    "title": "What is a surrogate key?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a surrogate key?",
    "answer": [
      "A surrogate key is a unique identifier for an entity, typically a sequential number, that has no business meaning and is used solely for identification."
    ],
    "interview_tip": "Often used instead of natural keys for simplicity.",
    "references": [],
    "slug": "what-is-a-surrogate-key"
  },
  {
    "id": 668,
    "title": "What is a star schema in data warehousing?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a star schema in data warehousing?",
    "answer": [
      "A star schema is a type of database schema used in data warehousing where a central fact table is connected to multiple dimension tables.",
      "It simplifies queries and improves performance for analytical workloads."
    ],
    "interview_tip": "Compare with snowflake schema.",
    "references": [],
    "slug": "what-is-a-star-schema-in-data-warehousing"
  },
  {
    "id": 669,
    "title": "What is a snowflake schema?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a snowflake schema?",
    "answer": [
      "A snowflake schema is a more normalized form of a star schema where dimension tables are further split into related tables.",
      "It reduces data redundancy but can make queries more complex."
    ],
    "interview_tip": "Used for large, complex data warehouses.",
    "references": [],
    "slug": "what-is-a-snowflake-schema"
  },
  {
    "id": 670,
    "title": "What is a database cursor?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database cursor?",
    "answer": [
      "A database cursor is a database object used to retrieve, manipulate, and navigate through a result set row by row."
    ],
    "interview_tip": "Used in stored procedures and batch processing.",
    "references": [],
    "slug": "what-is-a-database-cursor"
  },
  {
    "id": 671,
    "title": "What is a partitioned table?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a partitioned table?",
    "answer": [
      "A partitioned table is a table whose data is divided into smaller, more manageable pieces called partitions, often based on range, list, or hash of a column value.",
      "Partitioning improves query performance and manageability for large datasets."
    ],
    "interview_tip": "Common in big data and analytics.",
    "references": [],
    "slug": "what-is-a-partitioned-table"
  },
  {
    "id": 672,
    "title": "What is a sequence in SQL?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a sequence in SQL?",
    "answer": [
      "A sequence is a database object that generates a sequence of unique numeric values, often used for auto-incrementing primary keys."
    ],
    "interview_tip": "Supported in PostgreSQL, Oracle, and others.",
    "references": [],
    "slug": "what-is-a-sequence-in-sql"
  },
  {
    "id": 673,
    "title": "What is a database lock? Name its types.",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a database lock? Name its types.",
    "answer": [
      "A database lock is a mechanism to control concurrent access to data.",
      "Types include shared locks, exclusive locks, row-level locks, and table-level locks."
    ],
    "interview_tip": "Locks prevent data corruption but can cause contention.",
    "references": [],
    "slug": "what-is-a-database-lock-name-its-types"
  },
  {
    "id": 674,
    "title": "What is a hot backup and a cold backup?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a hot backup and a cold backup?",
    "answer": [
      "A hot backup is taken while the database is running and accessible to users.",
      "A cold backup is taken when the database is shut down and not accessible."
    ],
    "interview_tip": "Hot backups require special tools or DBMS support.",
    "references": [],
    "slug": "what-is-a-hot-backup-and-a-cold-backup"
  },
  {
    "id": 675,
    "title": "What is a database transaction log?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database transaction log?",
    "answer": [
      "A transaction log is a file that records all changes made to the database, used for recovery and auditing."
    ],
    "interview_tip": "Essential for crash recovery.",
    "references": [],
    "slug": "what-is-a-database-transaction-log"
  },
  {
    "id": 676,
    "title": "What is a GSI (Global Secondary Index) in DynamoDB?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a GSI (Global Secondary Index) in DynamoDB?",
    "answer": [
      "A GSI is an index with a partition key and an optional sort key that can be different from those on the base table, allowing for more flexible queries."
    ],
    "interview_tip": "GSIs enable efficient queries on non-primary key attributes.",
    "references": [],
    "slug": "what-is-a-gsi-global-secondary-index-in-dynamodb"
  },
  {
    "id": 677,
    "title": "What is a TTL (Time To Live) in databases?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a TTL (Time To Live) in databases?",
    "answer": [
      "TTL is a mechanism that automatically deletes data after a specified period, commonly used in caching and NoSQL databases."
    ],
    "interview_tip": "Helps manage storage and data lifecycle.",
    "references": [],
    "slug": "what-is-a-ttl-time-to-live-in-databases"
  },
  {
    "id": 678,
    "title": "What is a multi-document transaction in MongoDB?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a multi-document transaction in MongoDB?",
    "answer": [
      "A multi-document transaction allows multiple operations on multiple documents and collections to be executed as a single atomic transaction, ensuring ACID properties."
    ],
    "interview_tip": "Supported since MongoDB 4.0.",
    "references": [],
    "slug": "what-is-a-multi-document-transaction-in-mongodb"
  },
  {
    "id": 679,
    "title": "What is a database federation?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a database federation?",
    "answer": [
      "Database federation is the integration of multiple databases into a single, unified system, allowing queries across different data sources."
    ],
    "interview_tip": "Useful for data integration and analytics.",
    "references": [],
    "slug": "what-is-a-database-federation"
  },
  {
    "id": 680,
    "title": "What is a columnar database? Give examples.",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a columnar database? Give examples.",
    "answer": [
      "A columnar database stores data by columns rather than rows, optimizing for analytical queries.",
      "Examples: Amazon Redshift, Google BigQuery, Apache Cassandra."
    ],
    "interview_tip": "Great for OLAP workloads.",
    "references": [],
    "slug": "what-is-a-columnar-database-give-examples"
  },
  {
    "id": 681,
    "title": "What is a database view and what are its advantages?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database view and what are its advantages?",
    "answer": [
      "A view is a virtual table based on a query result.",
      "Advantages: simplifies complex queries, enhances security, and provides abstraction."
    ],
    "interview_tip": "Views can be updatable or read-only.",
    "references": [],
    "slug": "what-is-a-database-view-and-what-are-its-advantages"
  },
  {
    "id": 682,
    "title": "What is a database constraint? Name some types.",
    "category": "Database",
    "difficulty": "Beginner",
    "question": "What is a database constraint? Name some types.",
    "answer": [
      "A constraint is a rule enforced on data columns to ensure data integrity.",
      "Types: PRIMARY KEY, FOREIGN KEY, UNIQUE, NOT NULL, CHECK."
    ],
    "interview_tip": "Constraints prevent invalid data entry.",
    "references": [],
    "slug": "what-is-a-database-constraint-name-some-types"
  },
  {
    "id": 683,
    "title": "What is a database sharding key?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a database sharding key?",
    "answer": [
      "A sharding key is the field or set of fields used to determine how data is distributed across shards in a sharded database architecture."
    ],
    "interview_tip": "Choosing the right sharding key is critical for performance and scalability.",
    "references": [],
    "slug": "what-is-a-database-sharding-key"
  },
  {
    "id": 684,
    "title": "What is a database snapshot?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database snapshot?",
    "answer": [
      "A database snapshot is a read-only, static view of a database at a particular point in time.",
      "It is used for reporting, backup, and recovery purposes."
    ],
    "interview_tip": "Common in cloud and enterprise databases.",
    "references": [],
    "slug": "what-is-a-database-snapshot"
  },
  {
    "id": 685,
    "title": "What is a database synonym?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database synonym?",
    "answer": [
      "A synonym is an alias or alternative name for a database object, such as a table or view, used to simplify SQL queries."
    ],
    "interview_tip": "Useful for abstraction and migration.",
    "references": [],
    "slug": "what-is-a-database-synonym"
  },
  {
    "id": 686,
    "title": "What is optimistic vs. pessimistic locking?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is optimistic vs. pessimistic locking?",
    "answer": [
      "Optimistic locking assumes multiple transactions can complete without affecting each other and checks for conflicts before committing.",
      "Pessimistic locking locks resources as soon as they are read, preventing other transactions from accessing them until the lock is released."
    ],
    "interview_tip": "Optimistic is common in web apps; pessimistic in critical systems.",
    "references": [],
    "slug": "what-is-optimistic-vs-pessimistic-locking"
  },
  {
    "id": 687,
    "title": "What is a database index scan?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database index scan?",
    "answer": [
      "An index scan is a query execution method where the database engine searches through an index to find matching rows, improving performance over full table scans."
    ],
    "interview_tip": "Check query plans for index usage.",
    "references": [],
    "slug": "what-is-a-database-index-scan"
  },
  {
    "id": 688,
    "title": "What is a hash join in SQL?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a hash join in SQL?",
    "answer": [
      "A hash join is a join algorithm that uses a hash table to find matching rows between two tables, often used for large, unsorted datasets."
    ],
    "interview_tip": "Efficient for large joins without indexes.",
    "references": [],
    "slug": "what-is-a-hash-join-in-sql"
  },
  {
    "id": 689,
    "title": "What is a surrogate vs. natural key?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a surrogate vs. natural key?",
    "answer": [
      "A surrogate key is an artificial, system-generated unique identifier (e.g., auto-increment ID).",
      "A natural key is a real-world attribute that uniquely identifies a record (e.g., email, SSN)."
    ],
    "interview_tip": "Surrogate keys are preferred for simplicity and stability.",
    "references": [],
    "slug": "what-is-a-surrogate-vs-natural-key"
  },
  {
    "id": 690,
    "title": "What is a database collation?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database collation?",
    "answer": [
      "Collation defines how string comparison is performed, including case sensitivity and accent sensitivity, in a database."
    ],
    "interview_tip": "Important for multilingual applications.",
    "references": [],
    "slug": "what-is-a-database-collation"
  },
  {
    "id": 691,
    "title": "What is a recursive CTE in SQL?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a recursive CTE in SQL?",
    "answer": [
      "A recursive CTE (Common Table Expression) is a CTE that references itself, allowing hierarchical or tree-structured data queries."
    ],
    "interview_tip": "Useful for org charts, file systems, etc.",
    "references": [],
    "slug": "what-is-a-recursive-cte-in-sql"
  },
  {
    "id": 692,
    "title": "What is a database function?",
    "category": "Database",
    "difficulty": "Beginner",
    "question": "What is a database function?",
    "answer": [
      "A database function is a stored program that can be executed to return a single value, often used for calculations or data transformations."
    ],
    "interview_tip": "Functions can be scalar or table-valued.",
    "references": [],
    "slug": "what-is-a-database-function"
  },
  {
    "id": 693,
    "title": "What is a database firewall?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a database firewall?",
    "answer": [
      "A database firewall is a security system that monitors and controls database traffic to prevent unauthorized access and SQL injection attacks."
    ],
    "interview_tip": "Part of defense-in-depth strategy.",
    "references": [],
    "slug": "what-is-a-database-firewall"
  },
  {
    "id": 694,
    "title": "What is a database connection string?",
    "category": "Database",
    "difficulty": "Beginner",
    "question": "What is a database connection string?",
    "answer": [
      "A connection string is a string that specifies information needed to connect to a database, such as server address, database name, user, and password."
    ],
    "interview_tip": "Never hardcode credentials in code.",
    "references": [],
    "slug": "what-is-a-database-connection-string"
  },
  {
    "id": 695,
    "title": "What is a database cluster?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database cluster?",
    "answer": [
      "A database cluster is a group of servers that work together to provide high availability, scalability, and fault tolerance for a database system."
    ],
    "interview_tip": "Used in cloud and enterprise deployments.",
    "references": [],
    "slug": "what-is-a-database-cluster"
  },
  {
    "id": 696,
    "title": "What is a database failover?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database failover?",
    "answer": [
      "Failover is the process of automatically switching to a standby database server if the primary server fails, ensuring high availability."
    ],
    "interview_tip": "Critical for mission-critical systems.",
    "references": [],
    "slug": "what-is-a-database-failover"
  },
  {
    "id": 697,
    "title": "What is a database audit trail?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database audit trail?",
    "answer": [
      "An audit trail is a record of all changes and access to database data, used for security, compliance, and troubleshooting."
    ],
    "interview_tip": "Helps meet regulatory requirements.",
    "references": [],
    "slug": "what-is-a-database-audit-trail"
  },
  {
    "id": 698,
    "title": "What is a database optimizer?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a database optimizer?",
    "answer": [
      "A database optimizer is a component of the database engine that determines the most efficient way to execute a query."
    ],
    "interview_tip": "Check query plans for optimization.",
    "references": [],
    "slug": "what-is-a-database-optimizer"
  },
  {
    "id": 699,
    "title": "What is a database tablespace?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database tablespace?",
    "answer": [
      "A tablespace is a storage location where the actual data files of a database are stored."
    ],
    "interview_tip": "Used for managing large databases.",
    "references": [],
    "slug": "what-is-a-database-tablespace"
  },
  {
    "id": 700,
    "title": "What is a database rollback?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database rollback?",
    "answer": [
      "A rollback is the process of undoing changes made by a transaction, restoring the database to its previous state."
    ],
    "interview_tip": "Ensures data integrity in case of errors.",
    "references": [],
    "slug": "what-is-a-database-rollback"
  },
  {
    "id": 701,
    "title": "What is a database checkpoint?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a database checkpoint?",
    "answer": [
      "A checkpoint is a mechanism that writes all in-memory changes to disk, ensuring data durability and speeding up recovery after a crash."
    ],
    "interview_tip": "Common in PostgreSQL, Oracle, SQL Server.",
    "references": [],
    "slug": "what-is-a-database-checkpoint"
  },
  {
    "id": 702,
    "title": "What is a database synonym in Oracle?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database synonym in Oracle?",
    "answer": [
      "A synonym in Oracle is an alias for a database object, such as a table or view, used to simplify access and provide location transparency."
    ],
    "interview_tip": "Useful for cross-schema access.",
    "references": [],
    "slug": "what-is-a-database-synonym-in-oracle"
  },
  {
    "id": 703,
    "title": "What is a database data dictionary?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database data dictionary?",
    "answer": [
      "A data dictionary is a set of tables and views that store metadata about the database, such as table definitions, column types, and constraints."
    ],
    "interview_tip": "Helps with database management and introspection.",
    "references": [],
    "slug": "what-is-a-database-data-dictionary"
  },
  {
    "id": 704,
    "title": "What is a database view and how does it differ from a table?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database view and how does it differ from a table?",
    "answer": [
      "A view is a virtual table based on the result of a SQL query. It does not store data itself but provides a way to look at data from one or more tables.",
      "A table physically stores data, while a view is just a saved query that can be used like a table."
    ],
    "interview_tip": "Views can simplify complex queries and enhance security.",
    "references": [],
    "slug": "what-is-a-database-view-and-how-does-it-differ-from-a-table"
  },
  {
    "id": 705,
    "title": "What is a database cursor and when would you use one?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database cursor and when would you use one?",
    "answer": [
      "A cursor is a database object used to retrieve, manipulate, and navigate through a result set row by row.",
      "Cursors are useful for batch processing and when you need to process query results one row at a time."
    ],
    "interview_tip": "Use with caution as cursors can impact performance.",
    "references": [],
    "slug": "what-is-a-database-cursor-and-when-would-you-use-one"
  },
  {
    "id": 706,
    "title": "What is a database trigger and give an example use case?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database trigger and give an example use case?",
    "answer": [
      "A trigger is a database object that automatically executes a specified action in response to certain events on a table or view, such as INSERT, UPDATE, or DELETE.",
      "Example: Automatically updating a timestamp column when a row is modified."
    ],
    "interview_tip": "Triggers can enforce business rules and automate auditing.",
    "references": [],
    "slug": "what-is-a-database-trigger-and-give-an-example-use-case"
  },
  {
    "id": 707,
    "title": "What is a covering index and why is it useful?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a covering index and why is it useful?",
    "answer": [
      "A covering index is an index that contains all the columns needed to satisfy a query, so the database engine does not need to access the table data itself.",
      "This improves query performance by reducing I/O."
    ],
    "interview_tip": "Great for read-heavy workloads.",
    "references": [],
    "slug": "what-is-a-covering-index-and-why-is-it-useful"
  },
  {
    "id": 708,
    "title": "What is a database checkpoint and why is it important?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a database checkpoint and why is it important?",
    "answer": [
      "A checkpoint is a mechanism that writes all in-memory changes to disk, ensuring data durability and speeding up recovery after a crash."
    ],
    "interview_tip": "Common in PostgreSQL, Oracle, SQL Server.",
    "references": [],
    "slug": "what-is-a-database-checkpoint-and-why-is-it-important"
  },
  {
    "id": 709,
    "title": "What is a database federation and when is it used?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a database federation and when is it used?",
    "answer": [
      "Database federation is the integration of multiple databases into a single, unified system, allowing queries across different data sources.",
      "It is used for data integration and analytics across heterogeneous systems."
    ],
    "interview_tip": "Useful for organizations with multiple data sources.",
    "references": [],
    "slug": "what-is-a-database-federation-and-when-is-it-used"
  },
  {
    "id": 710,
    "title": "What is a database optimizer and how does it work?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a database optimizer and how does it work?",
    "answer": [
      "A database optimizer is a component of the database engine that determines the most efficient way to execute a query.",
      "It analyzes possible query plans and chooses the one with the lowest cost based on statistics and indexes."
    ],
    "interview_tip": "Check query plans for optimization.",
    "references": [],
    "slug": "what-is-a-database-optimizer-and-how-does-it-work"
  },
  {
    "id": 711,
    "title": "What is a database audit trail and why is it important?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database audit trail and why is it important?",
    "answer": [
      "An audit trail is a record of all changes and access to database data, used for security, compliance, and troubleshooting.",
      "It helps meet regulatory requirements and detect unauthorized access."
    ],
    "interview_tip": "Critical for financial and healthcare systems.",
    "references": [],
    "slug": "what-is-a-database-audit-trail-and-why-is-it-important"
  },
  {
    "id": 712,
    "title": "What is a database failover and how does it work?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database failover and how does it work?",
    "answer": [
      "Failover is the process of automatically switching to a standby database server if the primary server fails, ensuring high availability.",
      "It is managed by clustering software or cloud services."
    ],
    "interview_tip": "Critical for mission-critical systems.",
    "references": [],
    "slug": "what-is-a-database-failover-and-how-does-it-work"
  },
  {
    "id": 713,
    "title": "What is a database cluster and what are its benefits?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database cluster and what are its benefits?",
    "answer": [
      "A database cluster is a group of servers that work together to provide high availability, scalability, and fault tolerance for a database system.",
      "Clusters are used in cloud and enterprise deployments."
    ],
    "interview_tip": "Improves uptime and performance.",
    "references": [],
    "slug": "what-is-a-database-cluster-and-what-are-its-benefits"
  },
  {
    "id": 714,
    "title": "What is a database connection pool and why is it important?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database connection pool and why is it important?",
    "answer": [
      "A connection pool is a cache of database connections maintained so that connections can be reused when future requests to the database are required.",
      "It improves performance and resource utilization."
    ],
    "interview_tip": "Helps prevent connection exhaustion in high-traffic apps.",
    "references": [],
    "slug": "what-is-a-database-connection-pool-and-why-is-it-important"
  },
  {
    "id": 715,
    "title": "What is a database rollback and when would you use it?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database rollback and when would you use it?",
    "answer": [
      "A rollback is the process of undoing changes made by a transaction, restoring the database to its previous state.",
      "It is used to ensure data integrity in case of errors or failures."
    ],
    "interview_tip": "Critical for transactional systems.",
    "references": [],
    "slug": "what-is-a-database-rollback-and-when-would-you-use-it"
  },
  {
    "id": 716,
    "title": "What is a database tablespace and why is it used?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database tablespace and why is it used?",
    "answer": [
      "A tablespace is a storage location where the actual data files of a database are stored.",
      "It is used for managing large databases and optimizing storage."
    ],
    "interview_tip": "Helps with data organization and performance.",
    "references": [],
    "slug": "what-is-a-database-tablespace-and-why-is-it-used"
  },
  {
    "id": 717,
    "title": "What is a database synonym and how is it used?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database synonym and how is it used?",
    "answer": [
      "A synonym is an alias or alternative name for a database object, such as a table or view, used to simplify SQL queries and provide location transparency."
    ],
    "interview_tip": "Useful for abstraction and migration.",
    "references": [],
    "slug": "what-is-a-database-synonym-and-how-is-it-used"
  },
  {
    "id": 718,
    "title": "What is a database snapshot and what are its use cases?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database snapshot and what are its use cases?",
    "answer": [
      "A database snapshot is a read-only, static view of a database at a particular point in time.",
      "Use cases include reporting, backup, and recovery."
    ],
    "interview_tip": "Common in cloud and enterprise databases.",
    "references": [],
    "slug": "what-is-a-database-snapshot-and-what-are-its-use-cases"
  },
  {
    "id": 719,
    "title": "What is a database synonym in Oracle and why is it important?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database synonym in Oracle and why is it important?",
    "answer": [
      "A synonym in Oracle is an alias for a database object, such as a table or view, used to simplify access and provide location transparency.",
      "It is important for cross-schema access and abstraction."
    ],
    "interview_tip": "Useful for cross-schema access.",
    "references": [],
    "slug": "what-is-a-database-synonym-in-oracle-and-why-is-it-important"
  },
  {
    "id": 720,
    "title": "What is a database data dictionary and what information does it store?",
    "category": "Database",
    "difficulty": "Intermediate",
    "question": "What is a database data dictionary and what information does it store?",
    "answer": [
      "A data dictionary is a set of tables and views that store metadata about the database, such as table definitions, column types, and constraints.",
      "It helps with database management and introspection."
    ],
    "interview_tip": "Critical for DBAs and developers.",
    "references": [],
    "slug": "what-is-a-database-data-dictionary-and-what-information-does-it-store"
  },
  {
    "id": 721,
    "title": "What is a database constraint and why is it important?",
    "category": "Database",
    "difficulty": "Beginner",
    "question": "What is a database constraint and why is it important?",
    "answer": [
      "A constraint is a rule enforced on data columns to ensure data integrity.",
      "Constraints prevent invalid data entry and maintain consistency."
    ],
    "interview_tip": "Types: PRIMARY KEY, FOREIGN KEY, UNIQUE, NOT NULL, CHECK.",
    "references": [],
    "slug": "what-is-a-database-constraint-and-why-is-it-important"
  },
  {
    "id": 722,
    "title": "What is a database sharding key and how do you choose one?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a database sharding key and how do you choose one?",
    "answer": [
      "A sharding key is the field or set of fields used to determine how data is distributed across shards in a sharded database architecture.",
      "Choosing the right sharding key is critical for performance and scalability."
    ],
    "interview_tip": "Analyze access patterns before choosing a sharding key.",
    "references": [],
    "slug": "what-is-a-database-sharding-key-and-how-do-you-choose-one"
  },
  {
    "id": 723,
    "title": "What is a database federation and what are its challenges?",
    "category": "Database",
    "difficulty": "Advanced",
    "question": "What is a database federation and what are its challenges?",
    "answer": [
      "Database federation is the integration of multiple databases into a single, unified system, allowing queries across different data sources.",
      "Challenges include data consistency, query performance, and security."
    ],
    "interview_tip": "Used for data integration and analytics across organizations.",
    "references": [],
    "slug": "what-is-a-database-federation-and-what-are-its-challenges"
  }
]